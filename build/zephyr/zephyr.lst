
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	80 27 00 20 1d 1e 00 00 d3 70 00 00 f1 1d 00 00     .'. .....p......
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	f1 1d 00 00 f1 1d 00 00 f1 1d 00 00 00 00 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	51 1a 00 00 f1 1d 00 00 00 00 00 00 fd 19 00 00     Q...............
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	f1 1d 00 00                                         ....

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  50:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
  90:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
			switch (*fmt) {
  a0:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
  b0:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
  c0:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
  d0:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
  e0:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................
  f0:	01 1b 00 00 01 1b 00 00 01 1b 00 00 01 1b 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
				align = VA_STACK_ALIGN(void *);
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
			switch (*fmt) {
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
		buf = (void *) ROUND_UP(buf, align);
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
		if (is_str_arg) {
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xdc>
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
			int v = va_arg(ap, int);
     152:	d945      	bls.n	1e0 <__data_size+0x64>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>

			if (buf0 != NULL) {
				*(int *)buf = v;
     156:	f1c2 0320 	rsb	r3, r2, #32
			}
			buf += sizeof(int);
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
				arg_idx--;
     162:	4095      	lsls	r5, r2
				parsing = false;
     164:	ea43 0c0c 	orr.w	ip, r3, ip
				if (fmt[-1] == 'l') {
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
					if (fmt[-2] == 'l') {
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
						align = VA_STACK_ALIGN(long long);
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
				size = sizeof(void *);
     182:	4599      	cmp	r9, r3
					v.ld = va_arg(ap, long double);
     184:	d928      	bls.n	1d8 <__data_size+0x5c>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
				buf = (void *) ROUND_UP(buf, align);
     18c:	d204      	bcs.n	198 <__data_size+0x1c>
					v.ld = va_arg(ap, long double);
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <__data_size+0x1c>
				buf = (void *) ROUND_UP(buf, align);
     192:	f1a8 0702 	sub.w	r7, r8, #2
				if (buf0 != NULL) {
     196:	442b      	add	r3, r5
					if (BUF_OFFSET + size > len) {
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
						*(long double *)buf = v.ld;
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
				buf += size;
     1a6:	fb0c f000 	mul.w	r0, ip, r0
			switch (*fmt) {
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
			if (*++fmt == '\0') {
     1b0:	d914      	bls.n	1dc <__data_size+0x60>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <__data_size+0x48>
			if (!parsing) {
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <__data_size+0x48>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
				if (*fmt == '%') {
     1c2:	442c      	add	r4, r5
					arg_idx++;
     1c4:	1a24      	subs	r4, r4, r0
					parsing = true;
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
				align = VA_STACK_ALIGN(size_t);
     1ca:	b11e      	cbz	r6, 1d4 <__data_size+0x58>
     1cc:	40d4      	lsrs	r4, r2
			switch (*fmt) {
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
				parsing = false;
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <__data_size+0x1c>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <__data_size+0x48>
			long long v = va_arg(ap, long long);
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x54>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
				}
			}
			buf += sizeof(long long);
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
		} else if (size == sizeof(int)) {
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
			int v = va_arg(ap, int);
     200:	d962      	bls.n	2c8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xd4>
     202:	18eb      	adds	r3, r5, r3
			if (buf0 != NULL) {
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
		} else if (size == sizeof(long long)) {
     208:	d204      	bcs.n	214 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x20>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x20>
			long long v = va_arg(ap, long long);
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
			if (buf0 != NULL) {
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
			s = va_arg(ap, char *);
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     222:	fb0c f707 	mul.w	r7, ip, r7
			s = va_arg(ap, char *);
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
			if (is_ro && !do_ro) {
     22c:	d94e      	bls.n	2cc <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xd8>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     234:	d204      	bcs.n	240 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4c>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4c>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     23a:	f1ac 0302 	sub.w	r3, ip, #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
					__ASSERT(false, "String with too many arguments");
     246:	e7c0      	b.n	1ca <__data_size+0x4e>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					__ASSERT(false, "str_ptr_pos[] too small");
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     264:	fb0e 101c 	mls	r0, lr, ip, r1
				if (buf0 != NULL) {
     268:	0c19      	lsrs	r1, r3, #16
					str_ptr_pos[s_idx] = s_ptr_idx;
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
					str_ptr_arg[s_idx] = arg_idx;
     274:	fa04 f402 	lsl.w	r4, r4, r2
						s_rw_cnt++;
     278:	d922      	bls.n	2c0 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xcc>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     280:	d204      	bcs.n	28c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x98>
     282:	4588      	cmp	r8, r1
					__ASSERT(false, "str_ptr_pos[] too small");
     284:	d902      	bls.n	28c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x98>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
				if (buf0 != NULL) {
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
					str_ptr_pos[s_idx] = s_ptr_idx;
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xd0>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
					str_ptr_arg[s_idx] = arg_idx;
     2ac:	d204      	bcs.n	2b8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xc4>
     2ae:	429f      	cmp	r7, r3
					if (is_ro) {
     2b0:	d902      	bls.n	2b8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xc4>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
						s_ro_cnt++;
     2be:	e792      	b.n	1e6 <__data_size+0x6a>
     2c0:	4660      	mov	r0, ip
				s_idx++;
     2c2:	e7e3      	b.n	28c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x98>
					if (BUF_OFFSET + size > len) {
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xc4>
			buf += sizeof(char *);
     2c8:	4660      	mov	r0, ip
			is_str_arg = false;
     2ca:	e7a3      	b.n	214 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x20>
					if (BUF_OFFSET + size > len) {
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x4c>
				} else if (is_ro) {
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xee>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xe8>
					len += 1;
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <__data_size+0x58>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xe2>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x118>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0xfc>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x10e>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
				} else if (rws_pos_en) {
     2f8:	2001      	movs	r0, #1
					len += 2;
     2fa:	469c      	mov	ip, r3
				} else if (rws_pos_en) {
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x112>
     2fe:	2100      	movs	r1, #0
					len += strlen(s) + 1 + 1;
     300:	e768      	b.n	1d4 <__data_size+0x58>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x108>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x10a>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
		} else {
			__ASSERT(false, "unexpected size %u", size);
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
		__ASSERT(false, "too many format args");
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x1d8>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x168>
     352:	459a      	cmp	sl, r3

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     354:	d902      	bls.n	35c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x168>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     360:	b289      	uxth	r1, r1

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     362:	fbb3 f8f9 	udiv	r8, r3, r9

	if (rws_pos_en) {
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     366:	fb09 3318 	mls	r3, r9, r8, r3
	if (rws_pos_en) {
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x1dc>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     37c:	d204      	bcs.n	388 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x194>
     37e:	458e      	cmp	lr, r1
		for (i = 0; i < s_idx; i++) {
     380:	d902      	bls.n	388 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x194>
     382:	f1a8 0302 	sub.w	r3, r8, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     38c:	fba0 9802 	umull	r9, r8, r0, r2
		if (BUF_OFFSET + 1 + size > len) {
     390:	eba1 010e 	sub.w	r1, r1, lr
			*buf++ = str_ptr_arg[i];
     394:	4541      	cmp	r1, r8
	for (i = 0; i < s_idx; i++) {
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     39a:	d302      	bcc.n	3a2 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x1ae>
     39c:	d106      	bne.n	3ac <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x1b8>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     39e:	454d      	cmp	r5, r9
		pkg_hdr->desc.rw_str_cnt = 0;
     3a0:	d204      	bcs.n	3ac <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x1b8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
			if (BUF_OFFSET + 1 > len) {
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x10a>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
			if (BUF_OFFSET + 1 > len) {
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
			*buf++ = pos;
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
		for (i = 0; i < s_idx; i++) {
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x10a>
     3cc:	4640      	mov	r0, r8
		if (rws_pos_en) {
     3ce:	e7c5      	b.n	35c <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x168>
     3d0:	4643      	mov	r3, r8
			*buf++ = str_ptr_arg[i];
     3d2:	e7d9      	b.n	388 <CONFIG_I2C_NRFX_TRANSFER_TIMEOUT+0x194>

000003d4 <task_Temperature>:
uint8_t data=0x00;
int ret;
int output_period=10;	/* ms */

void task_Temperature(void)
{
     3d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	printk("THREAD A Started!\n");
     3d8:	482e      	ldr	r0, [pc, #184]	; (494 <CONFIG_FLASH_SIZE+0x94>)
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
     3da:	4e2f      	ldr	r6, [pc, #188]	; (498 <CONFIG_FLASH_SIZE+0x98>)
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     3dc:	4f2f      	ldr	r7, [pc, #188]	; (49c <CONFIG_FLASH_SIZE+0x9c>)
	int64_t start_time;
	/* infinite cycle */
	while(1)
	{
		start_time=k_uptime_get();
		ret = i2c_read_dt(&dev_i2c, &data,sizeof(data));
     3de:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 4a0 <CONFIG_FLASH_SIZE+0xa0>
	printk("THREAD A Started!\n");
     3e2:	f006 fd4d 	bl	6e80 <printk>
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     3e6:	f007 fa4c 	bl	7882 <z_impl_k_uptime_ticks>
	msg.len = num_bytes;
     3ea:	2201      	movs	r2, #1
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     3ec:	2303      	movs	r3, #3
     3ee:	4604      	mov	r4, r0
     3f0:	460d      	mov	r5, r1
	msg.buf = buf;
     3f2:	9601      	str	r6, [sp, #4]
	msg.len = num_bytes;
     3f4:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
     3f6:	f88d 300c 	strb.w	r3, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
     3fa:	68bb      	ldr	r3, [r7, #8]
     3fc:	4827      	ldr	r0, [pc, #156]	; (49c <CONFIG_FLASH_SIZE+0x9c>)
     3fe:	f8d3 9008 	ldr.w	r9, [r3, #8]
     402:	a901      	add	r1, sp, #4
     404:	234d      	movs	r3, #77	; 0x4d
     406:	47c8      	blx	r9
		TC74Update(ret);	/* missing structure to write */
		printk("Read %dºCelcius\n", data);
     408:	7831      	ldrb	r1, [r6, #0]
		ret = i2c_read_dt(&dev_i2c, &data,sizeof(data));
     40a:	f8c8 0000 	str.w	r0, [r8]
		printk("Read %dºCelcius\n", data);
     40e:	4825      	ldr	r0, [pc, #148]	; (4a4 <CONFIG_FLASH_SIZE+0xa4>)
     410:	f006 fd36 	bl	6e80 <printk>
     414:	f007 fa35 	bl	7882 <z_impl_k_uptime_ticks>
		/* Make thread sleep for the remaining of time before next check */
		if(k_uptime_get()-start_time < output_period)
     418:	4b23      	ldr	r3, [pc, #140]	; (4a8 <CONFIG_FLASH_SIZE+0xa8>)
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     41a:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
     41e:	f8d3 a000 	ldr.w	sl, [r3]
     422:	fba4 4209 	umull	r4, r2, r4, r9
     426:	fba0 0309 	umull	r0, r3, r0, r9
     42a:	fb09 3101 	mla	r1, r9, r1, r3
     42e:	fb09 2205 	mla	r2, r9, r5, r2
     432:	0bc3      	lsrs	r3, r0, #15
     434:	0be4      	lsrs	r4, r4, #15
     436:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     43a:	ea44 4442 	orr.w	r4, r4, r2, lsl #17
     43e:	1b1b      	subs	r3, r3, r4
     440:	ea4f 31d1 	mov.w	r1, r1, lsr #15
     444:	eb61 31d2 	sbc.w	r1, r1, r2, lsr #15
     448:	ea4f 72ea 	mov.w	r2, sl, asr #31
     44c:	4553      	cmp	r3, sl
     44e:	4191      	sbcs	r1, r2
     450:	da1b      	bge.n	48a <CONFIG_FLASH_SIZE+0x8a>
     452:	f007 fa16 	bl	7882 <z_impl_k_uptime_ticks>
     456:	fba0 0309 	umull	r0, r3, r0, r9
     45a:	fb09 3101 	mla	r1, r9, r1, r3
     45e:	0bc3      	lsrs	r3, r0, #15
     460:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
		{
			/*gets the most updated remaining time to sleep*/
			k_msleep(output_period - k_uptime_get());
     464:	ebaa 0a03 	sub.w	sl, sl, r3
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     468:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
     46c:	f44f 4400 	mov.w	r4, #32768	; 0x8000
     470:	f240 30e7 	movw	r0, #999	; 0x3e7
     474:	2100      	movs	r1, #0
     476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     47a:	2300      	movs	r3, #0
     47c:	fbca 0104 	smlal	r0, r1, sl, r4
     480:	f7ff fe3e 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
     484:	f005 fed8 	bl	6238 <z_impl_k_sleep>
     488:	e7ad      	b.n	3e6 <task_Temperature+0x12>
		}
		else{
			printk("Failed to meet requirement!");
     48a:	4808      	ldr	r0, [pc, #32]	; (4ac <CONFIG_FLASH_SIZE+0xac>)
     48c:	f006 fcf8 	bl	6e80 <printk>
     490:	e7a9      	b.n	3e6 <task_Temperature+0x12>
     492:	bf00      	nop
     494:	00007e04 	.word	0x00007e04
     498:	20000d18 	.word	0x20000d18
     49c:	00007990 	.word	0x00007990
     4a0:	2000041c 	.word	0x2000041c
     4a4:	00007e17 	.word	0x00007e17
     4a8:	20000000 	.word	0x20000000
     4ac:	00007e29 	.word	0x00007e29

000004b0 <main>:
K_THREAD_STACK_DEFINE(Task_buttons_stack_area, TASK_BUTTONS_STACK_SIZE);
struct k_thread Task_buttons_thread_data;
k_tid_t Task_buttons_tid;

void main(void)
{
     4b0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
     4b4:	f04f 0800 	mov.w	r8, #0
     4b8:	b088      	sub	sp, #32
     4ba:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     4be:	2400      	movs	r4, #0
     4c0:	2605      	movs	r6, #5
     4c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
     4c6:	e9cd 6403 	strd	r6, r4, [sp, #12]
     4ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
     4ce:	4b13      	ldr	r3, [pc, #76]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4d0:	4913      	ldr	r1, [pc, #76]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4d2:	9400      	str	r4, [sp, #0]
     4d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
     4d8:	4812      	ldr	r0, [pc, #72]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
	/* Thread creation */
	Task_temp_tid = k_thread_create(&Task_temp_thread_data, Task_temp_stack_area,
     4da:	4d13      	ldr	r5, [pc, #76]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     4dc:	f004 fbec 	bl	4cb8 <z_impl_k_thread_create>
     4e0:	6028      	str	r0, [r5, #0]
     4e2:	4b12      	ldr	r3, [pc, #72]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4e4:	4912      	ldr	r1, [pc, #72]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4e6:	9400      	str	r4, [sp, #0]
     4e8:	e9cd 8906 	strd	r8, r9, [sp, #24]
     4ec:	e9cd 6403 	strd	r6, r4, [sp, #12]
     4f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
     4f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
     4f8:	480e      	ldr	r0, [pc, #56]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4fa:	f004 fbdd 	bl	4cb8 <z_impl_k_thread_create>
                          			K_THREAD_STACK_SIZEOF(Task_temp_stack_area), task_Temperature,
        							NULL, NULL, NULL, TASK_TEMP_PRIORITY, 0, K_NO_WAIT);

	Task_temp_tid = k_thread_create(&Task_buttons_thread_data, Task_buttons_stack_area,
     4fe:	6028      	str	r0, [r5, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     500:	480d      	ldr	r0, [pc, #52]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     502:	f007 f954 	bl	77ae <z_device_is_ready>
        							K_THREAD_STACK_SIZEOF(Task_buttons_stack_area), task_Buttons,
        							NULL, NULL, NULL, TASK_BUTTONS_PRIORITY, 0, K_NO_WAIT);


	/* Check if the device is ready to be used,place holder for now */
	if (!device_is_ready(dev_i2c.bus)) {
     506:	b928      	cbnz	r0, 514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
		printk("I2C: Device is not ready.\n");
     508:	480c      	ldr	r0, [pc, #48]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
		return;
	}

	return;

}
     50a:	b008      	add	sp, #32
     50c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
		printk("I2C: Device is not ready.\n");
     510:	f006 bcb6 	b.w	6e80 <printk>
}
     514:	b008      	add	sp, #32
     516:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
     51a:	bf00      	nop
     51c:	000003d5 	.word	0x000003d5
     520:	20001580 	.word	0x20001580
     524:	20000270 	.word	0x20000270
     528:	20000418 	.word	0x20000418
     52c:	00006e7b 	.word	0x00006e7b
     530:	20001140 	.word	0x20001140
     534:	200001f0 	.word	0x200001f0
     538:	00007990 	.word	0x00007990
     53c:	00007e45 	.word	0x00007e45

00000540 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     540:	4b01      	ldr	r3, [pc, #4]	; (548 <char_out+0x8>)
     542:	681b      	ldr	r3, [r3, #0]
     544:	4718      	bx	r3
     546:	bf00      	nop
     548:	20000004 	.word	0x20000004

0000054c <__printk_hook_install>:
	_char_out = fn;
     54c:	4b01      	ldr	r3, [pc, #4]	; (554 <__printk_hook_install+0x8>)
     54e:	6018      	str	r0, [r3, #0]
}
     550:	4770      	bx	lr
     552:	bf00      	nop
     554:	20000004 	.word	0x20000004

00000558 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     558:	b507      	push	{r0, r1, r2, lr}
     55a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     55c:	2100      	movs	r1, #0
     55e:	4602      	mov	r2, r0
     560:	9100      	str	r1, [sp, #0]
     562:	4803      	ldr	r0, [pc, #12]	; (570 <vprintk+0x18>)
     564:	f000 fb50 	bl	c08 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     568:	b003      	add	sp, #12
     56a:	f85d fb04 	ldr.w	pc, [sp], #4
     56e:	bf00      	nop
     570:	00000541 	.word	0x00000541

00000574 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     574:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
     578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     57a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
     57c:	d30e      	bcc.n	59c <sys_heap_init+0x28>
     57e:	493b      	ldr	r1, [pc, #236]	; (66c <sys_heap_init+0xf8>)
     580:	4a3b      	ldr	r2, [pc, #236]	; (670 <sys_heap_init+0xfc>)
     582:	483c      	ldr	r0, [pc, #240]	; (674 <sys_heap_init+0x100>)
     584:	f240 13eb 	movw	r3, #491	; 0x1eb
     588:	f006 fd87 	bl	709a <assert_print>
     58c:	483a      	ldr	r0, [pc, #232]	; (678 <sys_heap_init+0x104>)
     58e:	f006 fd84 	bl	709a <assert_print>
     592:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
     596:	4836      	ldr	r0, [pc, #216]	; (670 <sys_heap_init+0xfc>)
     598:	f006 fd78 	bl	708c <assert_post_action>
     59c:	2a04      	cmp	r2, #4
     59e:	d80c      	bhi.n	5ba <sys_heap_init+0x46>
     5a0:	4936      	ldr	r1, [pc, #216]	; (67c <sys_heap_init+0x108>)
     5a2:	4a33      	ldr	r2, [pc, #204]	; (670 <sys_heap_init+0xfc>)
     5a4:	4833      	ldr	r0, [pc, #204]	; (674 <sys_heap_init+0x100>)
     5a6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
     5aa:	f006 fd76 	bl	709a <assert_print>
     5ae:	4834      	ldr	r0, [pc, #208]	; (680 <sys_heap_init+0x10c>)
     5b0:	f006 fd73 	bl	709a <assert_print>
     5b4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
     5b8:	e7ed      	b.n	596 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
     5ba:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     5bc:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     5be:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
     5c0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
     5c4:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     5c8:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     5ca:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
     5cc:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
     5d0:	d80c      	bhi.n	5ec <sys_heap_init+0x78>
     5d2:	492c      	ldr	r1, [pc, #176]	; (684 <sys_heap_init+0x110>)
     5d4:	4a26      	ldr	r2, [pc, #152]	; (670 <sys_heap_init+0xfc>)
     5d6:	4827      	ldr	r0, [pc, #156]	; (674 <sys_heap_init+0x100>)
     5d8:	f240 13fb 	movw	r3, #507	; 0x1fb
     5dc:	f006 fd5d 	bl	709a <assert_print>
     5e0:	4827      	ldr	r0, [pc, #156]	; (680 <sys_heap_init+0x10c>)
     5e2:	f006 fd5a 	bl	709a <assert_print>
     5e6:	f240 11fb 	movw	r1, #507	; 0x1fb
     5ea:	e7d4      	b.n	596 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
     5ec:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
     5f0:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
     5f4:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
     5f8:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
     5fa:	3107      	adds	r1, #7
     5fc:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     5fe:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
     600:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     602:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
     604:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
     608:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
     60a:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
     60c:	d90c      	bls.n	628 <sys_heap_init+0xb4>
     60e:	491e      	ldr	r1, [pc, #120]	; (688 <sys_heap_init+0x114>)
     610:	4a17      	ldr	r2, [pc, #92]	; (670 <sys_heap_init+0xfc>)
     612:	4818      	ldr	r0, [pc, #96]	; (674 <sys_heap_init+0x100>)
     614:	f44f 7303 	mov.w	r3, #524	; 0x20c
     618:	f006 fd3f 	bl	709a <assert_print>
     61c:	4818      	ldr	r0, [pc, #96]	; (680 <sys_heap_init+0x10c>)
     61e:	f006 fd3c 	bl	709a <assert_print>
     622:	f44f 7103 	mov.w	r1, #524	; 0x20c
     626:	e7b6      	b.n	596 <sys_heap_init+0x22>
     628:	f100 050c 	add.w	r5, r0, #12
     62c:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
     630:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
     634:	42b5      	cmp	r5, r6
     636:	d1fb      	bne.n	630 <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     638:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     63a:	f045 0501 	orr.w	r5, r5, #1
     63e:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
     640:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
     644:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
     646:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
     648:	8004      	strh	r4, [r0, #0]
     64a:	8077      	strh	r7, [r6, #2]
     64c:	1886      	adds	r6, r0, r2
     64e:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
     652:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
     656:	8074      	strh	r4, [r6, #2]
     658:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
     65a:	885a      	ldrh	r2, [r3, #2]
     65c:	f042 0201 	orr.w	r2, r2, #1
     660:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
     662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
     666:	f006 bc27 	b.w	6eb8 <free_list_add>
     66a:	bf00      	nop
     66c:	00007f5a 	.word	0x00007f5a
     670:	00007e71 	.word	0x00007e71
     674:	00007ea3 	.word	0x00007ea3
     678:	00007f70 	.word	0x00007f70
     67c:	00007f87 	.word	0x00007f87
     680:	00007fa8 	.word	0x00007fa8
     684:	00007fc1 	.word	0x00007fc1
     688:	00007fea 	.word	0x00007fea

0000068c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     68c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     690:	4604      	mov	r4, r0
     692:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     694:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     696:	0719      	lsls	r1, r3, #28
{
     698:	4615      	mov	r5, r2
	if (processing) {
     69a:	d412      	bmi.n	6c2 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     69c:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     69e:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
     6a2:	d164      	bne.n	76e <process_event+0xe2>
			evt = process_recheck(mgr);
     6a4:	4620      	mov	r0, r4
     6a6:	f006 fc2e 	bl	6f06 <process_recheck>
		}

		if (evt == EVT_NOP) {
     6aa:	b188      	cbz	r0, 6d0 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     6ac:	3801      	subs	r0, #1
     6ae:	2804      	cmp	r0, #4
     6b0:	f200 8134 	bhi.w	91c <__z_interrupt_stack_SIZEOF+0xdc>
     6b4:	e8df f010 	tbh	[pc, r0, lsl #1]
     6b8:	0132005b 	.word	0x0132005b
     6bc:	00d10081 	.word	0x00d10081
     6c0:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
     6c2:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     6c4:	bf0c      	ite	eq
     6c6:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6ca:	f043 0120 	orrne.w	r1, r3, #32
     6ce:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
     6d0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     6d2:	4620      	mov	r0, r4
     6d4:	f004 fbc8 	bl	4e68 <z_spin_unlock_valid>
     6d8:	2800      	cmp	r0, #0
     6da:	f040 819b 	bne.w	a14 <__z_interrupt_stack_SIZEOF+0x1d4>
     6de:	4998      	ldr	r1, [pc, #608]	; (940 <__z_interrupt_stack_SIZEOF+0x100>)
     6e0:	4a98      	ldr	r2, [pc, #608]	; (944 <__z_interrupt_stack_SIZEOF+0x104>)
     6e2:	4899      	ldr	r0, [pc, #612]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     6e4:	23c2      	movs	r3, #194	; 0xc2
     6e6:	f006 fcd8 	bl	709a <assert_print>
     6ea:	4621      	mov	r1, r4
     6ec:	e0b0      	b.n	850 <__z_interrupt_stack_SIZEOF+0x10>
     6ee:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     6f2:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     6f4:	2801      	cmp	r0, #1
     6f6:	d81e      	bhi.n	736 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     6f8:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
     6fa:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
     6fc:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     6fe:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     702:	d114      	bne.n	72e <process_event+0xa2>
		*clients = mgr->clients;
     704:	463a      	mov	r2, r7
     706:	e003      	b.n	710 <process_event+0x84>
				mgr->refs += 1U;
     708:	8be0      	ldrh	r0, [r4, #30]
     70a:	3001      	adds	r0, #1
     70c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     70e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     710:	2a00      	cmp	r2, #0
     712:	d1f9      	bne.n	708 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     714:	f023 0307 	bic.w	r3, r3, #7
     718:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     71c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     71e:	4620      	mov	r0, r4
     720:	f006 fbf1 	bl	6f06 <process_recheck>
     724:	b390      	cbz	r0, 78c <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     726:	f042 0220 	orr.w	r2, r2, #32
     72a:	83a2      	strh	r2, [r4, #28]
     72c:	e02e      	b.n	78c <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     72e:	f023 0307 	bic.w	r3, r3, #7
     732:	b29a      	uxth	r2, r3
}
     734:	e7f2      	b.n	71c <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
     736:	2a04      	cmp	r2, #4
     738:	d133      	bne.n	7a2 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     73a:	f023 0307 	bic.w	r3, r3, #7
     73e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     740:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
     742:	4620      	mov	r0, r4
     744:	f006 fbdf 	bl	6f06 <process_recheck>
     748:	b110      	cbz	r0, 750 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     74a:	f042 0220 	orr.w	r2, r2, #32
     74e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     750:	8ba3      	ldrh	r3, [r4, #28]
     752:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     756:	4589      	cmp	r9, r1
     758:	f040 80ea 	bne.w	930 <__z_interrupt_stack_SIZEOF+0xf0>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     75c:	8ba1      	ldrh	r1, [r4, #28]
     75e:	06ca      	lsls	r2, r1, #27
     760:	f140 814f 	bpl.w	a02 <__z_interrupt_stack_SIZEOF+0x1c2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     764:	f021 0310 	bic.w	r3, r1, #16
     768:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     76a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
     76e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     772:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
     774:	f1b8 0f00 	cmp.w	r8, #0
     778:	dab9      	bge.n	6ee <process_event+0x62>
	list->head = NULL;
     77a:	2200      	movs	r2, #0
		*clients = mgr->clients;
     77c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     77e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
     782:	e9c4 2200 	strd	r2, r2, [r4]
     786:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     78a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     78c:	8ba3      	ldrh	r3, [r4, #28]
     78e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     792:	4589      	cmp	r9, r1
     794:	f040 80cd 	bne.w	932 <__z_interrupt_stack_SIZEOF+0xf2>
		    || !sys_slist_is_empty(&clients)
     798:	2f00      	cmp	r7, #0
     79a:	d0df      	beq.n	75c <process_event+0xd0>
     79c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     79e:	46b2      	mov	sl, r6
     7a0:	e044      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		__ASSERT_NO_MSG(false);
     7a2:	496a      	ldr	r1, [pc, #424]	; (94c <__z_interrupt_stack_SIZEOF+0x10c>)
     7a4:	4a6a      	ldr	r2, [pc, #424]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     7a6:	4868      	ldr	r0, [pc, #416]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     7a8:	f240 131b 	movw	r3, #283	; 0x11b
     7ac:	f006 fc75 	bl	709a <assert_print>
     7b0:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
     7b4:	4866      	ldr	r0, [pc, #408]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     7b6:	f006 fc69 	bl	708c <assert_post_action>
     7ba:	b149      	cbz	r1, 7d0 <process_event+0x144>
     7bc:	4965      	ldr	r1, [pc, #404]	; (954 <__z_interrupt_stack_SIZEOF+0x114>)
     7be:	4a64      	ldr	r2, [pc, #400]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     7c0:	4861      	ldr	r0, [pc, #388]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     7c2:	f44f 73ab 	mov.w	r3, #342	; 0x156
     7c6:	f006 fc68 	bl	709a <assert_print>
     7ca:	f44f 71ab 	mov.w	r1, #342	; 0x156
     7ce:	e7f1      	b.n	7b4 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     7d0:	6823      	ldr	r3, [r4, #0]
     7d2:	b94b      	cbnz	r3, 7e8 <process_event+0x15c>
     7d4:	4960      	ldr	r1, [pc, #384]	; (958 <__z_interrupt_stack_SIZEOF+0x118>)
     7d6:	4a5e      	ldr	r2, [pc, #376]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     7d8:	485b      	ldr	r0, [pc, #364]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     7da:	f240 1357 	movw	r3, #343	; 0x157
     7de:	f006 fc5c 	bl	709a <assert_print>
     7e2:	f240 1157 	movw	r1, #343	; 0x157
     7e6:	e7e5      	b.n	7b4 <process_event+0x128>
			transit = mgr->transitions->start;
     7e8:	6923      	ldr	r3, [r4, #16]
     7ea:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
     7ec:	b94e      	cbnz	r6, 802 <CONFIG_ISR_STACK_SIZE+0x2>
     7ee:	495b      	ldr	r1, [pc, #364]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     7f0:	4a57      	ldr	r2, [pc, #348]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     7f2:	4855      	ldr	r0, [pc, #340]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     7f4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
     7f8:	f006 fc4f 	bl	709a <assert_print>
     7fc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
     800:	e7d8      	b.n	7b4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     802:	8ba3      	ldrh	r3, [r4, #28]
     804:	f023 0307 	bic.w	r3, r3, #7
     808:	f043 0306 	orr.w	r3, r3, #6
     80c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     80e:	83a3      	strh	r3, [r4, #28]
     810:	460f      	mov	r7, r1
		res = 0;
     812:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     814:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     818:	68a2      	ldr	r2, [r4, #8]
     81a:	2a00      	cmp	r2, #0
     81c:	f040 808b 	bne.w	936 <__z_interrupt_stack_SIZEOF+0xf6>
		    || !sys_slist_is_empty(&clients)
     820:	2f00      	cmp	r7, #0
     822:	f040 808b 	bne.w	93c <__z_interrupt_stack_SIZEOF+0xfc>
		    || (transit != NULL)) {
     826:	2e00      	cmp	r6, #0
     828:	d098      	beq.n	75c <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     82a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     82c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
     830:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
     834:	83a3      	strh	r3, [r4, #28]
     836:	4658      	mov	r0, fp
     838:	f004 fb16 	bl	4e68 <z_spin_unlock_valid>
     83c:	2800      	cmp	r0, #0
     83e:	f040 8097 	bne.w	970 <__z_interrupt_stack_SIZEOF+0x130>
     842:	493f      	ldr	r1, [pc, #252]	; (940 <__z_interrupt_stack_SIZEOF+0x100>)
     844:	4a3f      	ldr	r2, [pc, #252]	; (944 <__z_interrupt_stack_SIZEOF+0x104>)
     846:	4840      	ldr	r0, [pc, #256]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     848:	23c2      	movs	r3, #194	; 0xc2
     84a:	f006 fc26 	bl	709a <assert_print>
     84e:	4659      	mov	r1, fp
     850:	4843      	ldr	r0, [pc, #268]	; (960 <__z_interrupt_stack_SIZEOF+0x120>)
     852:	f006 fc22 	bl	709a <assert_print>
     856:	21c2      	movs	r1, #194	; 0xc2
     858:	e0ae      	b.n	9b8 <__z_interrupt_stack_SIZEOF+0x178>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
     85a:	2902      	cmp	r1, #2
     85c:	d009      	beq.n	872 <__z_interrupt_stack_SIZEOF+0x32>
     85e:	4941      	ldr	r1, [pc, #260]	; (964 <__z_interrupt_stack_SIZEOF+0x124>)
     860:	4a3b      	ldr	r2, [pc, #236]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     862:	4839      	ldr	r0, [pc, #228]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     864:	f240 135d 	movw	r3, #349	; 0x15d
     868:	f006 fc17 	bl	709a <assert_print>
     86c:	f240 115d 	movw	r1, #349	; 0x15d
     870:	e7a0      	b.n	7b4 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
     872:	8be7      	ldrh	r7, [r4, #30]
     874:	b14f      	cbz	r7, 88a <__z_interrupt_stack_SIZEOF+0x4a>
     876:	493c      	ldr	r1, [pc, #240]	; (968 <__z_interrupt_stack_SIZEOF+0x128>)
     878:	4a35      	ldr	r2, [pc, #212]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     87a:	4833      	ldr	r0, [pc, #204]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     87c:	f44f 73af 	mov.w	r3, #350	; 0x15e
     880:	f006 fc0b 	bl	709a <assert_print>
     884:	f44f 71af 	mov.w	r1, #350	; 0x15e
     888:	e794      	b.n	7b4 <process_event+0x128>
			transit = mgr->transitions->stop;
     88a:	6923      	ldr	r3, [r4, #16]
     88c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
     88e:	b94e      	cbnz	r6, 8a4 <__z_interrupt_stack_SIZEOF+0x64>
     890:	4932      	ldr	r1, [pc, #200]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     892:	4a2f      	ldr	r2, [pc, #188]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     894:	482c      	ldr	r0, [pc, #176]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     896:	f240 1361 	movw	r3, #353	; 0x161
     89a:	f006 fbfe 	bl	709a <assert_print>
     89e:	f240 1161 	movw	r1, #353	; 0x161
     8a2:	e787      	b.n	7b4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     8a4:	8ba3      	ldrh	r3, [r4, #28]
     8a6:	f023 0307 	bic.w	r3, r3, #7
     8aa:	f043 0304 	orr.w	r3, r3, #4
     8ae:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     8b0:	83a3      	strh	r3, [r4, #28]
		res = 0;
     8b2:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     8b4:	f04f 0904 	mov.w	r9, #4
     8b8:	e7ae      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     8ba:	2901      	cmp	r1, #1
     8bc:	d009      	beq.n	8d2 <__z_interrupt_stack_SIZEOF+0x92>
     8be:	492b      	ldr	r1, [pc, #172]	; (96c <__z_interrupt_stack_SIZEOF+0x12c>)
     8c0:	4a23      	ldr	r2, [pc, #140]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8c2:	4821      	ldr	r0, [pc, #132]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     8c4:	f44f 73b2 	mov.w	r3, #356	; 0x164
     8c8:	f006 fbe7 	bl	709a <assert_print>
     8cc:	f44f 71b2 	mov.w	r1, #356	; 0x164
     8d0:	e770      	b.n	7b4 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
     8d2:	6823      	ldr	r3, [r4, #0]
     8d4:	b94b      	cbnz	r3, 8ea <__z_interrupt_stack_SIZEOF+0xaa>
     8d6:	4920      	ldr	r1, [pc, #128]	; (958 <__z_interrupt_stack_SIZEOF+0x118>)
     8d8:	4a1d      	ldr	r2, [pc, #116]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8da:	481b      	ldr	r0, [pc, #108]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     8dc:	f240 1365 	movw	r3, #357	; 0x165
     8e0:	f006 fbdb 	bl	709a <assert_print>
     8e4:	f240 1165 	movw	r1, #357	; 0x165
     8e8:	e764      	b.n	7b4 <process_event+0x128>
			transit = mgr->transitions->reset;
     8ea:	6923      	ldr	r3, [r4, #16]
     8ec:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
     8ee:	b94e      	cbnz	r6, 904 <__z_interrupt_stack_SIZEOF+0xc4>
     8f0:	491a      	ldr	r1, [pc, #104]	; (95c <__z_interrupt_stack_SIZEOF+0x11c>)
     8f2:	4a17      	ldr	r2, [pc, #92]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     8f4:	4814      	ldr	r0, [pc, #80]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     8f6:	f44f 73b4 	mov.w	r3, #360	; 0x168
     8fa:	f006 fbce 	bl	709a <assert_print>
     8fe:	f44f 71b4 	mov.w	r1, #360	; 0x168
     902:	e757      	b.n	7b4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     904:	8ba3      	ldrh	r3, [r4, #28]
     906:	f023 0307 	bic.w	r3, r3, #7
     90a:	f043 0305 	orr.w	r3, r3, #5
     90e:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
     910:	2700      	movs	r7, #0
     912:	83a3      	strh	r3, [r4, #28]
		res = 0;
     914:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     916:	f04f 0905 	mov.w	r9, #5
     91a:	e77d      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
			__ASSERT_NO_MSG(false);
     91c:	490b      	ldr	r1, [pc, #44]	; (94c <__z_interrupt_stack_SIZEOF+0x10c>)
     91e:	4a0c      	ldr	r2, [pc, #48]	; (950 <__z_interrupt_stack_SIZEOF+0x110>)
     920:	4809      	ldr	r0, [pc, #36]	; (948 <__z_interrupt_stack_SIZEOF+0x108>)
     922:	f240 136b 	movw	r3, #363	; 0x16b
     926:	f006 fbb8 	bl	709a <assert_print>
     92a:	f240 116b 	movw	r1, #363	; 0x16b
     92e:	e741      	b.n	7b4 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
     930:	2700      	movs	r7, #0
     932:	2600      	movs	r6, #0
     934:	e770      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     936:	f04f 0a01 	mov.w	sl, #1
     93a:	e777      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     93c:	4692      	mov	sl, r2
     93e:	e775      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     940:	000080e5 	.word	0x000080e5
     944:	000080b8 	.word	0x000080b8
     948:	00007ea3 	.word	0x00007ea3
     94c:	000080a0 	.word	0x000080a0
     950:	00008015 	.word	0x00008015
     954:	00008037 	.word	0x00008037
     958:	00008043 	.word	0x00008043
     95c:	00008066 	.word	0x00008066
     960:	000080fc 	.word	0x000080fc
     964:	0000807d 	.word	0x0000807d
     968:	00008093 	.word	0x00008093
     96c:	000080a2 	.word	0x000080a2
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     970:	f385 8811 	msr	BASEPRI, r5
     974:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     978:	f1ba 0f00 	cmp.w	sl, #0
     97c:	d11e      	bne.n	9bc <__z_interrupt_stack_SIZEOF+0x17c>
	while (!sys_slist_is_empty(list)) {
     97e:	2f00      	cmp	r7, #0
     980:	d12f      	bne.n	9e2 <__z_interrupt_stack_SIZEOF+0x1a2>
			if (transit != NULL) {
     982:	b116      	cbz	r6, 98a <__z_interrupt_stack_SIZEOF+0x14a>
				transit(mgr, transition_complete);
     984:	4926      	ldr	r1, [pc, #152]	; (a20 <__z_interrupt_stack_SIZEOF+0x1e0>)
     986:	4620      	mov	r0, r4
     988:	47b0      	blx	r6
	__asm__ volatile(
     98a:	f04f 0320 	mov.w	r3, #32
     98e:	f3ef 8511 	mrs	r5, BASEPRI
     992:	f383 8812 	msr	BASEPRI_MAX, r3
     996:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     99a:	4658      	mov	r0, fp
     99c:	f004 fa56 	bl	4e4c <z_spin_lock_valid>
     9a0:	bb38      	cbnz	r0, 9f2 <__z_interrupt_stack_SIZEOF+0x1b2>
     9a2:	4a20      	ldr	r2, [pc, #128]	; (a24 <__z_interrupt_stack_SIZEOF+0x1e4>)
     9a4:	4920      	ldr	r1, [pc, #128]	; (a28 <__z_interrupt_stack_SIZEOF+0x1e8>)
     9a6:	4821      	ldr	r0, [pc, #132]	; (a2c <__z_interrupt_stack_SIZEOF+0x1ec>)
     9a8:	2394      	movs	r3, #148	; 0x94
     9aa:	f006 fb76 	bl	709a <assert_print>
     9ae:	4659      	mov	r1, fp
     9b0:	481f      	ldr	r0, [pc, #124]	; (a30 <__z_interrupt_stack_SIZEOF+0x1f0>)
     9b2:	f006 fb72 	bl	709a <assert_print>
     9b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     9b8:	481a      	ldr	r0, [pc, #104]	; (a24 <__z_interrupt_stack_SIZEOF+0x1e4>)
     9ba:	e6fc      	b.n	7b6 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     9bc:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     9be:	2900      	cmp	r1, #0
     9c0:	d0dd      	beq.n	97e <__z_interrupt_stack_SIZEOF+0x13e>
	return node->next;
     9c2:	680d      	ldr	r5, [r1, #0]
     9c4:	2900      	cmp	r1, #0
     9c6:	d0da      	beq.n	97e <__z_interrupt_stack_SIZEOF+0x13e>
		mon->callback(mgr, mon, state, res);
     9c8:	f8d1 a004 	ldr.w	sl, [r1, #4]
     9cc:	4643      	mov	r3, r8
     9ce:	464a      	mov	r2, r9
     9d0:	4620      	mov	r0, r4
     9d2:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     9d4:	b11d      	cbz	r5, 9de <__z_interrupt_stack_SIZEOF+0x19e>
     9d6:	682b      	ldr	r3, [r5, #0]
     9d8:	4629      	mov	r1, r5
     9da:	461d      	mov	r5, r3
     9dc:	e7f2      	b.n	9c4 <__z_interrupt_stack_SIZEOF+0x184>
     9de:	462b      	mov	r3, r5
     9e0:	e7fa      	b.n	9d8 <__z_interrupt_stack_SIZEOF+0x198>
     9e2:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
     9e4:	4643      	mov	r3, r8
     9e6:	464a      	mov	r2, r9
     9e8:	4620      	mov	r0, r4
     9ea:	683f      	ldr	r7, [r7, #0]
     9ec:	f006 fab7 	bl	6f5e <notify_one>
     9f0:	e7c5      	b.n	97e <__z_interrupt_stack_SIZEOF+0x13e>
	z_spin_lock_set_owner(l);
     9f2:	4658      	mov	r0, fp
     9f4:	f004 fa48 	bl	4e88 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     9f8:	8ba3      	ldrh	r3, [r4, #28]
     9fa:	f023 0308 	bic.w	r3, r3, #8
     9fe:	83a3      	strh	r3, [r4, #28]
     a00:	e6ac      	b.n	75c <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a02:	068b      	lsls	r3, r1, #26
     a04:	f57f ae64 	bpl.w	6d0 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a08:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a0c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
     a0e:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
     a12:	e647      	b.n	6a4 <process_event+0x18>
	__asm__ volatile(
     a14:	f385 8811 	msr	BASEPRI, r5
     a18:	f3bf 8f6f 	isb	sy
}
     a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     a20:	00000a35 	.word	0x00000a35
     a24:	000080b8 	.word	0x000080b8
     a28:	00008111 	.word	0x00008111
     a2c:	00007ea3 	.word	0x00007ea3
     a30:	00008126 	.word	0x00008126

00000a34 <transition_complete>:
{
     a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a36:	4604      	mov	r4, r0
     a38:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     a3a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
     a3e:	f04f 0320 	mov.w	r3, #32
     a42:	f3ef 8711 	mrs	r7, BASEPRI
     a46:	f383 8812 	msr	BASEPRI_MAX, r3
     a4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     a4e:	4630      	mov	r0, r6
     a50:	f004 f9fc 	bl	4e4c <z_spin_lock_valid>
     a54:	b968      	cbnz	r0, a72 <transition_complete+0x3e>
     a56:	4a0c      	ldr	r2, [pc, #48]	; (a88 <transition_complete+0x54>)
     a58:	490c      	ldr	r1, [pc, #48]	; (a8c <transition_complete+0x58>)
     a5a:	480d      	ldr	r0, [pc, #52]	; (a90 <transition_complete+0x5c>)
     a5c:	2394      	movs	r3, #148	; 0x94
     a5e:	f006 fb1c 	bl	709a <assert_print>
     a62:	480c      	ldr	r0, [pc, #48]	; (a94 <transition_complete+0x60>)
     a64:	4631      	mov	r1, r6
     a66:	f006 fb18 	bl	709a <assert_print>
     a6a:	4807      	ldr	r0, [pc, #28]	; (a88 <transition_complete+0x54>)
     a6c:	2194      	movs	r1, #148	; 0x94
     a6e:	f006 fb0d 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
     a72:	4630      	mov	r0, r6
     a74:	f004 fa08 	bl	4e88 <z_spin_lock_set_owner>
	mgr->last_res = res;
     a78:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
     a7a:	463a      	mov	r2, r7
     a7c:	4620      	mov	r0, r4
     a7e:	2101      	movs	r1, #1
}
     a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
     a84:	f7ff be02 	b.w	68c <process_event>
     a88:	000080b8 	.word	0x000080b8
     a8c:	00008111 	.word	0x00008111
     a90:	00007ea3 	.word	0x00007ea3
     a94:	00008126 	.word	0x00008126

00000a98 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
     a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     a9c:	4604      	mov	r4, r0
     a9e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
     aa0:	f006 fa4d 	bl	6f3e <validate_args>

	if (rv < 0) {
     aa4:	1e05      	subs	r5, r0, #0
     aa6:	db67      	blt.n	b78 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
     aa8:	f104 0914 	add.w	r9, r4, #20
     aac:	f04f 0320 	mov.w	r3, #32
     ab0:	f3ef 8a11 	mrs	sl, BASEPRI
     ab4:	f383 8812 	msr	BASEPRI_MAX, r3
     ab8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
     abc:	4648      	mov	r0, r9
     abe:	f004 f9c5 	bl	4e4c <z_spin_lock_valid>
     ac2:	4680      	mov	r8, r0
     ac4:	b960      	cbnz	r0, ae0 <onoff_request+0x48>
     ac6:	4a38      	ldr	r2, [pc, #224]	; (ba8 <onoff_request+0x110>)
     ac8:	4938      	ldr	r1, [pc, #224]	; (bac <onoff_request+0x114>)
     aca:	4839      	ldr	r0, [pc, #228]	; (bb0 <onoff_request+0x118>)
     acc:	2394      	movs	r3, #148	; 0x94
     ace:	f006 fae4 	bl	709a <assert_print>
     ad2:	4649      	mov	r1, r9
     ad4:	4837      	ldr	r0, [pc, #220]	; (bb4 <onoff_request+0x11c>)
     ad6:	f006 fae0 	bl	709a <assert_print>
     ada:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     adc:	4832      	ldr	r0, [pc, #200]	; (ba8 <onoff_request+0x110>)
     ade:	e040      	b.n	b62 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
     ae0:	4648      	mov	r0, r9
     ae2:	f004 f9d1 	bl	4e88 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
     ae6:	8be3      	ldrh	r3, [r4, #30]
     ae8:	8ba6      	ldrh	r6, [r4, #28]
     aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
     aee:	4293      	cmp	r3, r2
     af0:	f006 0607 	and.w	r6, r6, #7
     af4:	d043      	beq.n	b7e <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
     af6:	2e02      	cmp	r6, #2
     af8:	d113      	bne.n	b22 <onoff_request+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
     afa:	3301      	adds	r3, #1
     afc:	83e3      	strh	r3, [r4, #30]
	rv = state;
     afe:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
     b00:	4648      	mov	r0, r9
     b02:	f004 f9b1 	bl	4e68 <z_spin_unlock_valid>
     b06:	2800      	cmp	r0, #0
     b08:	d13f      	bne.n	b8a <onoff_request+0xf2>
     b0a:	4a27      	ldr	r2, [pc, #156]	; (ba8 <onoff_request+0x110>)
     b0c:	492a      	ldr	r1, [pc, #168]	; (bb8 <onoff_request+0x120>)
     b0e:	4828      	ldr	r0, [pc, #160]	; (bb0 <onoff_request+0x118>)
     b10:	23c2      	movs	r3, #194	; 0xc2
     b12:	f006 fac2 	bl	709a <assert_print>
     b16:	4649      	mov	r1, r9
     b18:	4828      	ldr	r0, [pc, #160]	; (bbc <onoff_request+0x124>)
     b1a:	f006 fabe 	bl	709a <assert_print>
     b1e:	21c2      	movs	r1, #194	; 0xc2
     b20:	e7dc      	b.n	adc <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
     b22:	2e06      	cmp	r6, #6
     b24:	d813      	bhi.n	b4e <onoff_request+0xb6>
     b26:	e8df f006 	tbb	[pc, r6]
     b2a:	2d09      	.short	0x2d09
     b2c:	04091212 	.word	0x04091212
     b30:	09          	.byte	0x09
     b31:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
     b32:	f06f 0585 	mvn.w	r5, #133	; 0x85
     b36:	f04f 0800 	mov.w	r8, #0
     b3a:	e7e1      	b.n	b00 <onoff_request+0x68>
	parent->next = child;
     b3c:	2300      	movs	r3, #0
     b3e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
     b40:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
     b42:	b983      	cbnz	r3, b66 <onoff_request+0xce>
	list->head = node;
     b44:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
     b48:	b186      	cbz	r6, b6c <onoff_request+0xd4>
	rv = state;
     b4a:	4635      	mov	r5, r6
     b4c:	e7f3      	b.n	b36 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
     b4e:	491c      	ldr	r1, [pc, #112]	; (bc0 <onoff_request+0x128>)
     b50:	4817      	ldr	r0, [pc, #92]	; (bb0 <onoff_request+0x118>)
     b52:	4a1c      	ldr	r2, [pc, #112]	; (bc4 <onoff_request+0x12c>)
     b54:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
     b58:	f006 fa9f 	bl	709a <assert_print>
     b5c:	4819      	ldr	r0, [pc, #100]	; (bc4 <onoff_request+0x12c>)
     b5e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
     b62:	f006 fa93 	bl	708c <assert_post_action>
	parent->next = child;
     b66:	601f      	str	r7, [r3, #0]
	list->tail = node;
     b68:	6067      	str	r7, [r4, #4]
}
     b6a:	e7ed      	b.n	b48 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
     b6c:	4652      	mov	r2, sl
     b6e:	2102      	movs	r1, #2
     b70:	4620      	mov	r0, r4
     b72:	f7ff fd8b 	bl	68c <process_event>
     b76:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
     b78:	4628      	mov	r0, r5
     b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
     b7e:	f06f 050a 	mvn.w	r5, #10
     b82:	e7d8      	b.n	b36 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
     b84:	f06f 0504 	mvn.w	r5, #4
     b88:	e7d5      	b.n	b36 <onoff_request+0x9e>
	__asm__ volatile(
     b8a:	f38a 8811 	msr	BASEPRI, sl
     b8e:	f3bf 8f6f 	isb	sy
		if (notify) {
     b92:	f1b8 0f00 	cmp.w	r8, #0
     b96:	d0ef      	beq.n	b78 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
     b98:	2300      	movs	r3, #0
     b9a:	4632      	mov	r2, r6
     b9c:	4639      	mov	r1, r7
     b9e:	4620      	mov	r0, r4
     ba0:	f006 f9dd 	bl	6f5e <notify_one>
     ba4:	e7e8      	b.n	b78 <onoff_request+0xe0>
     ba6:	bf00      	nop
     ba8:	000080b8 	.word	0x000080b8
     bac:	00008111 	.word	0x00008111
     bb0:	00007ea3 	.word	0x00007ea3
     bb4:	00008126 	.word	0x00008126
     bb8:	000080e5 	.word	0x000080e5
     bbc:	000080fc 	.word	0x000080fc
     bc0:	000080a2 	.word	0x000080a2
     bc4:	00008015 	.word	0x00008015

00000bc8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
     bc8:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     bca:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
     bcc:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
     bce:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
     bd2:	2a03      	cmp	r2, #3
{
     bd4:	4603      	mov	r3, r0
	switch (method) {
     bd6:	d002      	beq.n	bde <sys_notify_finalize+0x16>
     bd8:	b12a      	cbz	r2, be6 <sys_notify_finalize+0x1e>
     bda:	2000      	movs	r0, #0
     bdc:	e000      	b.n	be0 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
     bde:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
     be0:	2200      	movs	r2, #0
     be2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
     be4:	bd08      	pop	{r3, pc}
		__ASSERT_NO_MSG(false);
     be6:	4905      	ldr	r1, [pc, #20]	; (bfc <sys_notify_finalize+0x34>)
     be8:	4805      	ldr	r0, [pc, #20]	; (c00 <sys_notify_finalize+0x38>)
     bea:	4a06      	ldr	r2, [pc, #24]	; (c04 <sys_notify_finalize+0x3c>)
     bec:	2345      	movs	r3, #69	; 0x45
     bee:	f006 fa54 	bl	709a <assert_print>
     bf2:	4804      	ldr	r0, [pc, #16]	; (c04 <sys_notify_finalize+0x3c>)
     bf4:	2145      	movs	r1, #69	; 0x45
     bf6:	f006 fa49 	bl	708c <assert_post_action>
     bfa:	bf00      	nop
     bfc:	000080a0 	.word	0x000080a0
     c00:	00007ea3 	.word	0x00007ea3
     c04:	0000813e 	.word	0x0000813e

00000c08 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c0c:	4681      	mov	r9, r0
     c0e:	b095      	sub	sp, #84	; 0x54
     c10:	468b      	mov	fp, r1
     c12:	4617      	mov	r7, r2
     c14:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     c16:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     c18:	7838      	ldrb	r0, [r7, #0]
     c1a:	b908      	cbnz	r0, c20 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     c1c:	4628      	mov	r0, r5
     c1e:	e358      	b.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
			OUTC(*fp++);
     c20:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     c22:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     c24:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     c26:	d006      	beq.n	c36 <z_cbvprintf_impl+0x2e>
			OUTC('%');
     c28:	4659      	mov	r1, fp
     c2a:	47c8      	blx	r9
     c2c:	2800      	cmp	r0, #0
     c2e:	f2c0 8350 	blt.w	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
     c32:	3501      	adds	r5, #1
		if (bps == NULL) {
     c34:	e1fb      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		} state = {
     c36:	2218      	movs	r2, #24
     c38:	2100      	movs	r1, #0
     c3a:	a80e      	add	r0, sp, #56	; 0x38
     c3c:	f006 fa75 	bl	712a <memset>
	if (*sp == '%') {
     c40:	787b      	ldrb	r3, [r7, #1]
     c42:	2b25      	cmp	r3, #37	; 0x25
     c44:	d07d      	beq.n	d42 <z_cbvprintf_impl+0x13a>
     c46:	2300      	movs	r3, #0
     c48:	1c78      	adds	r0, r7, #1
     c4a:	4698      	mov	r8, r3
     c4c:	469e      	mov	lr, r3
     c4e:	469c      	mov	ip, r3
     c50:	461e      	mov	r6, r3
     c52:	4601      	mov	r1, r0
		switch (*sp) {
     c54:	f810 2b01 	ldrb.w	r2, [r0], #1
     c58:	2a2b      	cmp	r2, #43	; 0x2b
     c5a:	f000 80a1 	beq.w	da0 <z_cbvprintf_impl+0x198>
     c5e:	f200 8098 	bhi.w	d92 <z_cbvprintf_impl+0x18a>
     c62:	2a20      	cmp	r2, #32
     c64:	f000 809f 	beq.w	da6 <z_cbvprintf_impl+0x19e>
     c68:	2a23      	cmp	r2, #35	; 0x23
     c6a:	f000 809f 	beq.w	dac <z_cbvprintf_impl+0x1a4>
     c6e:	b12b      	cbz	r3, c7c <z_cbvprintf_impl+0x74>
     c70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c78:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     c7c:	f1b8 0f00 	cmp.w	r8, #0
     c80:	d005      	beq.n	c8e <z_cbvprintf_impl+0x86>
     c82:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     c86:	f043 0320 	orr.w	r3, r3, #32
     c8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     c8e:	f1be 0f00 	cmp.w	lr, #0
     c92:	d005      	beq.n	ca0 <z_cbvprintf_impl+0x98>
     c94:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     c98:	f043 0310 	orr.w	r3, r3, #16
     c9c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     ca0:	f1bc 0f00 	cmp.w	ip, #0
     ca4:	d005      	beq.n	cb2 <z_cbvprintf_impl+0xaa>
     ca6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     caa:	f043 0308 	orr.w	r3, r3, #8
     cae:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     cb2:	b12e      	cbz	r6, cc0 <z_cbvprintf_impl+0xb8>
     cb4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     cb8:	f043 0304 	orr.w	r3, r3, #4
     cbc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     cc0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     cc4:	f003 0044 	and.w	r0, r3, #68	; 0x44
     cc8:	2844      	cmp	r0, #68	; 0x44
     cca:	d103      	bne.n	cd4 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     ccc:	f36f 1386 	bfc	r3, #6, #1
     cd0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     cd4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     cd8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     cde:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     ce2:	d17f      	bne.n	de4 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
     ce4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ce8:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     cec:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     cee:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     cf2:	781a      	ldrb	r2, [r3, #0]
     cf4:	2a2e      	cmp	r2, #46	; 0x2e
     cf6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     cfa:	bf0c      	ite	eq
     cfc:	2101      	moveq	r1, #1
     cfe:	2100      	movne	r1, #0
     d00:	f361 0241 	bfi	r2, r1, #1, #1
     d04:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     d08:	d178      	bne.n	dfc <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
     d0a:	785a      	ldrb	r2, [r3, #1]
     d0c:	2a2a      	cmp	r2, #42	; 0x2a
     d0e:	d06e      	beq.n	dee <z_cbvprintf_impl+0x1e6>
	++sp;
     d10:	3301      	adds	r3, #1
	size_t val = 0;
     d12:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     d14:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     d18:	4619      	mov	r1, r3
     d1a:	f811 0b01 	ldrb.w	r0, [r1], #1
     d1e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     d22:	2e09      	cmp	r6, #9
     d24:	f240 8095 	bls.w	e52 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
     d28:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     d2c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     d2e:	f3c1 0040 	ubfx	r0, r1, #1, #1
     d32:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     d36:	460a      	mov	r2, r1
     d38:	f360 0241 	bfi	r2, r0, #1, #1
     d3c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     d40:	e05c      	b.n	dfc <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
     d42:	1cba      	adds	r2, r7, #2
     d44:	9203      	str	r2, [sp, #12]
     d46:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     d4a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     d4e:	07da      	lsls	r2, r3, #31
     d50:	f140 812e 	bpl.w	fb0 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
     d54:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     d58:	f1b8 0f00 	cmp.w	r8, #0
     d5c:	da07      	bge.n	d6e <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
     d5e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     d62:	f042 0204 	orr.w	r2, r2, #4
     d66:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
     d6a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
     d6e:	075e      	lsls	r6, r3, #29
     d70:	f140 8127 	bpl.w	fc2 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
     d74:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     d78:	f1ba 0f00 	cmp.w	sl, #0
     d7c:	f280 8126 	bge.w	fcc <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
     d80:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     d84:	f36f 0341 	bfc	r3, #1, #1
     d88:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     d8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     d90:	e11c      	b.n	fcc <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
     d92:	2a2d      	cmp	r2, #45	; 0x2d
     d94:	d00d      	beq.n	db2 <z_cbvprintf_impl+0x1aa>
     d96:	2a30      	cmp	r2, #48	; 0x30
     d98:	f47f af69 	bne.w	c6e <z_cbvprintf_impl+0x66>
     d9c:	2301      	movs	r3, #1
	} while (loop);
     d9e:	e758      	b.n	c52 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     da0:	f04f 0c01 	mov.w	ip, #1
     da4:	e755      	b.n	c52 <z_cbvprintf_impl+0x4a>
     da6:	f04f 0e01 	mov.w	lr, #1
     daa:	e752      	b.n	c52 <z_cbvprintf_impl+0x4a>
     dac:	f04f 0801 	mov.w	r8, #1
     db0:	e74f      	b.n	c52 <z_cbvprintf_impl+0x4a>
     db2:	2601      	movs	r6, #1
     db4:	e74d      	b.n	c52 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     db6:	fb0e 6202 	mla	r2, lr, r2, r6
     dba:	3a30      	subs	r2, #48	; 0x30
     dbc:	4603      	mov	r3, r0
     dbe:	4618      	mov	r0, r3
     dc0:	f810 6b01 	ldrb.w	r6, [r0], #1
     dc4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     dc8:	f1bc 0f09 	cmp.w	ip, #9
     dcc:	d9f3      	bls.n	db6 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
     dce:	4299      	cmp	r1, r3
     dd0:	d08f      	beq.n	cf2 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     dd2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     dd6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     dd8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     dda:	f362 0141 	bfi	r1, r2, #1, #1
     dde:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     de2:	e786      	b.n	cf2 <z_cbvprintf_impl+0xea>
     de4:	460b      	mov	r3, r1
	size_t val = 0;
     de6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     de8:	f04f 0e0a 	mov.w	lr, #10
     dec:	e7e7      	b.n	dbe <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
     dee:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     df2:	f042 0204 	orr.w	r2, r2, #4
     df6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     dfa:	3302      	adds	r3, #2
	switch (*sp) {
     dfc:	781a      	ldrb	r2, [r3, #0]
     dfe:	2a6c      	cmp	r2, #108	; 0x6c
     e00:	d047      	beq.n	e92 <z_cbvprintf_impl+0x28a>
     e02:	d82b      	bhi.n	e5c <z_cbvprintf_impl+0x254>
     e04:	2a68      	cmp	r2, #104	; 0x68
     e06:	d031      	beq.n	e6c <z_cbvprintf_impl+0x264>
     e08:	2a6a      	cmp	r2, #106	; 0x6a
     e0a:	d04b      	beq.n	ea4 <z_cbvprintf_impl+0x29c>
     e0c:	2a4c      	cmp	r2, #76	; 0x4c
     e0e:	d051      	beq.n	eb4 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
     e10:	461a      	mov	r2, r3
     e12:	f812 3b01 	ldrb.w	r3, [r2], #1
     e16:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
     e18:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
     e1a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
     e1e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
     e22:	f200 80be 	bhi.w	fa2 <z_cbvprintf_impl+0x39a>
     e26:	2b6d      	cmp	r3, #109	; 0x6d
     e28:	d851      	bhi.n	ece <z_cbvprintf_impl+0x2c6>
     e2a:	2b69      	cmp	r3, #105	; 0x69
     e2c:	f200 80b9 	bhi.w	fa2 <z_cbvprintf_impl+0x39a>
     e30:	2b57      	cmp	r3, #87	; 0x57
     e32:	d867      	bhi.n	f04 <z_cbvprintf_impl+0x2fc>
     e34:	2b41      	cmp	r3, #65	; 0x41
     e36:	d003      	beq.n	e40 <z_cbvprintf_impl+0x238>
     e38:	3b45      	subs	r3, #69	; 0x45
     e3a:	2b02      	cmp	r3, #2
     e3c:	f200 80b1 	bhi.w	fa2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
     e40:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     e44:	2204      	movs	r2, #4
     e46:	f362 0302 	bfi	r3, r2, #0, #3
     e4a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     e4e:	2301      	movs	r3, #1
			break;
     e50:	e073      	b.n	f3a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
     e52:	fb0c 0202 	mla	r2, ip, r2, r0
     e56:	3a30      	subs	r2, #48	; 0x30
     e58:	460b      	mov	r3, r1
     e5a:	e75d      	b.n	d18 <z_cbvprintf_impl+0x110>
	switch (*sp) {
     e5c:	2a74      	cmp	r2, #116	; 0x74
     e5e:	d025      	beq.n	eac <z_cbvprintf_impl+0x2a4>
     e60:	2a7a      	cmp	r2, #122	; 0x7a
     e62:	d1d5      	bne.n	e10 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
     e64:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     e68:	2106      	movs	r1, #6
     e6a:	e00c      	b.n	e86 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
     e6c:	785a      	ldrb	r2, [r3, #1]
     e6e:	2a68      	cmp	r2, #104	; 0x68
     e70:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     e74:	d106      	bne.n	e84 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
     e76:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     e78:	f361 02c6 	bfi	r2, r1, #3, #4
     e7c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     e80:	3302      	adds	r3, #2
     e82:	e7c5      	b.n	e10 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
     e84:	2102      	movs	r1, #2
     e86:	f361 02c6 	bfi	r2, r1, #3, #4
     e8a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     e8e:	3301      	adds	r3, #1
     e90:	e7be      	b.n	e10 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
     e92:	785a      	ldrb	r2, [r3, #1]
     e94:	2a6c      	cmp	r2, #108	; 0x6c
     e96:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     e9a:	d101      	bne.n	ea0 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
     e9c:	2104      	movs	r1, #4
     e9e:	e7eb      	b.n	e78 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
     ea0:	2103      	movs	r1, #3
     ea2:	e7f0      	b.n	e86 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
     ea4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     ea8:	2105      	movs	r1, #5
     eaa:	e7ec      	b.n	e86 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
     eac:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     eb0:	2107      	movs	r1, #7
     eb2:	e7e8      	b.n	e86 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
     eb4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     eb8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     ebc:	f022 0202 	bic.w	r2, r2, #2
     ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     ec4:	f042 0202 	orr.w	r2, r2, #2
     ec8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     ecc:	e7df      	b.n	e8e <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
     ece:	3b6e      	subs	r3, #110	; 0x6e
     ed0:	b2d9      	uxtb	r1, r3
     ed2:	2301      	movs	r3, #1
     ed4:	408b      	lsls	r3, r1
     ed6:	f240 4182 	movw	r1, #1154	; 0x482
     eda:	420b      	tst	r3, r1
     edc:	d137      	bne.n	f4e <z_cbvprintf_impl+0x346>
     ede:	f013 0f24 	tst.w	r3, #36	; 0x24
     ee2:	d151      	bne.n	f88 <z_cbvprintf_impl+0x380>
     ee4:	07d8      	lsls	r0, r3, #31
     ee6:	d55c      	bpl.n	fa2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
     ee8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     eec:	2103      	movs	r1, #3
     eee:	f361 0302 	bfi	r3, r1, #0, #3
     ef2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     ef6:	f002 0378 	and.w	r3, r2, #120	; 0x78
     efa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     efe:	424b      	negs	r3, r1
     f00:	414b      	adcs	r3, r1
     f02:	e01a      	b.n	f3a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
     f04:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     f08:	b2c9      	uxtb	r1, r1
     f0a:	2001      	movs	r0, #1
     f0c:	fa00 f101 	lsl.w	r1, r0, r1
     f10:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     f14:	d194      	bne.n	e40 <z_cbvprintf_impl+0x238>
     f16:	f640 0601 	movw	r6, #2049	; 0x801
     f1a:	4231      	tst	r1, r6
     f1c:	d11d      	bne.n	f5a <z_cbvprintf_impl+0x352>
     f1e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     f22:	d03e      	beq.n	fa2 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
     f24:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     f28:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     f2c:	f002 0278 	and.w	r2, r2, #120	; 0x78
     f30:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     f32:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     f36:	d034      	beq.n	fa2 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
     f38:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     f3a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     f3e:	f3c2 0140 	ubfx	r1, r2, #1, #1
     f42:	430b      	orrs	r3, r1
     f44:	f363 0241 	bfi	r2, r3, #1, #1
     f48:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     f4c:	e6fd      	b.n	d4a <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
     f4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     f52:	2102      	movs	r1, #2
     f54:	f361 0302 	bfi	r3, r1, #0, #3
     f58:	e7e8      	b.n	f2c <z_cbvprintf_impl+0x324>
     f5a:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
     f5e:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     f60:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     f64:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     f68:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     f6a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     f6e:	bf02      	ittt	eq
     f70:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     f74:	f041 0101 	orreq.w	r1, r1, #1
     f78:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     f7c:	2b63      	cmp	r3, #99	; 0x63
     f7e:	d1db      	bne.n	f38 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
     f80:	1e13      	subs	r3, r2, #0
     f82:	bf18      	it	ne
     f84:	2301      	movne	r3, #1
     f86:	e7d8      	b.n	f3a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
     f88:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     f8c:	2103      	movs	r1, #3
     f8e:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     f92:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     f96:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     f9a:	bf14      	ite	ne
     f9c:	2301      	movne	r3, #1
     f9e:	2300      	moveq	r3, #0
     fa0:	e7cb      	b.n	f3a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
     fa2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     fa6:	f043 0301 	orr.w	r3, r3, #1
     faa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     fae:	e7c3      	b.n	f38 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
     fb0:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     fb4:	2a00      	cmp	r2, #0
			width = conv->width_value;
     fb6:	bfb4      	ite	lt
     fb8:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
     fbc:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
     fc0:	e6d5      	b.n	d6e <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
     fc2:	0798      	lsls	r0, r3, #30
     fc4:	f57f aee2 	bpl.w	d8c <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
     fc8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
     fcc:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
     fd0:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     fd2:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     fd6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
     fda:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     fde:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     fe0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     fe4:	d133      	bne.n	104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
			switch (length_mod) {
     fe6:	1ecb      	subs	r3, r1, #3
     fe8:	2b04      	cmp	r3, #4
     fea:	d804      	bhi.n	ff6 <z_cbvprintf_impl+0x3ee>
     fec:	e8df f003 	tbb	[pc, r3]
     ff0:	21464621 	.word	0x21464621
     ff4:	21          	.byte	0x21
     ff5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     ff6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     ff8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     ffa:	ea4f 72e3 	mov.w	r2, r3, asr #31
     ffe:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1002:	d11c      	bne.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
				value->sint = (signed char)value->sint;
    1004:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1008:	17da      	asrs	r2, r3, #31
    100a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    100e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1010:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1014:	f013 0603 	ands.w	r6, r3, #3
    1018:	d050      	beq.n	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
			OUTS(sp, fp);
    101a:	9b03      	ldr	r3, [sp, #12]
    101c:	463a      	mov	r2, r7
    101e:	4659      	mov	r1, fp
    1020:	4648      	mov	r0, r9
    1022:	f006 f81c 	bl	705e <outs>
    1026:	2800      	cmp	r0, #0
    1028:	f2c0 8153 	blt.w	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    102c:	4405      	add	r5, r0
			continue;
    102e:	9f03      	ldr	r7, [sp, #12]
    1030:	e5f2      	b.n	c18 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1032:	f854 3b04 	ldr.w	r3, [r4], #4
    1036:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1038:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    103c:	e7e8      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
			} else if (length_mod == LENGTH_H) {
    103e:	2902      	cmp	r1, #2
    1040:	d1e5      	bne.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
				value->sint = (short)value->sint;
    1042:	b21a      	sxth	r2, r3
    1044:	f343 33c0 	sbfx	r3, r3, #15, #1
    1048:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    104c:	e7df      	b.n	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
		} else if (specifier_cat == SPECIFIER_UINT) {
    104e:	2b02      	cmp	r3, #2
    1050:	d124      	bne.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
			switch (length_mod) {
    1052:	1ecb      	subs	r3, r1, #3
    1054:	2b04      	cmp	r3, #4
    1056:	d804      	bhi.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
    1058:	e8df f003 	tbb	[pc, r3]
    105c:	18101018 	.word	0x18101018
    1060:	18          	.byte	0x18
    1061:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1062:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1064:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1068:	f04f 0200 	mov.w	r2, #0
    106c:	d014      	beq.n	1098 <CONFIG_FPROTECT_BLOCK_SIZE+0x98>
			} else if (length_mod == LENGTH_H) {
    106e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1070:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1074:	d1cc      	bne.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
				value->uint = (unsigned short)value->uint;
    1076:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1078:	930e      	str	r3, [sp, #56]	; 0x38
    107a:	e7c9      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
					(uint_value_type)va_arg(ap,
    107c:	3407      	adds	r4, #7
    107e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1082:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1086:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    108a:	e7c1      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
					(uint_value_type)va_arg(ap, size_t);
    108c:	f854 3b04 	ldr.w	r3, [r4], #4
    1090:	930e      	str	r3, [sp, #56]	; 0x38
    1092:	2300      	movs	r3, #0
    1094:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1096:	e7bb      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
				value->uint = (unsigned char)value->uint;
    1098:	b2db      	uxtb	r3, r3
    109a:	e7cd      	b.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
		} else if (specifier_cat == SPECIFIER_FP) {
    109c:	2b04      	cmp	r3, #4
    109e:	d108      	bne.n	10b2 <CONFIG_FPROTECT_BLOCK_SIZE+0xb2>
					(sint_value_type)va_arg(ap, long long);
    10a0:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    10a2:	f024 0407 	bic.w	r4, r4, #7
    10a6:	e9d4 2300 	ldrd	r2, r3, [r4]
    10aa:	3408      	adds	r4, #8
    10ac:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    10b0:	e7ae      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
		} else if (specifier_cat == SPECIFIER_PTR) {
    10b2:	2b03      	cmp	r3, #3
    10b4:	d1ac      	bne.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
			value->ptr = va_arg(ap, void *);
    10b6:	f854 3b04 	ldr.w	r3, [r4], #4
    10ba:	e7dd      	b.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
		switch (conv->specifier) {
    10bc:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    10c0:	2878      	cmp	r0, #120	; 0x78
    10c2:	d8b4      	bhi.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    10c4:	2862      	cmp	r0, #98	; 0x62
    10c6:	d81c      	bhi.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
    10c8:	2825      	cmp	r0, #37	; 0x25
    10ca:	f43f adad 	beq.w	c28 <z_cbvprintf_impl+0x20>
    10ce:	2858      	cmp	r0, #88	; 0x58
    10d0:	d1ad      	bne.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
			bps = encode_uint(value->uint, conv, buf, bpe);
    10d2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    10d6:	9300      	str	r3, [sp, #0]
    10d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    10dc:	ab08      	add	r3, sp, #32
    10de:	aa10      	add	r2, sp, #64	; 0x40
    10e0:	f005 ff77 	bl	6fd2 <encode_uint>
			if (precision >= 0) {
    10e4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    10e8:	4607      	mov	r7, r0
			if (precision >= 0) {
    10ea:	f280 809a 	bge.w	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
		if (bps == NULL) {
    10ee:	2f00      	cmp	r7, #0
    10f0:	d09d      	beq.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		size_t nj_len = (bpe - bps);
    10f2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    10f6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    10f8:	2e00      	cmp	r6, #0
    10fa:	f000 80c1 	beq.w	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
			nj_len += 1U;
    10fe:	3001      	adds	r0, #1
    1100:	e0be      	b.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
		switch (conv->specifier) {
    1102:	3863      	subs	r0, #99	; 0x63
    1104:	2815      	cmp	r0, #21
    1106:	d892      	bhi.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    1108:	a201      	add	r2, pc, #4	; (adr r2, 1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    110a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    110e:	bf00      	nop
    1110:	000011e5 	.word	0x000011e5
    1114:	000011f7 	.word	0x000011f7
    1118:	0000102f 	.word	0x0000102f
    111c:	0000102f 	.word	0x0000102f
    1120:	0000102f 	.word	0x0000102f
    1124:	0000102f 	.word	0x0000102f
    1128:	000011f7 	.word	0x000011f7
    112c:	0000102f 	.word	0x0000102f
    1130:	0000102f 	.word	0x0000102f
    1134:	0000102f 	.word	0x0000102f
    1138:	0000102f 	.word	0x0000102f
    113c:	00001285 	.word	0x00001285
    1140:	0000121d 	.word	0x0000121d
    1144:	00001243 	.word	0x00001243
    1148:	0000102f 	.word	0x0000102f
    114c:	0000102f 	.word	0x0000102f
    1150:	00001169 	.word	0x00001169
    1154:	0000102f 	.word	0x0000102f
    1158:	0000121d 	.word	0x0000121d
    115c:	0000102f 	.word	0x0000102f
    1160:	0000102f 	.word	0x0000102f
    1164:	0000121d 	.word	0x0000121d
			if (precision >= 0) {
    1168:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    116c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    116e:	db35      	blt.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
				len = strnlen(bps, precision);
    1170:	4651      	mov	r1, sl
    1172:	4638      	mov	r0, r7
    1174:	f005 ffc5 	bl	7102 <strnlen>
			bpe = bps + len;
    1178:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    117c:	2f00      	cmp	r7, #0
    117e:	f43f af56 	beq.w	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		char sign = 0;
    1182:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1184:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1188:	f013 0210 	ands.w	r2, r3, #16
    118c:	9205      	str	r2, [sp, #20]
    118e:	f000 8093 	beq.w	12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
			nj_len += 2U;
    1192:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1194:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1196:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1198:	bf48      	it	mi
    119a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    119c:	9204      	str	r2, [sp, #16]
    119e:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    11a0:	bf48      	it	mi
    11a2:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    11a4:	f1b8 0f00 	cmp.w	r8, #0
    11a8:	f340 80a0 	ble.w	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
			if (!conv->flag_dash) {
    11ac:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    11b0:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    11b4:	f3c2 0380 	ubfx	r3, r2, #2, #1
    11b8:	0750      	lsls	r0, r2, #29
    11ba:	9306      	str	r3, [sp, #24]
    11bc:	f100 8096 	bmi.w	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
				if (conv->flag_zero) {
    11c0:	0651      	lsls	r1, r2, #25
    11c2:	f140 8089 	bpl.w	12d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d8>
					if (sign != 0) {
    11c6:	b13e      	cbz	r6, 11d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d8>
						OUTC(sign);
    11c8:	4659      	mov	r1, fp
    11ca:	4630      	mov	r0, r6
    11cc:	47c8      	blx	r9
    11ce:	2800      	cmp	r0, #0
    11d0:	db7f      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    11d2:	9b06      	ldr	r3, [sp, #24]
    11d4:	3501      	adds	r5, #1
    11d6:	461e      	mov	r6, r3
					pad = '0';
    11d8:	2230      	movs	r2, #48	; 0x30
    11da:	e07e      	b.n	12da <CONFIG_FPROTECT_BLOCK_SIZE+0x2da>
				len = strlen(bps);
    11dc:	4638      	mov	r0, r7
    11de:	f005 ff89 	bl	70f4 <strlen>
    11e2:	e7c9      	b.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    11e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    11e6:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    11ea:	2600      	movs	r6, #0
			bps = buf;
    11ec:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    11ee:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    11f2:	2001      	movs	r0, #1
    11f4:	e7c6      	b.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
			if (conv->flag_plus) {
    11f6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    11f8:	bf5c      	itt	pl
    11fa:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    11fe:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1200:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1204:	bf48      	it	mi
    1206:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1208:	2b00      	cmp	r3, #0
    120a:	f6bf af62 	bge.w	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
				value->uint = (uint_value_type)-sint;
    120e:	4252      	negs	r2, r2
    1210:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1214:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1218:	262d      	movs	r6, #45	; 0x2d
    121a:	e75a      	b.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
		switch (conv->specifier) {
    121c:	2600      	movs	r6, #0
    121e:	e758      	b.n	10d2 <CONFIG_FPROTECT_BLOCK_SIZE+0xd2>
		char sign = 0;
    1220:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1222:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1226:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    122a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    122c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1230:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1232:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1236:	f67f af5a 	bls.w	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
					conv->pad0_value = precision - (int)len;
    123a:	ebaa 0303 	sub.w	r3, sl, r3
    123e:	9311      	str	r3, [sp, #68]	; 0x44
    1240:	e755      	b.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
			if (value->ptr != NULL) {
    1242:	980e      	ldr	r0, [sp, #56]	; 0x38
    1244:	b390      	cbz	r0, 12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1246:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    124a:	9300      	str	r3, [sp, #0]
    124c:	aa10      	add	r2, sp, #64	; 0x40
    124e:	ab08      	add	r3, sp, #32
    1250:	2100      	movs	r1, #0
    1252:	f005 febe 	bl	6fd2 <encode_uint>
				conv->altform_0c = true;
    1256:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    125a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    125e:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1262:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1266:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    126a:	4607      	mov	r7, r0
				conv->altform_0c = true;
    126c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1270:	dad6      	bge.n	1220 <CONFIG_FPROTECT_BLOCK_SIZE+0x220>
		if (bps == NULL) {
    1272:	2800      	cmp	r0, #0
    1274:	f43f aedb 	beq.w	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		size_t nj_len = (bpe - bps);
    1278:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    127c:	1a18      	subs	r0, r3, r0
		char sign = 0;
    127e:	2600      	movs	r6, #0
    1280:	469a      	mov	sl, r3
    1282:	e77f      	b.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
				store_count(conv, value->ptr, count);
    1284:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1286:	2907      	cmp	r1, #7
    1288:	f63f aed1 	bhi.w	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    128c:	e8df f001 	tbb	[pc, r1]
    1290:	0c06040c 	.word	0x0c06040c
    1294:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1298:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    129a:	e6c8      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		*(short *)dp = (short)count;
    129c:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    129e:	e6c6      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		*(intmax_t *)dp = (intmax_t)count;
    12a0:	17ea      	asrs	r2, r5, #31
    12a2:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    12a6:	e6c2      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    12a8:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    12aa:	e6c0      	b.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    12ac:	4f2e      	ldr	r7, [pc, #184]	; (1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>)
		char sign = 0;
    12ae:	4606      	mov	r6, r0
			bpe = bps + 5;
    12b0:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    12b4:	2005      	movs	r0, #5
    12b6:	e765      	b.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
		} else if (conv->altform_0) {
    12b8:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    12ba:	bf48      	it	mi
    12bc:	3001      	addmi	r0, #1
    12be:	e769      	b.n	1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
    12c0:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    12c2:	4610      	mov	r0, r2
    12c4:	9206      	str	r2, [sp, #24]
    12c6:	4659      	mov	r1, fp
    12c8:	47c8      	blx	r9
    12ca:	2800      	cmp	r0, #0
    12cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    12d0:	da04      	bge.n	12dc <CONFIG_FPROTECT_BLOCK_SIZE+0x2dc>
#undef OUTS
#undef OUTC
}
    12d2:	b015      	add	sp, #84	; 0x54
    12d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    12d8:	2220      	movs	r2, #32
					pad = '0';
    12da:	4643      	mov	r3, r8
				while (width-- > 0) {
    12dc:	4619      	mov	r1, r3
    12de:	2900      	cmp	r1, #0
    12e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    12e4:	dcec      	bgt.n	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
    12e6:	4445      	add	r5, r8
    12e8:	1a6d      	subs	r5, r5, r1
    12ea:	4698      	mov	r8, r3
		if (sign != 0) {
    12ec:	b12e      	cbz	r6, 12fa <CONFIG_FPROTECT_BLOCK_SIZE+0x2fa>
			OUTC(sign);
    12ee:	4659      	mov	r1, fp
    12f0:	4630      	mov	r0, r6
    12f2:	47c8      	blx	r9
    12f4:	2800      	cmp	r0, #0
    12f6:	dbec      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    12f8:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    12fa:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    12fe:	06da      	lsls	r2, r3, #27
    1300:	d401      	bmi.n	1306 <CONFIG_FPROTECT_BLOCK_SIZE+0x306>
    1302:	071b      	lsls	r3, r3, #28
    1304:	d505      	bpl.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
				OUTC('0');
    1306:	4659      	mov	r1, fp
    1308:	2030      	movs	r0, #48	; 0x30
    130a:	47c8      	blx	r9
    130c:	2800      	cmp	r0, #0
    130e:	dbe0      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    1310:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1312:	9b05      	ldr	r3, [sp, #20]
    1314:	b133      	cbz	r3, 1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
				OUTC(conv->specifier);
    1316:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    131a:	4659      	mov	r1, fp
    131c:	47c8      	blx	r9
    131e:	2800      	cmp	r0, #0
    1320:	dbd7      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    1322:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1324:	9e04      	ldr	r6, [sp, #16]
    1326:	442e      	add	r6, r5
    1328:	e005      	b.n	1336 <CONFIG_FPROTECT_BLOCK_SIZE+0x336>
				OUTC('0');
    132a:	4659      	mov	r1, fp
    132c:	2030      	movs	r0, #48	; 0x30
    132e:	47c8      	blx	r9
    1330:	2800      	cmp	r0, #0
    1332:	dbce      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    1334:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1336:	1b73      	subs	r3, r6, r5
    1338:	2b00      	cmp	r3, #0
    133a:	dcf6      	bgt.n	132a <CONFIG_FPROTECT_BLOCK_SIZE+0x32a>
			OUTS(bps, bpe);
    133c:	4653      	mov	r3, sl
    133e:	463a      	mov	r2, r7
    1340:	4659      	mov	r1, fp
    1342:	4648      	mov	r0, r9
    1344:	f005 fe8b 	bl	705e <outs>
    1348:	2800      	cmp	r0, #0
    134a:	dbc2      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    134c:	4405      	add	r5, r0
		while (width > 0) {
    134e:	44a8      	add	r8, r5
    1350:	eba8 0305 	sub.w	r3, r8, r5
    1354:	2b00      	cmp	r3, #0
    1356:	f77f ae6a 	ble.w	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
			OUTC(' ');
    135a:	4659      	mov	r1, fp
    135c:	2020      	movs	r0, #32
    135e:	47c8      	blx	r9
    1360:	2800      	cmp	r0, #0
    1362:	dbb6      	blt.n	12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    1364:	3501      	adds	r5, #1
			--width;
    1366:	e7f3      	b.n	1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>
    1368:	00008161 	.word	0x00008161

0000136c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    136c:	b508      	push	{r3, lr}
	__asm__ volatile(
    136e:	f04f 0220 	mov.w	r2, #32
    1372:	f3ef 8311 	mrs	r3, BASEPRI
    1376:	f382 8812 	msr	BASEPRI_MAX, r2
    137a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    137e:	f000 ff31 	bl	21e4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1382:	4803      	ldr	r0, [pc, #12]	; (1390 <sys_reboot+0x24>)
    1384:	f005 fd7c 	bl	6e80 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1388:	f000 fa94 	bl	18b4 <arch_cpu_idle>
    138c:	e7fc      	b.n	1388 <sys_reboot+0x1c>
    138e:	bf00      	nop
    1390:	00008167 	.word	0x00008167

00001394 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1394:	f001 bfcc 	b.w	3330 <SystemInit>

00001398 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    139c:	4605      	mov	r5, r0
    139e:	f04f 0320 	mov.w	r3, #32
    13a2:	f3ef 8611 	mrs	r6, BASEPRI
    13a6:	f383 8812 	msr	BASEPRI_MAX, r3
    13aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    13ae:	4820      	ldr	r0, [pc, #128]	; (1430 <pm_state_notify+0x98>)
    13b0:	f003 fd4c 	bl	4e4c <z_spin_lock_valid>
    13b4:	b968      	cbnz	r0, 13d2 <pm_state_notify+0x3a>
    13b6:	4a1f      	ldr	r2, [pc, #124]	; (1434 <pm_state_notify+0x9c>)
    13b8:	491f      	ldr	r1, [pc, #124]	; (1438 <pm_state_notify+0xa0>)
    13ba:	4820      	ldr	r0, [pc, #128]	; (143c <pm_state_notify+0xa4>)
    13bc:	2394      	movs	r3, #148	; 0x94
    13be:	f005 fe6c 	bl	709a <assert_print>
    13c2:	491b      	ldr	r1, [pc, #108]	; (1430 <pm_state_notify+0x98>)
    13c4:	481e      	ldr	r0, [pc, #120]	; (1440 <pm_state_notify+0xa8>)
    13c6:	f005 fe68 	bl	709a <assert_print>
    13ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13cc:	4819      	ldr	r0, [pc, #100]	; (1434 <pm_state_notify+0x9c>)
    13ce:	f005 fe5d 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    13d2:	4817      	ldr	r0, [pc, #92]	; (1430 <pm_state_notify+0x98>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    13d4:	4f1b      	ldr	r7, [pc, #108]	; (1444 <pm_state_notify+0xac>)
    13d6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1448 <pm_state_notify+0xb0>
    13da:	f003 fd55 	bl	4e88 <z_spin_lock_set_owner>
	return list->head;
    13de:	4b1b      	ldr	r3, [pc, #108]	; (144c <pm_state_notify+0xb4>)
    13e0:	681c      	ldr	r4, [r3, #0]
    13e2:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    13e6:	b97c      	cbnz	r4, 1408 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13e8:	4811      	ldr	r0, [pc, #68]	; (1430 <pm_state_notify+0x98>)
    13ea:	f003 fd3d 	bl	4e68 <z_spin_unlock_valid>
    13ee:	b9c8      	cbnz	r0, 1424 <pm_state_notify+0x8c>
    13f0:	4a10      	ldr	r2, [pc, #64]	; (1434 <pm_state_notify+0x9c>)
    13f2:	4917      	ldr	r1, [pc, #92]	; (1450 <pm_state_notify+0xb8>)
    13f4:	4811      	ldr	r0, [pc, #68]	; (143c <pm_state_notify+0xa4>)
    13f6:	23c2      	movs	r3, #194	; 0xc2
    13f8:	f005 fe4f 	bl	709a <assert_print>
    13fc:	490c      	ldr	r1, [pc, #48]	; (1430 <pm_state_notify+0x98>)
    13fe:	4815      	ldr	r0, [pc, #84]	; (1454 <pm_state_notify+0xbc>)
    1400:	f005 fe4b 	bl	709a <assert_print>
    1404:	21c2      	movs	r1, #194	; 0xc2
    1406:	e7e1      	b.n	13cc <pm_state_notify+0x34>
			callback = notifier->state_exit;
    1408:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    140c:	2d00      	cmp	r5, #0
    140e:	bf18      	it	ne
    1410:	4613      	movne	r3, r2
		if (callback) {
    1412:	b12b      	cbz	r3, 1420 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1414:	f898 2014 	ldrb.w	r2, [r8, #20]
    1418:	fb09 f202 	mul.w	r2, r9, r2
    141c:	5cb8      	ldrb	r0, [r7, r2]
    141e:	4798      	blx	r3
	return node->next;
    1420:	6824      	ldr	r4, [r4, #0]
    1422:	e7e0      	b.n	13e6 <pm_state_notify+0x4e>
	__asm__ volatile(
    1424:	f386 8811 	msr	BASEPRI, r6
    1428:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    142c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1430:	20000420 	.word	0x20000420
    1434:	000080b8 	.word	0x000080b8
    1438:	00008111 	.word	0x00008111
    143c:	00007ea3 	.word	0x00007ea3
    1440:	00008126 	.word	0x00008126
    1444:	20000434 	.word	0x20000434
    1448:	20000af8 	.word	0x20000af8
    144c:	20000440 	.word	0x20000440
    1450:	000080e5 	.word	0x000080e5
    1454:	000080fc 	.word	0x000080fc

00001458 <pm_system_resume>:

void pm_system_resume(void)
{
    1458:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    145a:	4b19      	ldr	r3, [pc, #100]	; (14c0 <pm_system_resume+0x68>)
    145c:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    145e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1462:	f004 031f 	and.w	r3, r4, #31
    1466:	2201      	movs	r2, #1
    1468:	409a      	lsls	r2, r3
    146a:	4b16      	ldr	r3, [pc, #88]	; (14c4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    146c:	0961      	lsrs	r1, r4, #5
    146e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1472:	43d0      	mvns	r0, r2
    1474:	e853 1f00 	ldrex	r1, [r3]
    1478:	ea01 0500 	and.w	r5, r1, r0
    147c:	e843 5600 	strex	r6, r5, [r3]
    1480:	2e00      	cmp	r6, #0
    1482:	d1f7      	bne.n	1474 <pm_system_resume+0x1c>
    1484:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1488:	420a      	tst	r2, r1
    148a:	d013      	beq.n	14b4 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    148c:	4b0e      	ldr	r3, [pc, #56]	; (14c8 <pm_system_resume+0x70>)
    148e:	4d0f      	ldr	r5, [pc, #60]	; (14cc <pm_system_resume+0x74>)
    1490:	b18b      	cbz	r3, 14b6 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1492:	230c      	movs	r3, #12
    1494:	4363      	muls	r3, r4
    1496:	18ea      	adds	r2, r5, r3
    1498:	5ce8      	ldrb	r0, [r5, r3]
    149a:	7851      	ldrb	r1, [r2, #1]
    149c:	f005 fe5d 	bl	715a <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    14a0:	2000      	movs	r0, #0
    14a2:	f7ff ff79 	bl	1398 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    14a6:	230c      	movs	r3, #12
    14a8:	435c      	muls	r4, r3
    14aa:	192a      	adds	r2, r5, r4
    14ac:	2300      	movs	r3, #0
    14ae:	512b      	str	r3, [r5, r4]
    14b0:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    14b4:	bd70      	pop	{r4, r5, r6, pc}
    14b6:	f383 8811 	msr	BASEPRI, r3
    14ba:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    14be:	e7ef      	b.n	14a0 <pm_system_resume+0x48>
    14c0:	20000af8 	.word	0x20000af8
    14c4:	20000448 	.word	0x20000448
    14c8:	0000715b 	.word	0x0000715b
    14cc:	20000434 	.word	0x20000434

000014d0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    14d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    14d4:	4b47      	ldr	r3, [pc, #284]	; (15f4 <pm_system_suspend+0x124>)
{
    14d6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    14d8:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    14da:	f04f 0320 	mov.w	r3, #32
    14de:	f3ef 8811 	mrs	r8, BASEPRI
    14e2:	f383 8812 	msr	BASEPRI_MAX, r3
    14e6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    14ea:	4843      	ldr	r0, [pc, #268]	; (15f8 <pm_system_suspend+0x128>)
    14ec:	f003 fcae 	bl	4e4c <z_spin_lock_valid>
    14f0:	b968      	cbnz	r0, 150e <pm_system_suspend+0x3e>
    14f2:	4a42      	ldr	r2, [pc, #264]	; (15fc <pm_system_suspend+0x12c>)
    14f4:	4942      	ldr	r1, [pc, #264]	; (1600 <pm_system_suspend+0x130>)
    14f6:	4843      	ldr	r0, [pc, #268]	; (1604 <pm_system_suspend+0x134>)
    14f8:	2394      	movs	r3, #148	; 0x94
    14fa:	f005 fdce 	bl	709a <assert_print>
    14fe:	493e      	ldr	r1, [pc, #248]	; (15f8 <pm_system_suspend+0x128>)
    1500:	4841      	ldr	r0, [pc, #260]	; (1608 <pm_system_suspend+0x138>)
    1502:	f005 fdca 	bl	709a <assert_print>
    1506:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1508:	483c      	ldr	r0, [pc, #240]	; (15fc <pm_system_suspend+0x12c>)
    150a:	f005 fdbf 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    150e:	483a      	ldr	r0, [pc, #232]	; (15f8 <pm_system_suspend+0x128>)
    1510:	4e3e      	ldr	r6, [pc, #248]	; (160c <pm_system_suspend+0x13c>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1512:	240c      	movs	r4, #12
    1514:	f003 fcb8 	bl	4e88 <z_spin_lock_set_owner>
    1518:	436c      	muls	r4, r5
    151a:	4b3d      	ldr	r3, [pc, #244]	; (1610 <pm_system_suspend+0x140>)
    151c:	5d19      	ldrb	r1, [r3, r4]
    151e:	191a      	adds	r2, r3, r4
    1520:	b1b9      	cbz	r1, 1552 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1522:	ca07      	ldmia	r2, {r0, r1, r2}
    1524:	eb06 0c04 	add.w	ip, r6, r4
    1528:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    152c:	2200      	movs	r2, #0
    152e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1530:	4831      	ldr	r0, [pc, #196]	; (15f8 <pm_system_suspend+0x128>)
    1532:	f003 fc99 	bl	4e68 <z_spin_unlock_valid>
    1536:	4604      	mov	r4, r0
    1538:	b9b0      	cbnz	r0, 1568 <pm_system_suspend+0x98>
    153a:	4a30      	ldr	r2, [pc, #192]	; (15fc <pm_system_suspend+0x12c>)
    153c:	4935      	ldr	r1, [pc, #212]	; (1614 <pm_system_suspend+0x144>)
    153e:	4831      	ldr	r0, [pc, #196]	; (1604 <pm_system_suspend+0x134>)
    1540:	23c2      	movs	r3, #194	; 0xc2
    1542:	f005 fdaa 	bl	709a <assert_print>
    1546:	492c      	ldr	r1, [pc, #176]	; (15f8 <pm_system_suspend+0x128>)
    1548:	4833      	ldr	r0, [pc, #204]	; (1618 <pm_system_suspend+0x148>)
    154a:	f005 fda6 	bl	709a <assert_print>
    154e:	21c2      	movs	r1, #194	; 0xc2
    1550:	e7da      	b.n	1508 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1552:	4639      	mov	r1, r7
    1554:	4628      	mov	r0, r5
    1556:	f000 f869 	bl	162c <pm_policy_next_state>
		if (info != NULL) {
    155a:	2800      	cmp	r0, #0
    155c:	d0e8      	beq.n	1530 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
    155e:	c807      	ldmia	r0, {r0, r1, r2}
    1560:	4434      	add	r4, r6
    1562:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1566:	e7e3      	b.n	1530 <pm_system_suspend+0x60>
	__asm__ volatile(
    1568:	f388 8811 	msr	BASEPRI, r8
    156c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1570:	230c      	movs	r3, #12
    1572:	436b      	muls	r3, r5
    1574:	18f2      	adds	r2, r6, r3
    1576:	5cf3      	ldrb	r3, [r6, r3]
    1578:	2b00      	cmp	r3, #0
    157a:	d039      	beq.n	15f0 <pm_system_suspend+0x120>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    157c:	1c7b      	adds	r3, r7, #1
    157e:	d00f      	beq.n	15a0 <pm_system_suspend+0xd0>
			return (uint32_t)((t * to_hz + off) / from_hz);
    1580:	f8d2 e008 	ldr.w	lr, [r2, #8]
    1584:	4825      	ldr	r0, [pc, #148]	; (161c <pm_system_suspend+0x14c>)
    1586:	4a26      	ldr	r2, [pc, #152]	; (1620 <pm_system_suspend+0x150>)
    1588:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    158c:	2100      	movs	r1, #0
    158e:	2300      	movs	r3, #0
    1590:	fbee 010c 	umlal	r0, r1, lr, ip
    1594:	f7fe fdb4 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1598:	2101      	movs	r1, #1
    159a:	1a38      	subs	r0, r7, r0
    159c:	f005 f90e 	bl	67bc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    15a0:	f004 f892 	bl	56c8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    15a4:	2001      	movs	r0, #1
    15a6:	f7ff fef7 	bl	1398 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    15aa:	f3bf 8f5b 	dmb	ish
    15ae:	4b1d      	ldr	r3, [pc, #116]	; (1624 <pm_system_suspend+0x154>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    15b0:	096a      	lsrs	r2, r5, #5
    15b2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    15b6:	f005 011f 	and.w	r1, r5, #31
    15ba:	2201      	movs	r2, #1
    15bc:	408a      	lsls	r2, r1
    15be:	e853 0f00 	ldrex	r0, [r3]
    15c2:	4310      	orrs	r0, r2
    15c4:	e843 0100 	strex	r1, r0, [r3]
    15c8:	2900      	cmp	r1, #0
    15ca:	d1f8      	bne.n	15be <pm_system_suspend+0xee>
    15cc:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    15d0:	4b15      	ldr	r3, [pc, #84]	; (1628 <pm_system_suspend+0x158>)
    15d2:	b133      	cbz	r3, 15e2 <pm_system_suspend+0x112>
		pm_state_set(info->state, info->substate_id);
    15d4:	230c      	movs	r3, #12
    15d6:	436b      	muls	r3, r5
    15d8:	18f2      	adds	r2, r6, r3
    15da:	5cf0      	ldrb	r0, [r6, r3]
    15dc:	7851      	ldrb	r1, [r2, #1]
    15de:	f005 fdb0 	bl	7142 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    15e2:	f7ff ff39 	bl	1458 <pm_system_resume>
	k_sched_unlock();
    15e6:	f004 f8db 	bl	57a0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
    15ea:	4620      	mov	r0, r4
    15ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
    15f0:	461c      	mov	r4, r3
    15f2:	e7fa      	b.n	15ea <pm_system_suspend+0x11a>
    15f4:	20000af8 	.word	0x20000af8
    15f8:	20000424 	.word	0x20000424
    15fc:	000080b8 	.word	0x000080b8
    1600:	00008111 	.word	0x00008111
    1604:	00007ea3 	.word	0x00007ea3
    1608:	00008126 	.word	0x00008126
    160c:	20000434 	.word	0x20000434
    1610:	20000428 	.word	0x20000428
    1614:	000080e5 	.word	0x000080e5
    1618:	000080fc 	.word	0x000080fc
    161c:	000f423f 	.word	0x000f423f
    1620:	000f4240 	.word	0x000f4240
    1624:	20000448 	.word	0x20000448
    1628:	00007143 	.word	0x00007143

0000162c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    162c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1630:	b085      	sub	sp, #20
    1632:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1634:	a903      	add	r1, sp, #12
    1636:	f000 f843 	bl	16c0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    163a:	4b1e      	ldr	r3, [pc, #120]	; (16b4 <pm_policy_next_state+0x88>)
    163c:	9d03      	ldr	r5, [sp, #12]
    163e:	f8d3 a000 	ldr.w	sl, [r3]
    1642:	f8df 8074 	ldr.w	r8, [pc, #116]	; 16b8 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1646:	1e43      	subs	r3, r0, #1
    1648:	b21b      	sxth	r3, r3
    164a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    164e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1650:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1654:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    1658:	f04f 0b00 	mov.w	fp, #0
    165c:	b924      	cbnz	r4, 1668 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    165e:	46a1      	mov	r9, r4
}
    1660:	4648      	mov	r0, r9
    1662:	b005      	add	sp, #20
    1664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1668:	6868      	ldr	r0, [r5, #4]
    166a:	4a14      	ldr	r2, [pc, #80]	; (16bc <pm_policy_next_state+0x90>)
    166c:	46c4      	mov	ip, r8
    166e:	4659      	mov	r1, fp
    1670:	fbe0 c107 	umlal	ip, r1, r0, r7
    1674:	2300      	movs	r3, #0
    1676:	4660      	mov	r0, ip
    1678:	f7fe fd42 	bl	100 <__aeabi_uldivmod>
    167c:	9001      	str	r0, [sp, #4]
    167e:	68a8      	ldr	r0, [r5, #8]
    1680:	4a0e      	ldr	r2, [pc, #56]	; (16bc <pm_policy_next_state+0x90>)
    1682:	46c4      	mov	ip, r8
    1684:	4659      	mov	r1, fp
    1686:	fbe0 c107 	umlal	ip, r1, r0, r7
    168a:	2300      	movs	r3, #0
    168c:	4660      	mov	r0, ip
    168e:	f7fe fd37 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1692:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    1696:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1698:	d001      	beq.n	169e <pm_policy_next_state+0x72>
    169a:	4582      	cmp	sl, r0
    169c:	d905      	bls.n	16aa <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    169e:	1c73      	adds	r3, r6, #1
    16a0:	d0de      	beq.n	1660 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    16a2:	9b01      	ldr	r3, [sp, #4]
    16a4:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    16a6:	42b0      	cmp	r0, r6
    16a8:	d9da      	bls.n	1660 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    16aa:	3c01      	subs	r4, #1
    16ac:	b2a4      	uxth	r4, r4
    16ae:	3d0c      	subs	r5, #12
    16b0:	e7d4      	b.n	165c <pm_policy_next_state+0x30>
    16b2:	bf00      	nop
    16b4:	20000008 	.word	0x20000008
    16b8:	000f423f 	.word	0x000f423f
    16bc:	000f4240 	.word	0x000f4240

000016c0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    16c0:	b908      	cbnz	r0, 16c6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    16c2:	4b02      	ldr	r3, [pc, #8]	; (16cc <pm_state_cpu_get_all+0xc>)
    16c4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    16c6:	2000      	movs	r0, #0
    16c8:	4770      	bx	lr
    16ca:	bf00      	nop
    16cc:	00007bc8 	.word	0x00007bc8

000016d0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    16d0:	4801      	ldr	r0, [pc, #4]	; (16d8 <nrf_cc3xx_platform_abort_init+0x8>)
    16d2:	f005 ba2d 	b.w	6b30 <nrf_cc3xx_platform_set_abort>
    16d6:	bf00      	nop
    16d8:	00007bc8 	.word	0x00007bc8

000016dc <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    16dc:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    16de:	4604      	mov	r4, r0
    16e0:	b918      	cbnz	r0, 16ea <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    16e2:	4b0f      	ldr	r3, [pc, #60]	; (1720 <mutex_free_platform+0x44>)
    16e4:	480f      	ldr	r0, [pc, #60]	; (1724 <mutex_free_platform+0x48>)
    16e6:	685b      	ldr	r3, [r3, #4]
    16e8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    16ea:	6861      	ldr	r1, [r4, #4]
    16ec:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    16f0:	d00f      	beq.n	1712 <mutex_free_platform+0x36>
    16f2:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    16f6:	d00c      	beq.n	1712 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    16f8:	4d0b      	ldr	r5, [pc, #44]	; (1728 <mutex_free_platform+0x4c>)
    16fa:	42a9      	cmp	r1, r5
    16fc:	d009      	beq.n	1712 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    16fe:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1702:	d007      	beq.n	1714 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1704:	4809      	ldr	r0, [pc, #36]	; (172c <mutex_free_platform+0x50>)
    1706:	4621      	mov	r1, r4
    1708:	f003 fa1c 	bl	4b44 <k_mem_slab_free>
        mutex->mutex = NULL;
    170c:	2300      	movs	r3, #0
    170e:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1710:	6065      	str	r5, [r4, #4]
}
    1712:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1714:	6820      	ldr	r0, [r4, #0]
    1716:	2214      	movs	r2, #20
    1718:	f005 fd07 	bl	712a <memset>
    171c:	e7f8      	b.n	1710 <mutex_free_platform+0x34>
    171e:	bf00      	nop
    1720:	2000011c 	.word	0x2000011c
    1724:	00008193 	.word	0x00008193
    1728:	a95c5f2c 	.word	0xa95c5f2c
    172c:	2000094c 	.word	0x2000094c

00001730 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1730:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1732:	b320      	cbz	r0, 177e <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1734:	6843      	ldr	r3, [r0, #4]
    1736:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    173a:	d110      	bne.n	175e <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    173c:	2201      	movs	r2, #1
    173e:	6803      	ldr	r3, [r0, #0]
    1740:	f3bf 8f5b 	dmb	ish
    1744:	e853 1f00 	ldrex	r1, [r3]
    1748:	2900      	cmp	r1, #0
    174a:	d103      	bne.n	1754 <mutex_lock_platform+0x24>
    174c:	e843 2000 	strex	r0, r2, [r3]
    1750:	2800      	cmp	r0, #0
    1752:	d1f7      	bne.n	1744 <mutex_lock_platform+0x14>
    1754:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1758:	d10d      	bne.n	1776 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
    175a:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    175c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    175e:	4a09      	ldr	r2, [pc, #36]	; (1784 <mutex_lock_platform+0x54>)
    1760:	4293      	cmp	r3, r2
    1762:	d00a      	beq.n	177a <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1764:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1766:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    176e:	f003 fbc5 	bl	4efc <z_impl_k_mutex_lock>
        if (ret == 0) {
    1772:	2800      	cmp	r0, #0
    1774:	d0f1      	beq.n	175a <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1776:	4804      	ldr	r0, [pc, #16]	; (1788 <mutex_lock_platform+0x58>)
    1778:	e7f0      	b.n	175c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    177a:	4804      	ldr	r0, [pc, #16]	; (178c <mutex_lock_platform+0x5c>)
    177c:	e7ee      	b.n	175c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    177e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1782:	e7eb      	b.n	175c <mutex_lock_platform+0x2c>
    1784:	a95c5f2c 	.word	0xa95c5f2c
    1788:	ffff8fe9 	.word	0xffff8fe9
    178c:	ffff8fea 	.word	0xffff8fea

00001790 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1790:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1792:	b1d8      	cbz	r0, 17cc <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1794:	6843      	ldr	r3, [r0, #4]
    1796:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    179a:	d110      	bne.n	17be <mutex_unlock_platform+0x2e>
    179c:	2200      	movs	r2, #0
    179e:	6803      	ldr	r3, [r0, #0]
    17a0:	f3bf 8f5b 	dmb	ish
    17a4:	e853 1f00 	ldrex	r1, [r3]
    17a8:	2901      	cmp	r1, #1
    17aa:	d103      	bne.n	17b4 <mutex_unlock_platform+0x24>
    17ac:	e843 2000 	strex	r0, r2, [r3]
    17b0:	2800      	cmp	r0, #0
    17b2:	d1f7      	bne.n	17a4 <mutex_unlock_platform+0x14>
    17b4:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    17b8:	d10b      	bne.n	17d2 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    17ba:	2000      	movs	r0, #0
    }
}
    17bc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    17be:	4a07      	ldr	r2, [pc, #28]	; (17dc <mutex_unlock_platform+0x4c>)
    17c0:	4293      	cmp	r3, r2
    17c2:	d008      	beq.n	17d6 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
    17c4:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    17c6:	f003 fc69 	bl	509c <z_impl_k_mutex_unlock>
    17ca:	e7f6      	b.n	17ba <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    17cc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    17d0:	e7f4      	b.n	17bc <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    17d2:	4803      	ldr	r0, [pc, #12]	; (17e0 <mutex_unlock_platform+0x50>)
    17d4:	e7f2      	b.n	17bc <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    17d6:	4803      	ldr	r0, [pc, #12]	; (17e4 <mutex_unlock_platform+0x54>)
    17d8:	e7f0      	b.n	17bc <mutex_unlock_platform+0x2c>
    17da:	bf00      	nop
    17dc:	a95c5f2c 	.word	0xa95c5f2c
    17e0:	ffff8fe9 	.word	0xffff8fe9
    17e4:	ffff8fea 	.word	0xffff8fea

000017e8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    17e8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    17ea:	4604      	mov	r4, r0
    17ec:	b918      	cbnz	r0, 17f6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    17ee:	4b1d      	ldr	r3, [pc, #116]	; (1864 <mutex_init_platform+0x7c>)
    17f0:	481d      	ldr	r0, [pc, #116]	; (1868 <mutex_init_platform+0x80>)
    17f2:	685b      	ldr	r3, [r3, #4]
    17f4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    17f6:	6863      	ldr	r3, [r4, #4]
    17f8:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    17fc:	d02f      	beq.n	185e <mutex_init_platform+0x76>
    17fe:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1802:	d02c      	beq.n	185e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1804:	4a19      	ldr	r2, [pc, #100]	; (186c <mutex_init_platform+0x84>)
    1806:	4293      	cmp	r3, r2
    1808:	d119      	bne.n	183e <mutex_init_platform+0x56>
    180a:	6823      	ldr	r3, [r4, #0]
    180c:	bb03      	cbnz	r3, 1850 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    180e:	4818      	ldr	r0, [pc, #96]	; (1870 <mutex_init_platform+0x88>)
    1810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1818:	4621      	mov	r1, r4
    181a:	f003 f929 	bl	4a70 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    181e:	b908      	cbnz	r0, 1824 <mutex_init_platform+0x3c>
    1820:	6823      	ldr	r3, [r4, #0]
    1822:	b91b      	cbnz	r3, 182c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    1824:	4b0f      	ldr	r3, [pc, #60]	; (1864 <mutex_init_platform+0x7c>)
    1826:	4813      	ldr	r0, [pc, #76]	; (1874 <mutex_init_platform+0x8c>)
    1828:	685b      	ldr	r3, [r3, #4]
    182a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    182c:	6820      	ldr	r0, [r4, #0]
    182e:	2214      	movs	r2, #20
    1830:	2100      	movs	r1, #0
    1832:	f005 fc7a 	bl	712a <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1836:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    183a:	6063      	str	r3, [r4, #4]
    183c:	e008      	b.n	1850 <mutex_init_platform+0x68>
    switch(flags){
    183e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1842:	d80d      	bhi.n	1860 <mutex_init_platform+0x78>
    1844:	2b3a      	cmp	r3, #58	; 0x3a
    1846:	d003      	beq.n	1850 <mutex_init_platform+0x68>
    1848:	f640 62ba 	movw	r2, #3770	; 0xeba
    184c:	4293      	cmp	r3, r2
    184e:	d1de      	bne.n	180e <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1850:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1852:	f005 fff5 	bl	7840 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1856:	6863      	ldr	r3, [r4, #4]
    1858:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    185c:	6063      	str	r3, [r4, #4]
}
    185e:	bd10      	pop	{r4, pc}
    switch(flags){
    1860:	4a05      	ldr	r2, [pc, #20]	; (1878 <mutex_init_platform+0x90>)
    1862:	e7f3      	b.n	184c <mutex_init_platform+0x64>
    1864:	2000011c 	.word	0x2000011c
    1868:	00008193 	.word	0x00008193
    186c:	a95c5f2c 	.word	0xa95c5f2c
    1870:	2000094c 	.word	0x2000094c
    1874:	000081b9 	.word	0x000081b9
    1878:	3a00003a 	.word	0x3a00003a

0000187c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    187c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    187e:	4906      	ldr	r1, [pc, #24]	; (1898 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1880:	4806      	ldr	r0, [pc, #24]	; (189c <nrf_cc3xx_platform_mutex_init+0x20>)
    1882:	2340      	movs	r3, #64	; 0x40
    1884:	2214      	movs	r2, #20
    1886:	f005 ffb7 	bl	77f8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    188a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    188e:	4904      	ldr	r1, [pc, #16]	; (18a0 <nrf_cc3xx_platform_mutex_init+0x24>)
    1890:	4804      	ldr	r0, [pc, #16]	; (18a4 <nrf_cc3xx_platform_mutex_init+0x28>)
    1892:	f005 b9bf 	b.w	6c14 <nrf_cc3xx_platform_set_mutexes>
    1896:	bf00      	nop
    1898:	2000044c 	.word	0x2000044c
    189c:	2000094c 	.word	0x2000094c
    18a0:	00007bd0 	.word	0x00007bd0
    18a4:	00007be4 	.word	0x00007be4

000018a8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    18a8:	4901      	ldr	r1, [pc, #4]	; (18b0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    18aa:	2210      	movs	r2, #16
	str	r2, [r1]
    18ac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    18ae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    18b0:	e000ed10 	.word	0xe000ed10

000018b4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    18b4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    18b6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    18b8:	f380 8811 	msr	BASEPRI, r0
	isb
    18bc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    18c0:	f3bf 8f4f 	dsb	sy
    18c4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    18c6:	b662      	cpsie	i
	isb
    18c8:	f3bf 8f6f 	isb	sy

	bx	lr
    18cc:	4770      	bx	lr
    18ce:	bf00      	nop

000018d0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    18d0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    18d2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    18d4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    18d8:	f3bf 8f4f 	dsb	sy
    18dc:	bf20      	wfe

	msr	BASEPRI, r0
    18de:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    18e2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    18e4:	4770      	bx	lr
    18e6:	bf00      	nop

000018e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    18e8:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    18ea:	2800      	cmp	r0, #0
    18ec:	db07      	blt.n	18fe <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18ee:	4a04      	ldr	r2, [pc, #16]	; (1900 <arch_irq_enable+0x18>)
    18f0:	0941      	lsrs	r1, r0, #5
    18f2:	2301      	movs	r3, #1
    18f4:	f000 001f 	and.w	r0, r0, #31
    18f8:	4083      	lsls	r3, r0
    18fa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    18fe:	4770      	bx	lr
    1900:	e000e100 	.word	0xe000e100

00001904 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1904:	4b05      	ldr	r3, [pc, #20]	; (191c <arch_irq_is_enabled+0x18>)
    1906:	0942      	lsrs	r2, r0, #5
    1908:	f000 001f 	and.w	r0, r0, #31
    190c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1910:	2301      	movs	r3, #1
    1912:	fa03 f000 	lsl.w	r0, r3, r0
}
    1916:	4010      	ands	r0, r2
    1918:	4770      	bx	lr
    191a:	bf00      	nop
    191c:	e000e100 	.word	0xe000e100

00001920 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    1920:	b538      	push	{r3, r4, r5, lr}
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
    1922:	1c4b      	adds	r3, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    1924:	2b07      	cmp	r3, #7
{
    1926:	4604      	mov	r4, r0
    1928:	460d      	mov	r5, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    192a:	d90f      	bls.n	194c <z_arm_irq_priority_set+0x2c>
    192c:	4a11      	ldr	r2, [pc, #68]	; (1974 <z_arm_irq_priority_set+0x54>)
    192e:	4912      	ldr	r1, [pc, #72]	; (1978 <z_arm_irq_priority_set+0x58>)
    1930:	4812      	ldr	r0, [pc, #72]	; (197c <z_arm_irq_priority_set+0x5c>)
    1932:	235b      	movs	r3, #91	; 0x5b
    1934:	f005 fbb1 	bl	709a <assert_print>
    1938:	4811      	ldr	r0, [pc, #68]	; (1980 <z_arm_irq_priority_set+0x60>)
    193a:	4629      	mov	r1, r5
    193c:	2307      	movs	r3, #7
    193e:	4622      	mov	r2, r4
    1940:	f005 fbab 	bl	709a <assert_print>
    1944:	480b      	ldr	r0, [pc, #44]	; (1974 <z_arm_irq_priority_set+0x54>)
    1946:	215b      	movs	r1, #91	; 0x5b
    1948:	f005 fba0 	bl	708c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    194c:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    194e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1950:	bfac      	ite	ge
    1952:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1956:	4a0b      	ldrlt	r2, [pc, #44]	; (1984 <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1958:	ea4f 1343 	mov.w	r3, r3, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    195c:	bfb8      	it	lt
    195e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1962:	b2db      	uxtb	r3, r3
    1964:	bfaa      	itet	ge
    1966:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    196a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    196c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    1970:	bd38      	pop	{r3, r4, r5, pc}
    1972:	bf00      	nop
    1974:	000081e6 	.word	0x000081e6
    1978:	0000821c 	.word	0x0000821c
    197c:	00007ea3 	.word	0x00007ea3
    1980:	00008237 	.word	0x00008237
    1984:	e000ed14 	.word	0xe000ed14

00001988 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1988:	bf30      	wfi
    b z_SysNmiOnReset
    198a:	f7ff bffd 	b.w	1988 <z_SysNmiOnReset>
    198e:	bf00      	nop

00001990 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1990:	4a0b      	ldr	r2, [pc, #44]	; (19c0 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1992:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1994:	4b0b      	ldr	r3, [pc, #44]	; (19c4 <z_arm_prep_c+0x34>)
    1996:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    199a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    199c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    19a0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    19a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    19a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    19ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    19b0:	f002 ff82 	bl	48b8 <z_bss_zero>
	z_data_copy();
    19b4:	f004 fd42 	bl	643c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    19b8:	f000 fa24 	bl	1e04 <z_arm_interrupt_init>
	z_cstart();
    19bc:	f002 ffc0 	bl	4940 <z_cstart>
    19c0:	00000000 	.word	0x00000000
    19c4:	e000ed00 	.word	0xe000ed00

000019c8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    19c8:	4a09      	ldr	r2, [pc, #36]	; (19f0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    19ca:	490a      	ldr	r1, [pc, #40]	; (19f4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    19cc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    19ce:	6809      	ldr	r1, [r1, #0]
    19d0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19d2:	4909      	ldr	r1, [pc, #36]	; (19f8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    19d4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    19d6:	684b      	ldr	r3, [r1, #4]
    19d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    19dc:	604b      	str	r3, [r1, #4]
    19de:	2300      	movs	r3, #0
    19e0:	f383 8811 	msr	BASEPRI, r3
    19e4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    19e8:	6893      	ldr	r3, [r2, #8]
}
    19ea:	6f98      	ldr	r0, [r3, #120]	; 0x78
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop
    19f0:	20000af8 	.word	0x20000af8
    19f4:	00007d60 	.word	0x00007d60
    19f8:	e000ed00 	.word	0xe000ed00

000019fc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    19fc:	4912      	ldr	r1, [pc, #72]	; (1a48 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    19fe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1a00:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1a04:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1a06:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1a0a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1a0e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1a10:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1a14:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1a18:	4f0c      	ldr	r7, [pc, #48]	; (1a4c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1a1a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1a1e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1a20:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1a22:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1a24:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1a26:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1a28:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1a2a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    1a2e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1a30:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1a32:	f000 fa83 	bl	1f3c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1a36:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1a3a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1a3e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1a42:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1a46:	4770      	bx	lr
    ldr r1, =_kernel
    1a48:	20000af8 	.word	0x20000af8
    ldr v4, =_SCS_ICSR
    1a4c:	e000ed04 	.word	0xe000ed04

00001a50 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1a50:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1a54:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1a56:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1a5a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1a5e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1a60:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1a64:	2902      	cmp	r1, #2
    beq _oops
    1a66:	d0ff      	beq.n	1a68 <_oops>

00001a68 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1a68:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1a6a:	f005 fb2a 	bl	70c2 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1a6e:	bd01      	pop	{r0, pc}

00001a70 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1a70:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1a74:	9b00      	ldr	r3, [sp, #0]
    1a76:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1a7a:	490a      	ldr	r1, [pc, #40]	; (1aa4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1a7c:	9b01      	ldr	r3, [sp, #4]
    1a7e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1a82:	9b02      	ldr	r3, [sp, #8]
    1a84:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1a88:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1a8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1a90:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1a94:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1a98:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1a9a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1a9c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1a9e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1aa0:	4770      	bx	lr
    1aa2:	bf00      	nop
    1aa4:	00006e9b 	.word	0x00006e9b

00001aa8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1aa8:	4a09      	ldr	r2, [pc, #36]	; (1ad0 <z_check_thread_stack_fail+0x28>)
{
    1aaa:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1aac:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    1aae:	b170      	cbz	r0, 1ace <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1ab0:	f113 0f16 	cmn.w	r3, #22
    1ab4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1ab6:	d005      	beq.n	1ac4 <z_check_thread_stack_fail+0x1c>
    1ab8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1abc:	429a      	cmp	r2, r3
    1abe:	d805      	bhi.n	1acc <z_check_thread_stack_fail+0x24>
    1ac0:	4283      	cmp	r3, r0
    1ac2:	d203      	bcs.n	1acc <z_check_thread_stack_fail+0x24>
		return 0;
    1ac4:	4281      	cmp	r1, r0
    1ac6:	bf28      	it	cs
    1ac8:	2000      	movcs	r0, #0
    1aca:	4770      	bx	lr
    1acc:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    1ace:	4770      	bx	lr
    1ad0:	20000af8 	.word	0x20000af8

00001ad4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1ad4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <arch_switch_to_main_thread+0x28>)
    1ad8:	6098      	str	r0, [r3, #8]
{
    1ada:	460d      	mov	r5, r1
    1adc:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1ade:	f000 fa2d 	bl	1f3c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1ae2:	4620      	mov	r0, r4
    1ae4:	f385 8809 	msr	PSP, r5
    1ae8:	2100      	movs	r1, #0
    1aea:	b663      	cpsie	if
    1aec:	f381 8811 	msr	BASEPRI, r1
    1af0:	f3bf 8f6f 	isb	sy
    1af4:	2200      	movs	r2, #0
    1af6:	2300      	movs	r3, #0
    1af8:	f005 f9cf 	bl	6e9a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1afc:	20000af8 	.word	0x20000af8

00001b00 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1b00:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1b02:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1b04:	4a0b      	ldr	r2, [pc, #44]	; (1b34 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1b06:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1b08:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1b0a:	bf1e      	ittt	ne
	movne	r1, #0
    1b0c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1b0e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1b10:	f005 fe87 	blne	7822 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1b14:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1b16:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1b1a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1b1e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1b22:	4905      	ldr	r1, [pc, #20]	; (1b38 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1b24:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1b26:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1b28:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1b2a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1b2e:	4903      	ldr	r1, [pc, #12]	; (1b3c <_isr_wrapper+0x3c>)
	bx r1
    1b30:	4708      	bx	r1
    1b32:	0000      	.short	0x0000
	ldr r2, =_kernel
    1b34:	20000af8 	.word	0x20000af8
	ldr r1, =_sw_isr_table
    1b38:	000079a8 	.word	0x000079a8
	ldr r1, =z_arm_int_exit
    1b3c:	00001b41 	.word	0x00001b41

00001b40 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1b40:	4b04      	ldr	r3, [pc, #16]	; (1b54 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1b42:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1b44:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1b46:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1b48:	d003      	beq.n	1b52 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1b4a:	4903      	ldr	r1, [pc, #12]	; (1b58 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1b50:	600a      	str	r2, [r1, #0]

00001b52 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1b52:	4770      	bx	lr
	ldr r3, =_kernel
    1b54:	20000af8 	.word	0x20000af8
	ldr r1, =_SCS_ICSR
    1b58:	e000ed04 	.word	0xe000ed04

00001b5c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1b5c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b5e:	4b25      	ldr	r3, [pc, #148]	; (1bf4 <mem_manage_fault+0x98>)
{
    1b60:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b68:	0792      	lsls	r2, r2, #30
{
    1b6a:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1b6c:	d52a      	bpl.n	1bc4 <mem_manage_fault+0x68>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1b6e:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b72:	0616      	lsls	r6, r2, #24
    1b74:	d526      	bpl.n	1bc4 <mem_manage_fault+0x68>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1b76:	b119      	cbz	r1, 1b80 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1b7e:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b86:	06d1      	lsls	r1, r2, #27
    1b88:	d402      	bmi.n	1b90 <mem_manage_fault+0x34>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1b8c:	079a      	lsls	r2, r3, #30
    1b8e:	d52e      	bpl.n	1bee <mem_manage_fault+0x92>
		 * not accompanied by a data access violation error (i.e.
		 * when stack overflows due to the exception entry frame
		 * stacking): z_check_thread_stack_fail() shall be able to
		 * handle the case of 'mmfar' holding the -EINVAL value.
		 */
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1b90:	4e18      	ldr	r6, [pc, #96]	; (1bf4 <mem_manage_fault+0x98>)
    1b92:	6873      	ldr	r3, [r6, #4]
    1b94:	051b      	lsls	r3, r3, #20
    1b96:	d52a      	bpl.n	1bee <mem_manage_fault+0x92>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1b98:	4629      	mov	r1, r5
    1b9a:	f7ff ff85 	bl	1aa8 <z_check_thread_stack_fail>
				((uint32_t) &esf[0]));

			if (min_stack_ptr) {
    1b9e:	b1a0      	cbz	r0, 1bca <mem_manage_fault+0x6e>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1ba0:	f380 8809 	msr	PSP, r0
				 * fatal error and a thread that corrupted its
				 * stack needs to be aborted.
				 */
				__set_PSP(min_stack_ptr);

				reason = K_ERR_STACK_CHK_FAIL;
    1ba4:	2002      	movs	r0, #2
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1ba6:	4b13      	ldr	r3, [pc, #76]	; (1bf4 <mem_manage_fault+0x98>)
    1ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1baa:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1bac:	bf42      	ittt	mi
    1bae:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1bb0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1bb4:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1bb8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1bbc:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1bbe:	2300      	movs	r3, #0
    1bc0:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1bc2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1bc4:	f06f 0015 	mvn.w	r0, #21
    1bc8:	e7da      	b.n	1b80 <mem_manage_fault+0x24>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    1bca:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    1bcc:	06d9      	lsls	r1, r3, #27
    1bce:	d50e      	bpl.n	1bee <mem_manage_fault+0x92>
    1bd0:	4909      	ldr	r1, [pc, #36]	; (1bf8 <mem_manage_fault+0x9c>)
    1bd2:	4a0a      	ldr	r2, [pc, #40]	; (1bfc <mem_manage_fault+0xa0>)
    1bd4:	480a      	ldr	r0, [pc, #40]	; (1c00 <mem_manage_fault+0xa4>)
    1bd6:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1bda:	f005 fa5e 	bl	709a <assert_print>
    1bde:	4809      	ldr	r0, [pc, #36]	; (1c04 <mem_manage_fault+0xa8>)
    1be0:	f005 fa5b 	bl	709a <assert_print>
    1be4:	4805      	ldr	r0, [pc, #20]	; (1bfc <mem_manage_fault+0xa0>)
    1be6:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1bea:	f005 fa4f 	bl	708c <assert_post_action>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1bee:	2000      	movs	r0, #0
    1bf0:	e7d9      	b.n	1ba6 <mem_manage_fault+0x4a>
    1bf2:	bf00      	nop
    1bf4:	e000ed00 	.word	0xe000ed00
    1bf8:	000082b1 	.word	0x000082b1
    1bfc:	00008277 	.word	0x00008277
    1c00:	00007ea3 	.word	0x00007ea3
    1c04:	000082fb 	.word	0x000082fb

00001c08 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1c08:	4b0d      	ldr	r3, [pc, #52]	; (1c40 <bus_fault.constprop.0+0x38>)
    1c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c10:	0592      	lsls	r2, r2, #22
    1c12:	d508      	bpl.n	1c26 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c18:	0412      	lsls	r2, r2, #16
    1c1a:	d504      	bpl.n	1c26 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1c1c:	b118      	cbz	r0, 1c26 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1c24:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1c26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1c2a:	05d2      	lsls	r2, r2, #23
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c2c:	4a04      	ldr	r2, [pc, #16]	; (1c40 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1c2e:	bf58      	it	pl
    1c30:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c32:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1c34:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1c36:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1c3a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1c3c:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1c3e:	4770      	bx	lr
    1c40:	e000ed00 	.word	0xe000ed00

00001c44 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1c44:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c46:	4b5e      	ldr	r3, [pc, #376]	; (1dc0 <z_arm_fault+0x17c>)
    1c48:	685b      	ldr	r3, [r3, #4]
{
    1c4a:	b08a      	sub	sp, #40	; 0x28
    1c4c:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1c52:	2600      	movs	r6, #0
    1c54:	f386 8811 	msr	BASEPRI, r6
    1c58:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1c5c:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1c60:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1c64:	d108      	bne.n	1c78 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1c66:	f002 000c 	and.w	r0, r2, #12
    1c6a:	2808      	cmp	r0, #8
    1c6c:	d004      	beq.n	1c78 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1c6e:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1c70:	bf4c      	ite	mi
    1c72:	460d      	movmi	r5, r1
			*nested_exc = true;
    1c74:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    1c76:	b975      	cbnz	r5, 1c96 <z_arm_fault+0x52>
    1c78:	4952      	ldr	r1, [pc, #328]	; (1dc4 <z_arm_fault+0x180>)
    1c7a:	4a53      	ldr	r2, [pc, #332]	; (1dc8 <z_arm_fault+0x184>)
    1c7c:	4853      	ldr	r0, [pc, #332]	; (1dcc <z_arm_fault+0x188>)
    1c7e:	f44f 6384 	mov.w	r3, #1056	; 0x420
    1c82:	f005 fa0a 	bl	709a <assert_print>
    1c86:	4852      	ldr	r0, [pc, #328]	; (1dd0 <z_arm_fault+0x18c>)
    1c88:	f005 fa07 	bl	709a <assert_print>
    1c8c:	f44f 6184 	mov.w	r1, #1056	; 0x420
			__ASSERT(0,
    1c90:	484d      	ldr	r0, [pc, #308]	; (1dc8 <z_arm_fault+0x184>)
    1c92:	f005 f9fb 	bl	708c <assert_post_action>
	*recoverable = false;
    1c96:	2200      	movs	r2, #0
	switch (fault) {
    1c98:	3b03      	subs	r3, #3
	*recoverable = false;
    1c9a:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1c9e:	2b03      	cmp	r3, #3
    1ca0:	d84b      	bhi.n	1d3a <z_arm_fault+0xf6>
    1ca2:	e8df f003 	tbb	[pc, r3]
    1ca6:	7d02      	.short	0x7d02
    1ca8:	8581      	.short	0x8581
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1caa:	4b45      	ldr	r3, [pc, #276]	; (1dc0 <z_arm_fault+0x17c>)
    1cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cae:	0791      	lsls	r1, r2, #30
    1cb0:	d443      	bmi.n	1d3a <z_arm_fault+0xf6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cb4:	2a00      	cmp	r2, #0
    1cb6:	db40      	blt.n	1d3a <z_arm_fault+0xf6>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1cba:	0052      	lsls	r2, r2, #1
    1cbc:	d563      	bpl.n	1d86 <z_arm_fault+0x142>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1cbe:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1cc0:	69a9      	ldr	r1, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1cc6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1cc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ccc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1cd0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    1cd2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1cda:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1cdc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ce0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1ce4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1ce8:	4291      	cmp	r1, r2
    1cea:	d101      	bne.n	1cf0 <z_arm_fault+0xac>
			reason = esf->basic.r0;
    1cec:	682c      	ldr	r4, [r5, #0]
    1cee:	e025      	b.n	1d3c <z_arm_fault+0xf8>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1cf2:	b2d2      	uxtb	r2, r2
    1cf4:	b13a      	cbz	r2, 1d06 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    1cf6:	f10d 0207 	add.w	r2, sp, #7
    1cfa:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1cfc:	4628      	mov	r0, r5
    1cfe:	f7ff ff2d 	bl	1b5c <mem_manage_fault>
    1d02:	4604      	mov	r4, r0
		break;
    1d04:	e01a      	b.n	1d3c <z_arm_fault+0xf8>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d08:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1d0c:	d005      	beq.n	1d1a <z_arm_fault+0xd6>
			reason = bus_fault(esf, 1, recoverable);
    1d0e:	f10d 0107 	add.w	r1, sp, #7
    1d12:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1d14:	f7ff ff78 	bl	1c08 <bus_fault.constprop.0>
    1d18:	e7f3      	b.n	1d02 <z_arm_fault+0xbe>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d1c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    1d20:	d324      	bcc.n	1d6c <z_arm_fault+0x128>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1d30:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1d34:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1d38:	629a      	str	r2, [r3, #40]	; 0x28
	*nested_exc = false;
    1d3a:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1d3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1d40:	b993      	cbnz	r3, 1d68 <z_arm_fault+0x124>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1d42:	2220      	movs	r2, #32
    1d44:	4629      	mov	r1, r5
    1d46:	a802      	add	r0, sp, #8
    1d48:	f005 f9e4 	bl	7114 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d4e:	b38e      	cbz	r6, 1db4 <z_arm_fault+0x170>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1d54:	b922      	cbnz	r2, 1d60 <z_arm_fault+0x11c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1d56:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1d5a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1d5e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1d60:	a902      	add	r1, sp, #8
    1d62:	4620      	mov	r0, r4
    1d64:	f005 f9ab 	bl	70be <z_arm_fatal_error>
}
    1d68:	b00a      	add	sp, #40	; 0x28
    1d6a:	bd70      	pop	{r4, r5, r6, pc}
			__ASSERT(0,
    1d6c:	4919      	ldr	r1, [pc, #100]	; (1dd4 <z_arm_fault+0x190>)
    1d6e:	4a16      	ldr	r2, [pc, #88]	; (1dc8 <z_arm_fault+0x184>)
    1d70:	4816      	ldr	r0, [pc, #88]	; (1dcc <z_arm_fault+0x188>)
    1d72:	f240 23f2 	movw	r3, #754	; 0x2f2
    1d76:	f005 f990 	bl	709a <assert_print>
    1d7a:	4817      	ldr	r0, [pc, #92]	; (1dd8 <z_arm_fault+0x194>)
    1d7c:	f005 f98d 	bl	709a <assert_print>
    1d80:	f240 21f2 	movw	r1, #754	; 0x2f2
    1d84:	e784      	b.n	1c90 <z_arm_fault+0x4c>
		__ASSERT(0,
    1d86:	4913      	ldr	r1, [pc, #76]	; (1dd4 <z_arm_fault+0x190>)
    1d88:	4a0f      	ldr	r2, [pc, #60]	; (1dc8 <z_arm_fault+0x184>)
    1d8a:	4810      	ldr	r0, [pc, #64]	; (1dcc <z_arm_fault+0x188>)
    1d8c:	f240 23f6 	movw	r3, #758	; 0x2f6
    1d90:	f005 f983 	bl	709a <assert_print>
    1d94:	4811      	ldr	r0, [pc, #68]	; (1ddc <z_arm_fault+0x198>)
    1d96:	f005 f980 	bl	709a <assert_print>
    1d9a:	f240 21f6 	movw	r1, #758	; 0x2f6
    1d9e:	e777      	b.n	1c90 <z_arm_fault+0x4c>
		reason = mem_manage_fault(esf, 0, recoverable);
    1da0:	f10d 0207 	add.w	r2, sp, #7
    1da4:	2100      	movs	r1, #0
    1da6:	e7a9      	b.n	1cfc <z_arm_fault+0xb8>
		reason = bus_fault(esf, 0, recoverable);
    1da8:	f10d 0107 	add.w	r1, sp, #7
    1dac:	2000      	movs	r0, #0
    1dae:	e7b1      	b.n	1d14 <z_arm_fault+0xd0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1db0:	4b03      	ldr	r3, [pc, #12]	; (1dc0 <z_arm_fault+0x17c>)
    1db2:	e7b6      	b.n	1d22 <z_arm_fault+0xde>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1db4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1db8:	f023 0301 	bic.w	r3, r3, #1
    1dbc:	e7cf      	b.n	1d5e <z_arm_fault+0x11a>
    1dbe:	bf00      	nop
    1dc0:	e000ed00 	.word	0xe000ed00
    1dc4:	0000831e 	.word	0x0000831e
    1dc8:	00008277 	.word	0x00008277
    1dcc:	00007ea3 	.word	0x00007ea3
    1dd0:	00008331 	.word	0x00008331
    1dd4:	000080a0 	.word	0x000080a0
    1dd8:	0000836f 	.word	0x0000836f
    1ddc:	00008393 	.word	0x00008393

00001de0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1de0:	4a02      	ldr	r2, [pc, #8]	; (1dec <z_arm_fault_init+0xc>)
    1de2:	6953      	ldr	r3, [r2, #20]
    1de4:	f043 0310 	orr.w	r3, r3, #16
    1de8:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1dea:	4770      	bx	lr
    1dec:	e000ed00 	.word	0xe000ed00

00001df0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1df0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1df4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1df8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1dfa:	4672      	mov	r2, lr
	bl z_arm_fault
    1dfc:	f7ff ff22 	bl	1c44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1e00:	bd01      	pop	{r0, pc}
    1e02:	bf00      	nop

00001e04 <z_arm_interrupt_init>:
    1e04:	4804      	ldr	r0, [pc, #16]	; (1e18 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1e06:	2300      	movs	r3, #0
    1e08:	2120      	movs	r1, #32
    1e0a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1e0c:	3301      	adds	r3, #1
    1e0e:	2b30      	cmp	r3, #48	; 0x30
    1e10:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1e14:	d1f9      	bne.n	1e0a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1e16:	4770      	bx	lr
    1e18:	e000e100 	.word	0xe000e100

00001e1c <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1e1c:	2000      	movs	r0, #0
    msr CONTROL, r0
    1e1e:	f380 8814 	msr	CONTROL, r0
    isb
    1e22:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1e26:	f7ff fab5 	bl	1394 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1e2a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1e2c:	490d      	ldr	r1, [pc, #52]	; (1e64 <__start+0x48>)
    str r0, [r1]
    1e2e:	6008      	str	r0, [r1, #0]
    dsb
    1e30:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e34:	480c      	ldr	r0, [pc, #48]	; (1e68 <__start+0x4c>)
    msr msp, r0
    1e36:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1e3a:	f000 f82b 	bl	1e94 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1e3e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1e40:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1e44:	4809      	ldr	r0, [pc, #36]	; (1e6c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1e46:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1e4a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1e4c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1e50:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1e54:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1e56:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1e58:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1e5c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1e60:	f7ff fd96 	bl	1990 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1e64:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1e68:	20002780 	.word	0x20002780
    ldr r0, =z_interrupt_stacks
    1e6c:	200019c0 	.word	0x200019c0

00001e70 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1e70:	4907      	ldr	r1, [pc, #28]	; (1e90 <z_arm_clear_arm_mpu_config+0x20>)
    1e72:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1e76:	2300      	movs	r3, #0
	int num_regions =
    1e78:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1e7c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1e7e:	4293      	cmp	r3, r2
    1e80:	db00      	blt.n	1e84 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1e82:	4770      	bx	lr
  MPU->RNR = rnr;
    1e84:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1e88:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1e8c:	3301      	adds	r3, #1
    1e8e:	e7f6      	b.n	1e7e <z_arm_clear_arm_mpu_config+0xe>
    1e90:	e000ed00 	.word	0xe000ed00

00001e94 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1e94:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1e96:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1e98:	2300      	movs	r3, #0
    1e9a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1e9e:	f7ff ffe7 	bl	1e70 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1ea2:	4b14      	ldr	r3, [pc, #80]	; (1ef4 <z_arm_init_arch_hw_at_boot+0x60>)
    1ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1eb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1eb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1ebc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1ec0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1ec4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1ec8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1ecc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1ed0:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1ed4:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1ed8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1edc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ee0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1ee4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1ee8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1eea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1eee:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1ef2:	bd08      	pop	{r3, pc}
    1ef4:	e000e100 	.word	0xe000e100

00001ef8 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1ef8:	4b08      	ldr	r3, [pc, #32]	; (1f1c <z_impl_k_thread_abort+0x24>)
    1efa:	689b      	ldr	r3, [r3, #8]
    1efc:	4283      	cmp	r3, r0
    1efe:	d10b      	bne.n	1f18 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1f00:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1f04:	b143      	cbz	r3, 1f18 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1f06:	4b06      	ldr	r3, [pc, #24]	; (1f20 <z_impl_k_thread_abort+0x28>)
    1f08:	685a      	ldr	r2, [r3, #4]
    1f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1f0e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1f16:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1f18:	f004 b9c8 	b.w	62ac <z_thread_abort>
    1f1c:	20000af8 	.word	0x20000af8
    1f20:	e000ed00 	.word	0xe000ed00

00001f24 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1f24:	4b02      	ldr	r3, [pc, #8]	; (1f30 <z_arm_configure_static_mpu_regions+0xc>)
    1f26:	4a03      	ldr	r2, [pc, #12]	; (1f34 <z_arm_configure_static_mpu_regions+0x10>)
    1f28:	4803      	ldr	r0, [pc, #12]	; (1f38 <z_arm_configure_static_mpu_regions+0x14>)
    1f2a:	2101      	movs	r1, #1
    1f2c:	f000 b870 	b.w	2010 <arm_core_mpu_configure_static_mpu_regions>
    1f30:	20040000 	.word	0x20040000
    1f34:	20000000 	.word	0x20000000
    1f38:	00007bf4 	.word	0x00007bf4

00001f3c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1f3c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1f3e:	4b05      	ldr	r3, [pc, #20]	; (1f54 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1f40:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    1f42:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1f44:	4a04      	ldr	r2, [pc, #16]	; (1f58 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1f46:	2140      	movs	r1, #64	; 0x40
    1f48:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1f4c:	4618      	mov	r0, r3
    1f4e:	2101      	movs	r1, #1
    1f50:	f000 b884 	b.w	205c <arm_core_mpu_configure_dynamic_mpu_regions>
    1f54:	2000096c 	.word	0x2000096c
    1f58:	150b0000 	.word	0x150b0000

00001f5c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1f5e:	4e20      	ldr	r6, [pc, #128]	; (1fe0 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1f60:	2500      	movs	r5, #0
    1f62:	428d      	cmp	r5, r1
    1f64:	da39      	bge.n	1fda <mpu_configure_regions+0x7e>
		if (regions[i].size == 0U) {
    1f66:	6844      	ldr	r4, [r0, #4]
    1f68:	b374      	cbz	r4, 1fc8 <mpu_configure_regions+0x6c>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1f6a:	b153      	cbz	r3, 1f82 <mpu_configure_regions+0x26>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1f6c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1f70:	ea14 0f0c 	tst.w	r4, ip
    1f74:	d12f      	bne.n	1fd6 <mpu_configure_regions+0x7a>
		&&
    1f76:	2c1f      	cmp	r4, #31
    1f78:	d92d      	bls.n	1fd6 <mpu_configure_regions+0x7a>
		((part->start & (part->size - 1U)) == 0U);
    1f7a:	6807      	ldr	r7, [r0, #0]
		&&
    1f7c:	ea1c 0f07 	tst.w	ip, r7
    1f80:	d129      	bne.n	1fd6 <mpu_configure_regions+0x7a>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1f82:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1f84:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1f86:	f8d0 c008 	ldr.w	ip, [r0, #8]
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1f8a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    1f8e:	d91e      	bls.n	1fce <mpu_configure_regions+0x72>
	if (size > (1UL << 31)) {
    1f90:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1f94:	d81d      	bhi.n	1fd2 <mpu_configure_regions+0x76>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1f96:	3c01      	subs	r4, #1
    1f98:	fab4 f484 	clz	r4, r4
    1f9c:	f1c4 041f 	rsb	r4, r4, #31
    1fa0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1fa2:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1fa6:	ea4c 0c04 	orr.w	ip, ip, r4
    1faa:	d814      	bhi.n	1fd6 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fac:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    1fb0:	4314      	orrs	r4, r2
    1fb2:	f044 0410 	orr.w	r4, r4, #16
    1fb6:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1fba:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1fbe:	f04c 0401 	orr.w	r4, ip, #1
    1fc2:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		if (reg_index == -EINVAL) {
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    1fc6:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    1fc8:	3501      	adds	r5, #1
    1fca:	300c      	adds	r0, #12
    1fcc:	e7c9      	b.n	1f62 <mpu_configure_regions+0x6>
		return REGION_32B;
    1fce:	2408      	movs	r4, #8
    1fd0:	e7e7      	b.n	1fa2 <mpu_configure_regions+0x46>
		return REGION_4G;
    1fd2:	243e      	movs	r4, #62	; 0x3e
    1fd4:	e7e5      	b.n	1fa2 <mpu_configure_regions+0x46>
			return -EINVAL;
    1fd6:	f06f 0215 	mvn.w	r2, #21
	}

	return reg_index;
}
    1fda:	4610      	mov	r0, r2
    1fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fde:	bf00      	nop
    1fe0:	e000ed00 	.word	0xe000ed00

00001fe4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1fe4:	4b04      	ldr	r3, [pc, #16]	; (1ff8 <arm_core_mpu_enable+0x14>)
    1fe6:	2205      	movs	r2, #5
    1fe8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1fec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ff0:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1ff4:	4770      	bx	lr
    1ff6:	bf00      	nop
    1ff8:	e000ed00 	.word	0xe000ed00

00001ffc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1ffc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2000:	4b02      	ldr	r3, [pc, #8]	; (200c <arm_core_mpu_disable+0x10>)
    2002:	2200      	movs	r2, #0
    2004:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2008:	4770      	bx	lr
    200a:	bf00      	nop
    200c:	e000ed00 	.word	0xe000ed00

00002010 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2010:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2012:	4d0d      	ldr	r5, [pc, #52]	; (2048 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2014:	2301      	movs	r3, #1
    2016:	782a      	ldrb	r2, [r5, #0]
    2018:	f7ff ffa0 	bl	1f5c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    201c:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    201e:	3016      	adds	r0, #22
{
    2020:	460c      	mov	r4, r1
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2022:	d10f      	bne.n	2044 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2024:	4a09      	ldr	r2, [pc, #36]	; (204c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    2026:	490a      	ldr	r1, [pc, #40]	; (2050 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2028:	480a      	ldr	r0, [pc, #40]	; (2054 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    202a:	f44f 738d 	mov.w	r3, #282	; 0x11a
    202e:	f005 f834 	bl	709a <assert_print>
    2032:	4809      	ldr	r0, [pc, #36]	; (2058 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2034:	4621      	mov	r1, r4
    2036:	f005 f830 	bl	709a <assert_print>
    203a:	4804      	ldr	r0, [pc, #16]	; (204c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
    203c:	f44f 718d 	mov.w	r1, #282	; 0x11a
    2040:	f005 f824 	bl	708c <assert_post_action>
			regions_num);
	}
}
    2044:	bd38      	pop	{r3, r4, r5, pc}
    2046:	bf00      	nop
    2048:	20000d19 	.word	0x20000d19
    204c:	000083c7 	.word	0x000083c7
    2050:	000080a0 	.word	0x000080a0
    2054:	00007ea3 	.word	0x00007ea3
    2058:	000083fe 	.word	0x000083fe

0000205c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    205c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    205e:	4a11      	ldr	r2, [pc, #68]	; (20a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x48>)
    2060:	2300      	movs	r3, #0
    2062:	7812      	ldrb	r2, [r2, #0]
    2064:	f7ff ff7a 	bl	1f5c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2068:	f110 0f16 	cmn.w	r0, #22
    206c:	460c      	mov	r4, r1
    206e:	d003      	beq.n	2078 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
  MPU->RNR = rnr;
    2070:	4a0d      	ldr	r2, [pc, #52]	; (20a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2072:	2807      	cmp	r0, #7
    2074:	dd10      	ble.n	2098 <arm_core_mpu_configure_dynamic_mpu_regions+0x3c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2076:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2078:	4a0c      	ldr	r2, [pc, #48]	; (20ac <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    207a:	490d      	ldr	r1, [pc, #52]	; (20b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    207c:	480d      	ldr	r0, [pc, #52]	; (20b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    207e:	f240 1339 	movw	r3, #313	; 0x139
    2082:	f005 f80a 	bl	709a <assert_print>
    2086:	480c      	ldr	r0, [pc, #48]	; (20b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2088:	4621      	mov	r1, r4
    208a:	f005 f806 	bl	709a <assert_print>
    208e:	4807      	ldr	r0, [pc, #28]	; (20ac <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    2090:	f240 1139 	movw	r1, #313	; 0x139
    2094:	f004 fffa 	bl	708c <assert_post_action>
    2098:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    209c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    20a0:	3001      	adds	r0, #1
    20a2:	e7e6      	b.n	2072 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    20a4:	20000d19 	.word	0x20000d19
    20a8:	e000ed00 	.word	0xe000ed00
    20ac:	000083c7 	.word	0x000083c7
    20b0:	000080a0 	.word	0x000080a0
    20b4:	00007ea3 	.word	0x00007ea3
    20b8:	0000842a 	.word	0x0000842a

000020bc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    20bc:	4925      	ldr	r1, [pc, #148]	; (2154 <z_arm_mpu_init+0x98>)
{
    20be:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    20c0:	680c      	ldr	r4, [r1, #0]
    20c2:	2c08      	cmp	r4, #8
    20c4:	d910      	bls.n	20e8 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    20c6:	4a24      	ldr	r2, [pc, #144]	; (2158 <z_arm_mpu_init+0x9c>)
    20c8:	4924      	ldr	r1, [pc, #144]	; (215c <z_arm_mpu_init+0xa0>)
    20ca:	4825      	ldr	r0, [pc, #148]	; (2160 <z_arm_mpu_init+0xa4>)
    20cc:	f240 1351 	movw	r3, #337	; 0x151
    20d0:	f004 ffe3 	bl	709a <assert_print>
    20d4:	4621      	mov	r1, r4
    20d6:	4823      	ldr	r0, [pc, #140]	; (2164 <z_arm_mpu_init+0xa8>)
    20d8:	2208      	movs	r2, #8
    20da:	f004 ffde 	bl	709a <assert_print>
    20de:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
    20e2:	481d      	ldr	r0, [pc, #116]	; (2158 <z_arm_mpu_init+0x9c>)
    20e4:	f004 ffd2 	bl	708c <assert_post_action>
	arm_core_mpu_disable();
    20e8:	f7ff ff88 	bl	1ffc <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    20ec:	6848      	ldr	r0, [r1, #4]
    20ee:	491e      	ldr	r1, [pc, #120]	; (2168 <z_arm_mpu_init+0xac>)
    20f0:	2200      	movs	r2, #0
    20f2:	4294      	cmp	r4, r2
    20f4:	f100 000c 	add.w	r0, r0, #12
    20f8:	d116      	bne.n	2128 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
    20fa:	4b1c      	ldr	r3, [pc, #112]	; (216c <z_arm_mpu_init+0xb0>)
    20fc:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    20fe:	f7ff ff71 	bl	1fe4 <arm_core_mpu_enable>
	__ASSERT(
    2102:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    2106:	f3c3 2307 	ubfx	r3, r3, #8, #8
    210a:	2b08      	cmp	r3, #8
    210c:	d01f      	beq.n	214e <z_arm_mpu_init+0x92>
    210e:	4918      	ldr	r1, [pc, #96]	; (2170 <z_arm_mpu_init+0xb4>)
    2110:	4a11      	ldr	r2, [pc, #68]	; (2158 <z_arm_mpu_init+0x9c>)
    2112:	4813      	ldr	r0, [pc, #76]	; (2160 <z_arm_mpu_init+0xa4>)
    2114:	f240 13b7 	movw	r3, #439	; 0x1b7
    2118:	f004 ffbf 	bl	709a <assert_print>
    211c:	4815      	ldr	r0, [pc, #84]	; (2174 <z_arm_mpu_init+0xb8>)
    211e:	f004 ffbc 	bl	709a <assert_print>
    2122:	f240 11b7 	movw	r1, #439	; 0x1b7
    2126:	e7dc      	b.n	20e2 <z_arm_mpu_init+0x26>
    2128:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    212c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2130:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2134:	4313      	orrs	r3, r2
    2136:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    213a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    213e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2142:	f043 0301 	orr.w	r3, r3, #1
    2146:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    214a:	3201      	adds	r2, #1
    214c:	e7d1      	b.n	20f2 <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    214e:	2000      	movs	r0, #0
    2150:	bd10      	pop	{r4, pc}
    2152:	bf00      	nop
    2154:	00007c00 	.word	0x00007c00
    2158:	000083c7 	.word	0x000083c7
    215c:	000080a0 	.word	0x000080a0
    2160:	00007ea3 	.word	0x00007ea3
    2164:	00008457 	.word	0x00008457
    2168:	e000ed00 	.word	0xe000ed00
    216c:	20000d19 	.word	0x20000d19
    2170:	0000848b 	.word	0x0000848b
    2174:	000084db 	.word	0x000084db

00002178 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2178:	4b01      	ldr	r3, [pc, #4]	; (2180 <__stdout_hook_install+0x8>)
    217a:	6018      	str	r0, [r3, #0]
}
    217c:	4770      	bx	lr
    217e:	bf00      	nop
    2180:	2000002c 	.word	0x2000002c

00002184 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2184:	b510      	push	{r4, lr}
	__asm__ volatile(
    2186:	f04f 0320 	mov.w	r3, #32
    218a:	f3ef 8011 	mrs	r0, BASEPRI
    218e:	f383 8812 	msr	BASEPRI_MAX, r3
    2192:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2196:	4a11      	ldr	r2, [pc, #68]	; (21dc <nordicsemi_nrf52_init+0x58>)
    2198:	2301      	movs	r3, #1
    219a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    219e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    21a2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    21a6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    21aa:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    21ae:	2c08      	cmp	r4, #8
    21b0:	d108      	bne.n	21c4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    21b2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    21b6:	2905      	cmp	r1, #5
    21b8:	d804      	bhi.n	21c4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    21ba:	4c09      	ldr	r4, [pc, #36]	; (21e0 <nordicsemi_nrf52_init+0x5c>)
    21bc:	5c61      	ldrb	r1, [r4, r1]
    21be:	b109      	cbz	r1, 21c4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    21c0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    21c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21c8:	2201      	movs	r2, #1
    21ca:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    21ce:	f380 8811 	msr	BASEPRI, r0
    21d2:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    21d6:	2000      	movs	r0, #0
    21d8:	bd10      	pop	{r4, pc}
    21da:	bf00      	nop
    21dc:	4001e000 	.word	0x4001e000
    21e0:	0000850b 	.word	0x0000850b

000021e4 <sys_arch_reboot>:
    *p_gpregret = val;
    21e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21e8:	b2c0      	uxtb	r0, r0
    21ea:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    21ee:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    21f2:	4905      	ldr	r1, [pc, #20]	; (2208 <sys_arch_reboot+0x24>)
    21f4:	4b05      	ldr	r3, [pc, #20]	; (220c <sys_arch_reboot+0x28>)
    21f6:	68ca      	ldr	r2, [r1, #12]
    21f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    21fc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    21fe:	60cb      	str	r3, [r1, #12]
    2200:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2204:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2206:	e7fd      	b.n	2204 <sys_arch_reboot+0x20>
    2208:	e000ed00 	.word	0xe000ed00
    220c:	05fa0004 	.word	0x05fa0004

00002210 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2210:	b120      	cbz	r0, 221c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2212:	4b03      	ldr	r3, [pc, #12]	; (2220 <arch_busy_wait+0x10>)
    2214:	0180      	lsls	r0, r0, #6
    2216:	f043 0301 	orr.w	r3, r3, #1
    221a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    221c:	4770      	bx	lr
    221e:	bf00      	nop
    2220:	00007bc0 	.word	0x00007bc0

00002224 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2224:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2226:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2228:	490a      	ldr	r1, [pc, #40]	; (2254 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    222a:	4a0b      	ldr	r2, [pc, #44]	; (2258 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    222c:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    222e:	2340      	movs	r3, #64	; 0x40
    2230:	9300      	str	r3, [sp, #0]
    2232:	1149      	asrs	r1, r1, #5
{
    2234:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2236:	4623      	mov	r3, r4
    2238:	4808      	ldr	r0, [pc, #32]	; (225c <onoff_start+0x38>)
    223a:	f004 ffa7 	bl	718c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    223e:	1e01      	subs	r1, r0, #0
    2240:	da05      	bge.n	224e <onoff_start+0x2a>
		notify(mgr, err);
    2242:	4628      	mov	r0, r5
    2244:	4623      	mov	r3, r4
	}
}
    2246:	b003      	add	sp, #12
    2248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    224c:	4718      	bx	r3
}
    224e:	b003      	add	sp, #12
    2250:	bd30      	pop	{r4, r5, pc}
    2252:	bf00      	nop
    2254:	2000098c 	.word	0x2000098c
    2258:	000071f9 	.word	0x000071f9
    225c:	00007918 	.word	0x00007918

00002260 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2260:	b2c9      	uxtb	r1, r1
    2262:	2901      	cmp	r1, #1
{
    2264:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    2266:	d909      	bls.n	227c <get_status+0x1c>
    2268:	4908      	ldr	r1, [pc, #32]	; (228c <get_status+0x2c>)
    226a:	4809      	ldr	r0, [pc, #36]	; (2290 <get_status+0x30>)
    226c:	4a09      	ldr	r2, [pc, #36]	; (2294 <get_status+0x34>)
    226e:	237a      	movs	r3, #122	; 0x7a
    2270:	f004 ff13 	bl	709a <assert_print>
    2274:	4807      	ldr	r0, [pc, #28]	; (2294 <get_status+0x34>)
    2276:	217a      	movs	r1, #122	; 0x7a
    2278:	f004 ff08 	bl	708c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    227c:	6903      	ldr	r3, [r0, #16]
    227e:	220c      	movs	r2, #12
    2280:	fb01 3302 	mla	r3, r1, r2, r3
    2284:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
    2286:	f000 0007 	and.w	r0, r0, #7
    228a:	bd08      	pop	{r3, pc}
    228c:	00008552 	.word	0x00008552
    2290:	00007ea3 	.word	0x00007ea3
    2294:	00008515 	.word	0x00008515

00002298 <stop>:
{
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    229c:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
    229e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    22a0:	d90b      	bls.n	22ba <stop+0x22>
    22a2:	4919      	ldr	r1, [pc, #100]	; (2308 <stop+0x70>)
    22a4:	4819      	ldr	r0, [pc, #100]	; (230c <stop+0x74>)
    22a6:	4a1a      	ldr	r2, [pc, #104]	; (2310 <stop+0x78>)
    22a8:	f240 135d 	movw	r3, #349	; 0x15d
    22ac:	f004 fef5 	bl	709a <assert_print>
    22b0:	4817      	ldr	r0, [pc, #92]	; (2310 <stop+0x78>)
    22b2:	f240 115d 	movw	r1, #349	; 0x15d
    22b6:	f004 fee9 	bl	708c <assert_post_action>
	__asm__ volatile(
    22ba:	f04f 0420 	mov.w	r4, #32
    22be:	f3ef 8511 	mrs	r5, BASEPRI
    22c2:	f384 8812 	msr	BASEPRI_MAX, r4
    22c6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    22ca:	260c      	movs	r6, #12
    22cc:	fb06 3401 	mla	r4, r6, r1, r3
    22d0:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    22d2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    22d6:	d008      	beq.n	22ea <stop+0x52>
    22d8:	42a2      	cmp	r2, r4
    22da:	d006      	beq.n	22ea <stop+0x52>
	__asm__ volatile(
    22dc:	f385 8811 	msr	BASEPRI, r5
    22e0:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    22e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    22e8:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    22ea:	fb06 3301 	mla	r3, r6, r1, r3
    22ee:	2201      	movs	r2, #1
    22f0:	649a      	str	r2, [r3, #72]	; 0x48
    22f2:	f385 8811 	msr	BASEPRI, r5
    22f6:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    22fa:	6843      	ldr	r3, [r0, #4]
    22fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2300:	685b      	ldr	r3, [r3, #4]
    2302:	4798      	blx	r3
	return 0;
    2304:	2000      	movs	r0, #0
    2306:	e7ef      	b.n	22e8 <stop+0x50>
    2308:	00008552 	.word	0x00008552
    230c:	00007ea3 	.word	0x00007ea3
    2310:	00008515 	.word	0x00008515

00002314 <onoff_stop>:
{
    2314:	b570      	push	{r4, r5, r6, lr}
    2316:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    2318:	4906      	ldr	r1, [pc, #24]	; (2334 <onoff_stop+0x20>)
    231a:	1a41      	subs	r1, r0, r1
{
    231c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    231e:	1149      	asrs	r1, r1, #5
    2320:	4805      	ldr	r0, [pc, #20]	; (2338 <onoff_stop+0x24>)
    2322:	2240      	movs	r2, #64	; 0x40
    2324:	f7ff ffb8 	bl	2298 <stop>
	notify(mgr, res);
    2328:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    232a:	4601      	mov	r1, r0
	notify(mgr, res);
    232c:	4620      	mov	r0, r4
}
    232e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2332:	4718      	bx	r3
    2334:	2000098c 	.word	0x2000098c
    2338:	00007918 	.word	0x00007918

0000233c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    233c:	2200      	movs	r2, #0
{
    233e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2340:	2101      	movs	r1, #1
{
    2342:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2344:	4610      	mov	r0, r2
    2346:	f7ff faeb 	bl	1920 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    234a:	480f      	ldr	r0, [pc, #60]	; (2388 <clk_init+0x4c>)
    234c:	f001 f992 	bl	3674 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2350:	4b0e      	ldr	r3, [pc, #56]	; (238c <clk_init+0x50>)
    2352:	4298      	cmp	r0, r3
    2354:	d115      	bne.n	2382 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2356:	f001 f9b1 	bl	36bc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    235a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    235c:	490c      	ldr	r1, [pc, #48]	; (2390 <clk_init+0x54>)
    235e:	4630      	mov	r0, r6
    2360:	f004 fe13 	bl	6f8a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2364:	2800      	cmp	r0, #0
    2366:	db0b      	blt.n	2380 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2368:	2501      	movs	r5, #1
    236a:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
    236c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    236e:	4908      	ldr	r1, [pc, #32]	; (2390 <clk_init+0x54>)
    2370:	f104 0020 	add.w	r0, r4, #32
    2374:	f004 fe09 	bl	6f8a <onoff_manager_init>
		if (err < 0) {
    2378:	2800      	cmp	r0, #0
    237a:	db01      	blt.n	2380 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    237c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    237e:	2000      	movs	r0, #0
}
    2380:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2382:	f06f 0004 	mvn.w	r0, #4
    2386:	e7fb      	b.n	2380 <clk_init+0x44>
    2388:	000023c9 	.word	0x000023c9
    238c:	0bad0000 	.word	0x0bad0000
    2390:	00007c20 	.word	0x00007c20

00002394 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2394:	b570      	push	{r4, r5, r6, lr}
    2396:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2398:	230c      	movs	r3, #12
    239a:	4809      	ldr	r0, [pc, #36]	; (23c0 <clkstarted_handle.constprop.0+0x2c>)
    239c:	434b      	muls	r3, r1
    239e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    23a0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    23a4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    23a6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    23a8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    23aa:	4418      	add	r0, r3
    23ac:	f004 fedb 	bl	7166 <set_on_state>
	if (callback) {
    23b0:	b12d      	cbz	r5, 23be <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    23b2:	4632      	mov	r2, r6
    23b4:	462b      	mov	r3, r5
    23b6:	4803      	ldr	r0, [pc, #12]	; (23c4 <clkstarted_handle.constprop.0+0x30>)
}
    23b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    23bc:	4718      	bx	r3
}
    23be:	bd70      	pop	{r4, r5, r6, pc}
    23c0:	2000098c 	.word	0x2000098c
    23c4:	00007918 	.word	0x00007918

000023c8 <clock_event_handler>:
	switch (event) {
    23c8:	2801      	cmp	r0, #1
{
    23ca:	b508      	push	{r3, lr}
	switch (event) {
    23cc:	d006      	beq.n	23dc <clock_event_handler+0x14>
    23ce:	2803      	cmp	r0, #3
    23d0:	d008      	beq.n	23e4 <clock_event_handler+0x1c>
    23d2:	b998      	cbnz	r0, 23fc <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    23d4:	4b0f      	ldr	r3, [pc, #60]	; (2414 <clock_event_handler+0x4c>)
    23d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    23d8:	075b      	lsls	r3, r3, #29
    23da:	d119      	bne.n	2410 <clock_event_handler+0x48>
}
    23dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    23e0:	f7ff bfd8 	b.w	2394 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    23e4:	490c      	ldr	r1, [pc, #48]	; (2418 <clock_event_handler+0x50>)
    23e6:	4a0d      	ldr	r2, [pc, #52]	; (241c <clock_event_handler+0x54>)
    23e8:	480d      	ldr	r0, [pc, #52]	; (2420 <clock_event_handler+0x58>)
    23ea:	f240 236e 	movw	r3, #622	; 0x26e
    23ee:	f004 fe54 	bl	709a <assert_print>
    23f2:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
    23f6:	4809      	ldr	r0, [pc, #36]	; (241c <clock_event_handler+0x54>)
    23f8:	f004 fe48 	bl	708c <assert_post_action>
    23fc:	4906      	ldr	r1, [pc, #24]	; (2418 <clock_event_handler+0x50>)
    23fe:	4a07      	ldr	r2, [pc, #28]	; (241c <clock_event_handler+0x54>)
    2400:	4807      	ldr	r0, [pc, #28]	; (2420 <clock_event_handler+0x58>)
    2402:	f240 2372 	movw	r3, #626	; 0x272
    2406:	f004 fe48 	bl	709a <assert_print>
    240a:	f240 2172 	movw	r1, #626	; 0x272
    240e:	e7f2      	b.n	23f6 <clock_event_handler+0x2e>
}
    2410:	bd08      	pop	{r3, pc}
    2412:	bf00      	nop
    2414:	2000098c 	.word	0x2000098c
    2418:	000080a0 	.word	0x000080a0
    241c:	00008515 	.word	0x00008515
    2420:	00007ea3 	.word	0x00007ea3

00002424 <generic_hfclk_start>:
{
    2424:	b508      	push	{r3, lr}
	__asm__ volatile(
    2426:	f04f 0320 	mov.w	r3, #32
    242a:	f3ef 8111 	mrs	r1, BASEPRI
    242e:	f383 8812 	msr	BASEPRI_MAX, r3
    2432:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2436:	4a12      	ldr	r2, [pc, #72]	; (2480 <generic_hfclk_start+0x5c>)
    2438:	6813      	ldr	r3, [r2, #0]
    243a:	f043 0002 	orr.w	r0, r3, #2
    243e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2440:	07da      	lsls	r2, r3, #31
    2442:	d408      	bmi.n	2456 <generic_hfclk_start+0x32>
	__asm__ volatile(
    2444:	f381 8811 	msr	BASEPRI, r1
    2448:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    244c:	2001      	movs	r0, #1
}
    244e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2452:	f001 b957 	b.w	3704 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    245a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    245e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2462:	07d3      	lsls	r3, r2, #31
    2464:	d5ee      	bpl.n	2444 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2466:	4807      	ldr	r0, [pc, #28]	; (2484 <generic_hfclk_start+0x60>)
    2468:	f004 fe7d 	bl	7166 <set_on_state>
    246c:	f381 8811 	msr	BASEPRI, r1
    2470:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    2474:	2000      	movs	r0, #0
}
    2476:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    247a:	f7ff bf8b 	b.w	2394 <clkstarted_handle.constprop.0>
    247e:	bf00      	nop
    2480:	200009e4 	.word	0x200009e4
    2484:	200009d4 	.word	0x200009d4

00002488 <api_blocking_start>:
{
    2488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    248a:	2200      	movs	r2, #0
    248c:	2301      	movs	r3, #1
    248e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2492:	4a09      	ldr	r2, [pc, #36]	; (24b8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2494:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2498:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    249a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    249e:	f004 fea4 	bl	71ea <api_start>
	if (err < 0) {
    24a2:	2800      	cmp	r0, #0
    24a4:	db05      	blt.n	24b2 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    24a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    24aa:	2300      	movs	r3, #0
    24ac:	4668      	mov	r0, sp
    24ae:	f002 fec1 	bl	5234 <z_impl_k_sem_take>
}
    24b2:	b005      	add	sp, #20
    24b4:	f85d fb04 	ldr.w	pc, [sp], #4
    24b8:	00007211 	.word	0x00007211

000024bc <generic_hfclk_stop>:
{
    24bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    24be:	f04f 0320 	mov.w	r3, #32
    24c2:	f3ef 8411 	mrs	r4, BASEPRI
    24c6:	f383 8812 	msr	BASEPRI_MAX, r3
    24ca:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    24ce:	4a07      	ldr	r2, [pc, #28]	; (24ec <generic_hfclk_stop+0x30>)
    24d0:	6813      	ldr	r3, [r2, #0]
    24d2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    24d6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    24d8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    24da:	d402      	bmi.n	24e2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    24dc:	2001      	movs	r0, #1
    24de:	f001 f96f 	bl	37c0 <nrfx_clock_stop>
	__asm__ volatile(
    24e2:	f384 8811 	msr	BASEPRI, r4
    24e6:	f3bf 8f6f 	isb	sy
}
    24ea:	bd10      	pop	{r4, pc}
    24ec:	200009e4 	.word	0x200009e4

000024f0 <z_nrf_clock_control_lf_on>:
{
    24f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    24f4:	4945      	ldr	r1, [pc, #276]	; (260c <z_nrf_clock_control_lf_on+0x11c>)
    24f6:	f3bf 8f5b 	dmb	ish
    24fa:	4606      	mov	r6, r0
    24fc:	2201      	movs	r2, #1
    24fe:	e851 3f00 	ldrex	r3, [r1]
    2502:	e841 2000 	strex	r0, r2, [r1]
    2506:	2800      	cmp	r0, #0
    2508:	d1f9      	bne.n	24fe <z_nrf_clock_control_lf_on+0xe>
    250a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    250e:	b9a3      	cbnz	r3, 253a <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2510:	493f      	ldr	r1, [pc, #252]	; (2610 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
    2512:	4840      	ldr	r0, [pc, #256]	; (2614 <z_nrf_clock_control_lf_on+0x124>)
    2514:	604b      	str	r3, [r1, #4]
    2516:	60cb      	str	r3, [r1, #12]
    2518:	608a      	str	r2, [r1, #8]
    251a:	f7fe fabd 	bl	a98 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    251e:	2800      	cmp	r0, #0
    2520:	da0b      	bge.n	253a <z_nrf_clock_control_lf_on+0x4a>
    2522:	493d      	ldr	r1, [pc, #244]	; (2618 <z_nrf_clock_control_lf_on+0x128>)
    2524:	4a3d      	ldr	r2, [pc, #244]	; (261c <z_nrf_clock_control_lf_on+0x12c>)
    2526:	483e      	ldr	r0, [pc, #248]	; (2620 <z_nrf_clock_control_lf_on+0x130>)
    2528:	f44f 730c 	mov.w	r3, #560	; 0x230
    252c:	f004 fdb5 	bl	709a <assert_print>
    2530:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
    2534:	4839      	ldr	r0, [pc, #228]	; (261c <z_nrf_clock_control_lf_on+0x12c>)
    2536:	f004 fda9 	bl	708c <assert_post_action>
	switch (start_mode) {
    253a:	b376      	cbz	r6, 259a <z_nrf_clock_control_lf_on+0xaa>
    253c:	1e73      	subs	r3, r6, #1
    253e:	2b01      	cmp	r3, #1
    2540:	d859      	bhi.n	25f6 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2542:	2e01      	cmp	r6, #1
    2544:	d107      	bne.n	2556 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    254a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    254e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2552:	2b01      	cmp	r3, #1
    2554:	d021      	beq.n	259a <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2556:	f005 f95e 	bl	7816 <k_is_in_isr>
    255a:	4605      	mov	r5, r0
    255c:	b9f8      	cbnz	r0, 259e <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
    255e:	4b31      	ldr	r3, [pc, #196]	; (2624 <z_nrf_clock_control_lf_on+0x134>)
    2560:	781b      	ldrb	r3, [r3, #0]
    2562:	b1e3      	cbz	r3, 259e <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
    2564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2568:	2202      	movs	r2, #2
    256a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    256e:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2570:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 2628 <z_nrf_clock_control_lf_on+0x138>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2574:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2578:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    257c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2580:	03d2      	lsls	r2, r2, #15
    2582:	d516      	bpl.n	25b2 <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2584:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2588:	2b01      	cmp	r3, #1
    258a:	d001      	beq.n	2590 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    258c:	2e01      	cmp	r6, #1
    258e:	d110      	bne.n	25b2 <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
    2590:	b35d      	cbz	r5, 25ea <z_nrf_clock_control_lf_on+0xfa>
    2592:	f387 8811 	msr	BASEPRI, r7
    2596:	f3bf 8f6f 	isb	sy
}
    259a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    259e:	f04f 0320 	mov.w	r3, #32
    25a2:	f3ef 8711 	mrs	r7, BASEPRI
    25a6:	f383 8812 	msr	BASEPRI_MAX, r3
    25aa:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    25ae:	2501      	movs	r5, #1
    25b0:	e7de      	b.n	2570 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    25b2:	b1ad      	cbz	r5, 25e0 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    25b4:	4638      	mov	r0, r7
    25b6:	f7ff f98b 	bl	18d0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    25ba:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    25be:	2b00      	cmp	r3, #0
    25c0:	d1da      	bne.n	2578 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    25c2:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    25c6:	2a00      	cmp	r2, #0
    25c8:	d0d6      	beq.n	2578 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25ca:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    25ce:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    25d2:	2301      	movs	r3, #1
    25d4:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    25d8:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25dc:	60a3      	str	r3, [r4, #8]
}
    25de:	e7cb      	b.n	2578 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
    25e0:	2100      	movs	r1, #0
    25e2:	2021      	movs	r0, #33	; 0x21
    25e4:	f003 fe28 	bl	6238 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    25e8:	e7e7      	b.n	25ba <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
    25ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25ee:	2202      	movs	r2, #2
    25f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    25f4:	e7d1      	b.n	259a <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
    25f6:	490d      	ldr	r1, [pc, #52]	; (262c <z_nrf_clock_control_lf_on+0x13c>)
    25f8:	4a08      	ldr	r2, [pc, #32]	; (261c <z_nrf_clock_control_lf_on+0x12c>)
    25fa:	4809      	ldr	r0, [pc, #36]	; (2620 <z_nrf_clock_control_lf_on+0x130>)
    25fc:	f240 2342 	movw	r3, #578	; 0x242
    2600:	f004 fd4b 	bl	709a <assert_print>
    2604:	f240 2142 	movw	r1, #578	; 0x242
    2608:	e794      	b.n	2534 <z_nrf_clock_control_lf_on+0x44>
    260a:	bf00      	nop
    260c:	20000988 	.word	0x20000988
    2610:	20000978 	.word	0x20000978
    2614:	200009ac 	.word	0x200009ac
    2618:	00008576 	.word	0x00008576
    261c:	00008515 	.word	0x00008515
    2620:	00007ea3 	.word	0x00007ea3
    2624:	2000112e 	.word	0x2000112e
    2628:	e000e100 	.word	0xe000e100
    262c:	000080a0 	.word	0x000080a0

00002630 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2630:	b508      	push	{r3, lr}
    2632:	4807      	ldr	r0, [pc, #28]	; (2650 <uart_console_init+0x20>)
    2634:	f005 f8bb 	bl	77ae <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    2638:	b138      	cbz	r0, 264a <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    263a:	4806      	ldr	r0, [pc, #24]	; (2654 <uart_console_init+0x24>)
    263c:	f7ff fd9c 	bl	2178 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2640:	4804      	ldr	r0, [pc, #16]	; (2654 <uart_console_init+0x24>)
    2642:	f7fd ff83 	bl	54c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2646:	2000      	movs	r0, #0
}
    2648:	bd08      	pop	{r3, pc}
		return -ENODEV;
    264a:	f06f 0012 	mvn.w	r0, #18
    264e:	e7fb      	b.n	2648 <uart_console_init+0x18>
    2650:	00007978 	.word	0x00007978
    2654:	00002659 	.word	0x00002659

00002658 <console_out>:
	if ('\n' == c) {
    2658:	280a      	cmp	r0, #10
{
    265a:	b538      	push	{r3, r4, r5, lr}
    265c:	4d07      	ldr	r5, [pc, #28]	; (267c <console_out+0x24>)
    265e:	4604      	mov	r4, r0
	if ('\n' == c) {
    2660:	d104      	bne.n	266c <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2662:	68ab      	ldr	r3, [r5, #8]
    2664:	210d      	movs	r1, #13
    2666:	685b      	ldr	r3, [r3, #4]
    2668:	4628      	mov	r0, r5
    266a:	4798      	blx	r3
    266c:	68ab      	ldr	r3, [r5, #8]
    266e:	4803      	ldr	r0, [pc, #12]	; (267c <console_out+0x24>)
    2670:	685b      	ldr	r3, [r3, #4]
    2672:	b2e1      	uxtb	r1, r4
    2674:	4798      	blx	r3
}
    2676:	4620      	mov	r0, r4
    2678:	bd38      	pop	{r3, r4, r5, pc}
    267a:	bf00      	nop
    267c:	00007978 	.word	0x00007978

00002680 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    2680:	b510      	push	{r4, lr}
	return port->data;
    2682:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    2684:	b961      	cbnz	r1, 26a0 <gpio_nrfx_manage_callback+0x20>
    2686:	4920      	ldr	r1, [pc, #128]	; (2708 <gpio_nrfx_manage_callback+0x88>)
    2688:	4a20      	ldr	r2, [pc, #128]	; (270c <gpio_nrfx_manage_callback+0x8c>)
    268a:	4821      	ldr	r0, [pc, #132]	; (2710 <gpio_nrfx_manage_callback+0x90>)
    268c:	232a      	movs	r3, #42	; 0x2a
    268e:	f004 fd04 	bl	709a <assert_print>
    2692:	4820      	ldr	r0, [pc, #128]	; (2714 <gpio_nrfx_manage_callback+0x94>)
    2694:	f004 fd01 	bl	709a <assert_print>
    2698:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
    269a:	481c      	ldr	r0, [pc, #112]	; (270c <gpio_nrfx_manage_callback+0x8c>)
    269c:	f004 fcf6 	bl	708c <assert_post_action>
    26a0:	6848      	ldr	r0, [r1, #4]
    26a2:	b950      	cbnz	r0, 26ba <gpio_nrfx_manage_callback+0x3a>
    26a4:	491c      	ldr	r1, [pc, #112]	; (2718 <gpio_nrfx_manage_callback+0x98>)
    26a6:	4a19      	ldr	r2, [pc, #100]	; (270c <gpio_nrfx_manage_callback+0x8c>)
    26a8:	4819      	ldr	r0, [pc, #100]	; (2710 <gpio_nrfx_manage_callback+0x90>)
    26aa:	232b      	movs	r3, #43	; 0x2b
    26ac:	f004 fcf5 	bl	709a <assert_print>
    26b0:	481a      	ldr	r0, [pc, #104]	; (271c <gpio_nrfx_manage_callback+0x9c>)
    26b2:	f004 fcf2 	bl	709a <assert_print>
    26b6:	212b      	movs	r1, #43	; 0x2b
    26b8:	e7ef      	b.n	269a <gpio_nrfx_manage_callback+0x1a>
	return list->head;
    26ba:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
    26bc:	b1f8      	cbz	r0, 26fe <gpio_nrfx_manage_callback+0x7e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    26be:	4288      	cmp	r0, r1
    26c0:	d119      	bne.n	26f6 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
    26c2:	689c      	ldr	r4, [r3, #8]
	return node->next;
    26c4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    26c6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    26c8:	42a1      	cmp	r1, r4
    26ca:	d100      	bne.n	26ce <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
    26cc:	6098      	str	r0, [r3, #8]
	parent->next = child;
    26ce:	2000      	movs	r0, #0
    26d0:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
    26d2:	b12a      	cbz	r2, 26e0 <gpio_nrfx_manage_callback+0x60>
	return list->head;
    26d4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    26d6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    26d8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    26da:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    26dc:	b902      	cbnz	r2, 26e0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    26de:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    26e0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    26e2:	e010      	b.n	2706 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    26e4:	4281      	cmp	r1, r0
    26e6:	d106      	bne.n	26f6 <gpio_nrfx_manage_callback+0x76>
	return node->next;
    26e8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    26ea:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    26ec:	6898      	ldr	r0, [r3, #8]
    26ee:	4281      	cmp	r1, r0
    26f0:	d1ed      	bne.n	26ce <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
    26f2:	609c      	str	r4, [r3, #8]
}
    26f4:	e7eb      	b.n	26ce <gpio_nrfx_manage_callback+0x4e>
	return node->next;
    26f6:	4604      	mov	r4, r0
    26f8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    26fa:	2800      	cmp	r0, #0
    26fc:	d1f2      	bne.n	26e4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    26fe:	2a00      	cmp	r2, #0
    2700:	d1e8      	bne.n	26d4 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
    2702:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
    2706:	bd10      	pop	{r4, pc}
    2708:	000085d8 	.word	0x000085d8
    270c:	0000859c 	.word	0x0000859c
    2710:	00007ea3 	.word	0x00007ea3
    2714:	000085e1 	.word	0x000085e1
    2718:	000085f0 	.word	0x000085f0
    271c:	00008602 	.word	0x00008602

00002720 <gpio_nrfx_pin_interrupt_configure>:
{
    2720:	b530      	push	{r4, r5, lr}
	return port->config;
    2722:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2724:	7b05      	ldrb	r5, [r0, #12]
    2726:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    272a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    272e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2730:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2734:	d105      	bne.n	2742 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2736:	4620      	mov	r0, r4
    2738:	f001 fb54 	bl	3de4 <nrfx_gpiote_trigger_disable>
		return 0;
    273c:	2000      	movs	r0, #0
}
    273e:	b005      	add	sp, #20
    2740:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2742:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2744:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2748:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    274c:	d114      	bne.n	2778 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    274e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2752:	bf0c      	ite	eq
    2754:	2304      	moveq	r3, #4
    2756:	2305      	movne	r3, #5
    2758:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    275c:	2300      	movs	r3, #0
    275e:	4619      	mov	r1, r3
    2760:	aa02      	add	r2, sp, #8
    2762:	4620      	mov	r0, r4
    2764:	f001 f948 	bl	39f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2768:	4b2b      	ldr	r3, [pc, #172]	; (2818 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    276a:	4298      	cmp	r0, r3
    276c:	d151      	bne.n	2812 <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    276e:	2101      	movs	r1, #1
    2770:	4620      	mov	r0, r4
    2772:	f001 facb 	bl	3d0c <nrfx_gpiote_trigger_enable>
	return 0;
    2776:	e7e1      	b.n	273c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2778:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    277c:	d024      	beq.n	27c8 <gpio_nrfx_pin_interrupt_configure+0xa8>
    277e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2782:	bf14      	ite	ne
    2784:	2301      	movne	r3, #1
    2786:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2788:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    278c:	6883      	ldr	r3, [r0, #8]
    278e:	40cb      	lsrs	r3, r1
    2790:	07d8      	lsls	r0, r3, #31
    2792:	d4e3      	bmi.n	275c <gpio_nrfx_pin_interrupt_configure+0x3c>
    2794:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2798:	d1e0      	bne.n	275c <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    279a:	0962      	lsrs	r2, r4, #5
    279c:	f004 031f 	and.w	r3, r4, #31
    27a0:	d014      	beq.n	27cc <gpio_nrfx_pin_interrupt_configure+0xac>
    27a2:	2a01      	cmp	r2, #1
    27a4:	d104      	bne.n	27b0 <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
    27a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    27aa:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    27ac:	07d1      	lsls	r1, r2, #31
    27ae:	d415      	bmi.n	27dc <gpio_nrfx_pin_interrupt_configure+0xbc>
    27b0:	491a      	ldr	r1, [pc, #104]	; (281c <gpio_nrfx_pin_interrupt_configure+0xfc>)
    27b2:	481b      	ldr	r0, [pc, #108]	; (2820 <gpio_nrfx_pin_interrupt_configure+0x100>)
    27b4:	4a1b      	ldr	r2, [pc, #108]	; (2824 <gpio_nrfx_pin_interrupt_configure+0x104>)
    27b6:	f240 2347 	movw	r3, #583	; 0x247
    27ba:	f004 fc6e 	bl	709a <assert_print>
    27be:	4819      	ldr	r0, [pc, #100]	; (2824 <gpio_nrfx_pin_interrupt_configure+0x104>)
    27c0:	f240 2147 	movw	r1, #583	; 0x247
    27c4:	f004 fc62 	bl	708c <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    27c8:	2303      	movs	r3, #3
    27ca:	e7dd      	b.n	2788 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
    27cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    27d0:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    27d2:	07d2      	lsls	r2, r2, #31
    27d4:	d5ec      	bpl.n	27b0 <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
    27d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    27da:	e000      	b.n	27de <gpio_nrfx_pin_interrupt_configure+0xbe>
        case 1: return NRF_P1;
    27dc:	4a12      	ldr	r2, [pc, #72]	; (2828 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    27de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    27e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    27e6:	07db      	lsls	r3, r3, #31
    27e8:	d4b8      	bmi.n	275c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    27ea:	f10d 0507 	add.w	r5, sp, #7
    27ee:	4629      	mov	r1, r5
    27f0:	4620      	mov	r0, r4
    27f2:	f001 fa25 	bl	3c40 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    27f6:	4b0d      	ldr	r3, [pc, #52]	; (282c <gpio_nrfx_pin_interrupt_configure+0x10c>)
    27f8:	4298      	cmp	r0, r3
    27fa:	d001      	beq.n	2800 <gpio_nrfx_pin_interrupt_configure+0xe0>
		trigger_config.p_in_channel = &ch;
    27fc:	9503      	str	r5, [sp, #12]
    27fe:	e7ad      	b.n	275c <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
    2800:	4628      	mov	r0, r5
    2802:	f001 fa7d 	bl	3d00 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2806:	4b04      	ldr	r3, [pc, #16]	; (2818 <gpio_nrfx_pin_interrupt_configure+0xf8>)
    2808:	4298      	cmp	r0, r3
    280a:	d0f7      	beq.n	27fc <gpio_nrfx_pin_interrupt_configure+0xdc>
				return -ENOMEM;
    280c:	f06f 000b 	mvn.w	r0, #11
    2810:	e795      	b.n	273e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    2812:	f06f 0015 	mvn.w	r0, #21
    2816:	e792      	b.n	273e <gpio_nrfx_pin_interrupt_configure+0x1e>
    2818:	0bad0000 	.word	0x0bad0000
    281c:	0000864c 	.word	0x0000864c
    2820:	00007ea3 	.word	0x00007ea3
    2824:	00008619 	.word	0x00008619
    2828:	50000300 	.word	0x50000300
    282c:	0bad0004 	.word	0x0bad0004

00002830 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2830:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2832:	f001 fa55 	bl	3ce0 <nrfx_gpiote_is_init>
    2836:	4604      	mov	r4, r0
    2838:	b968      	cbnz	r0, 2856 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    283a:	f001 fa29 	bl	3c90 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    283e:	4b08      	ldr	r3, [pc, #32]	; (2860 <gpio_nrfx_init+0x30>)
    2840:	4298      	cmp	r0, r3
    2842:	d10a      	bne.n	285a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2844:	4807      	ldr	r0, [pc, #28]	; (2864 <gpio_nrfx_init+0x34>)
    2846:	4621      	mov	r1, r4
    2848:	f001 f9f4 	bl	3c34 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    284c:	4622      	mov	r2, r4
    284e:	2105      	movs	r1, #5
    2850:	2006      	movs	r0, #6
    2852:	f7ff f865 	bl	1920 <z_arm_irq_priority_set>
		return 0;
    2856:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2858:	bd10      	pop	{r4, pc}
		return -EIO;
    285a:	f06f 0004 	mvn.w	r0, #4
    285e:	e7fb      	b.n	2858 <gpio_nrfx_init+0x28>
    2860:	0bad0000 	.word	0x0bad0000
    2864:	00002869 	.word	0x00002869

00002868 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2868:	0942      	lsrs	r2, r0, #5
{
    286a:	b570      	push	{r4, r5, r6, lr}
    286c:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    286e:	d002      	beq.n	2876 <nrfx_gpio_handler+0xe>
    2870:	2a01      	cmp	r2, #1
    2872:	d01e      	beq.n	28b2 <nrfx_gpio_handler+0x4a>
}
    2874:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2876:	4e14      	ldr	r6, [pc, #80]	; (28c8 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2878:	6932      	ldr	r2, [r6, #16]
    287a:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    287c:	2900      	cmp	r1, #0
    287e:	d0f9      	beq.n	2874 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2880:	f003 031f 	and.w	r3, r3, #31
    2884:	2501      	movs	r5, #1
	return node->next;
    2886:	680c      	ldr	r4, [r1, #0]
    2888:	409d      	lsls	r5, r3
    288a:	2900      	cmp	r1, #0
    288c:	d0f2      	beq.n	2874 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    288e:	688a      	ldr	r2, [r1, #8]
    2890:	402a      	ands	r2, r5
    2892:	d012      	beq.n	28ba <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
    2894:	684b      	ldr	r3, [r1, #4]
    2896:	b973      	cbnz	r3, 28b6 <nrfx_gpio_handler+0x4e>
    2898:	490c      	ldr	r1, [pc, #48]	; (28cc <nrfx_gpio_handler+0x64>)
    289a:	4a0d      	ldr	r2, [pc, #52]	; (28d0 <nrfx_gpio_handler+0x68>)
    289c:	480d      	ldr	r0, [pc, #52]	; (28d4 <nrfx_gpio_handler+0x6c>)
    289e:	234d      	movs	r3, #77	; 0x4d
    28a0:	f004 fbfb 	bl	709a <assert_print>
    28a4:	480c      	ldr	r0, [pc, #48]	; (28d8 <nrfx_gpio_handler+0x70>)
    28a6:	f004 fbf8 	bl	709a <assert_print>
    28aa:	4809      	ldr	r0, [pc, #36]	; (28d0 <nrfx_gpio_handler+0x68>)
    28ac:	214d      	movs	r1, #77	; 0x4d
    28ae:	f004 fbed 	bl	708c <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    28b2:	4e0a      	ldr	r6, [pc, #40]	; (28dc <nrfx_gpio_handler+0x74>)
    28b4:	e7e0      	b.n	2878 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
    28b6:	4630      	mov	r0, r6
    28b8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    28ba:	b11c      	cbz	r4, 28c4 <nrfx_gpio_handler+0x5c>
    28bc:	6823      	ldr	r3, [r4, #0]
    28be:	4621      	mov	r1, r4
    28c0:	461c      	mov	r4, r3
    28c2:	e7e2      	b.n	288a <nrfx_gpio_handler+0x22>
    28c4:	4623      	mov	r3, r4
    28c6:	e7fa      	b.n	28be <nrfx_gpio_handler+0x56>
    28c8:	00007948 	.word	0x00007948
    28cc:	0000898c 	.word	0x0000898c
    28d0:	0000859c 	.word	0x0000859c
    28d4:	00007ea3 	.word	0x00007ea3
    28d8:	00008602 	.word	0x00008602
    28dc:	00007930 	.word	0x00007930

000028e0 <gpio_nrfx_pin_configure>:
{
    28e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    28e4:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28e8:	f898 300c 	ldrb.w	r3, [r8, #12]
    28ec:	f001 051f 	and.w	r5, r1, #31
    28f0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    28f4:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28f6:	4628      	mov	r0, r5
    28f8:	f10d 0103 	add.w	r1, sp, #3
{
    28fc:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    28fe:	f001 f99f 	bl	3c40 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2902:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2906:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2908:	d115      	bne.n	2936 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    290a:	4628      	mov	r0, r5
    290c:	f001 fa94 	bl	3e38 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2910:	4b49      	ldr	r3, [pc, #292]	; (2a38 <gpio_nrfx_pin_configure+0x158>)
    2912:	429e      	cmp	r6, r3
    2914:	d171      	bne.n	29fa <gpio_nrfx_pin_configure+0x11a>
			err = nrfx_gpiote_channel_free(ch);
    2916:	f89d 0003 	ldrb.w	r0, [sp, #3]
    291a:	f001 f9eb 	bl	3cf4 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    291e:	42b0      	cmp	r0, r6
    2920:	d06b      	beq.n	29fa <gpio_nrfx_pin_configure+0x11a>
    2922:	4946      	ldr	r1, [pc, #280]	; (2a3c <gpio_nrfx_pin_configure+0x15c>)
    2924:	4a46      	ldr	r2, [pc, #280]	; (2a40 <gpio_nrfx_pin_configure+0x160>)
    2926:	4847      	ldr	r0, [pc, #284]	; (2a44 <gpio_nrfx_pin_configure+0x164>)
    2928:	236a      	movs	r3, #106	; 0x6a
    292a:	f004 fbb6 	bl	709a <assert_print>
    292e:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    2930:	4843      	ldr	r0, [pc, #268]	; (2a40 <gpio_nrfx_pin_configure+0x160>)
    2932:	f004 fbab 	bl	708c <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2936:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2938:	4619      	mov	r1, r3
    293a:	aa02      	add	r2, sp, #8
    293c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    293e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2942:	f001 f859 	bl	39f8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2946:	4b3c      	ldr	r3, [pc, #240]	; (2a38 <gpio_nrfx_pin_configure+0x158>)
    2948:	4298      	cmp	r0, r3
    294a:	d004      	beq.n	2956 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
    294c:	f06f 0015 	mvn.w	r0, #21
}
    2950:	b004      	add	sp, #16
    2952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    2956:	4286      	cmp	r6, r0
    2958:	d10d      	bne.n	2976 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
    295a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    295e:	f001 f9c9 	bl	3cf4 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
    2962:	42b0      	cmp	r0, r6
    2964:	d007      	beq.n	2976 <gpio_nrfx_pin_configure+0x96>
    2966:	4935      	ldr	r1, [pc, #212]	; (2a3c <gpio_nrfx_pin_configure+0x15c>)
    2968:	4a35      	ldr	r2, [pc, #212]	; (2a40 <gpio_nrfx_pin_configure+0x160>)
    296a:	4836      	ldr	r0, [pc, #216]	; (2a44 <gpio_nrfx_pin_configure+0x164>)
    296c:	237c      	movs	r3, #124	; 0x7c
    296e:	f004 fb94 	bl	709a <assert_print>
    2972:	217c      	movs	r1, #124	; 0x7c
    2974:	e7dc      	b.n	2930 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
    2976:	03a6      	lsls	r6, r4, #14
    2978:	d54e      	bpl.n	2a18 <gpio_nrfx_pin_configure+0x138>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    297a:	f240 3306 	movw	r3, #774	; 0x306
    297e:	4023      	ands	r3, r4
    2980:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    2984:	d019      	beq.n	29ba <gpio_nrfx_pin_configure+0xda>
    2986:	d80c      	bhi.n	29a2 <gpio_nrfx_pin_configure+0xc2>
    2988:	2b06      	cmp	r3, #6
    298a:	d017      	beq.n	29bc <gpio_nrfx_pin_configure+0xdc>
    298c:	d804      	bhi.n	2998 <gpio_nrfx_pin_configure+0xb8>
    298e:	b1ab      	cbz	r3, 29bc <gpio_nrfx_pin_configure+0xdc>
    2990:	2b02      	cmp	r3, #2
    2992:	d1db      	bne.n	294c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
    2994:	2304      	movs	r3, #4
    2996:	e011      	b.n	29bc <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    299c:	d1d6      	bne.n	294c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
    299e:	2301      	movs	r3, #1
    29a0:	e00c      	b.n	29bc <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    29a2:	f240 2202 	movw	r2, #514	; 0x202
    29a6:	4293      	cmp	r3, r2
    29a8:	d029      	beq.n	29fe <gpio_nrfx_pin_configure+0x11e>
    29aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    29ae:	d028      	beq.n	2a02 <gpio_nrfx_pin_configure+0x122>
    29b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    29b4:	d1ca      	bne.n	294c <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
    29b6:	2302      	movs	r3, #2
    29b8:	e000      	b.n	29bc <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
    29ba:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    29bc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    29c0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    29c4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    29c8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    29ca:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    29ce:	bf54      	ite	pl
    29d0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    29d4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29d6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    29d8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    29dc:	d513      	bpl.n	2a06 <gpio_nrfx_pin_configure+0x126>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    29de:	f8d8 2004 	ldr.w	r2, [r8, #4]
    29e2:	2301      	movs	r3, #1
    29e4:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
    29e6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    29ea:	2200      	movs	r2, #0
    29ec:	a901      	add	r1, sp, #4
    29ee:	4628      	mov	r0, r5
    29f0:	f001 f8ac 	bl	3b4c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    29f4:	4b10      	ldr	r3, [pc, #64]	; (2a38 <gpio_nrfx_pin_configure+0x158>)
    29f6:	4298      	cmp	r0, r3
    29f8:	d1a8      	bne.n	294c <gpio_nrfx_pin_configure+0x6c>
    29fa:	2000      	movs	r0, #0
    29fc:	e7a8      	b.n	2950 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
    29fe:	2305      	movs	r3, #5
    2a00:	e7dc      	b.n	29bc <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2a02:	2303      	movs	r3, #3
    2a04:	e7da      	b.n	29bc <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2a06:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2a08:	bf41      	itttt	mi
    2a0a:	2301      	movmi	r3, #1
    2a0c:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
    2a10:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
    2a12:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    2a16:	e7e8      	b.n	29ea <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
    2a18:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a1a:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    2a1e:	bf54      	ite	pl
    2a20:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2a24:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a26:	461a      	mov	r2, r3
    2a28:	a901      	add	r1, sp, #4
    2a2a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    2a2c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2a30:	f000 ffe2 	bl	39f8 <nrfx_gpiote_input_configure>
    2a34:	e7de      	b.n	29f4 <gpio_nrfx_pin_configure+0x114>
    2a36:	bf00      	nop
    2a38:	0bad0000 	.word	0x0bad0000
    2a3c:	0000869b 	.word	0x0000869b
    2a40:	0000866f 	.word	0x0000866f
    2a44:	00007ea3 	.word	0x00007ea3

00002a48 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
    2a48:	b508      	push	{r3, lr}
	uint32_t scl_pin;
	uint32_t sda_pin;
	nrfx_err_t err;

#ifdef CONFIG_PINCTRL
	scl_pin = nrf_twi_scl_pin_get(config->twi.p_twi);
    2a4a:	6843      	ldr	r3, [r0, #4]
    2a4c:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE uint32_t nrf_twi_scl_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SCL_CONNECT_Pos)
    return p_reg->PSEL.SCL;
    2a4e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE uint32_t nrf_twi_sda_pin_get(NRF_TWI_Type const * p_reg)
{
#if defined(TWI_PSEL_SDA_CONNECT_Pos)
    return p_reg->PSEL.SDA;
    2a52:	f8d3 150c 	ldr.w	r1, [r3, #1292]	; 0x50c
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    2a56:	f001 fe27 	bl	46a8 <nrfx_twi_twim_bus_recover>
	scl_pin = config->config.scl;
	sda_pin = config->config.sda;
#endif

	err = nrfx_twi_bus_recover(scl_pin, sda_pin);
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
    2a5a:	4b03      	ldr	r3, [pc, #12]	; (2a68 <i2c_nrfx_twi_recover_bus+0x20>)
    2a5c:	4298      	cmp	r0, r3
}
    2a5e:	bf14      	ite	ne
    2a60:	f06f 000f 	mvnne.w	r0, #15
    2a64:	2000      	moveq	r0, #0
    2a66:	bd08      	pop	{r3, pc}
    2a68:	0bad0000 	.word	0x0bad0000

00002a6c <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
    2a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2a6e:	4604      	mov	r4, r0
    2a70:	2200      	movs	r2, #0
    2a72:	2101      	movs	r1, #1
    2a74:	2003      	movs	r0, #3
    2a76:	f7fe ff53 	bl	1920 <z_arm_irq_priority_set>
    2a7a:	6863      	ldr	r3, [r4, #4]
    2a7c:	699d      	ldr	r5, [r3, #24]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2a7e:	aa01      	add	r2, sp, #4
    2a80:	2100      	movs	r1, #0
    2a82:	4628      	mov	r0, r5
    2a84:	f004 fc9a 	bl	73bc <pinctrl_lookup_state>
	if (ret < 0) {
    2a88:	2800      	cmp	r0, #0
    2a8a:	db14      	blt.n	2ab6 <twi_0_init+0x4a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2a8c:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2a8e:	682a      	ldr	r2, [r5, #0]
    2a90:	7919      	ldrb	r1, [r3, #4]
    2a92:	6818      	ldr	r0, [r3, #0]
    2a94:	f004 fca5 	bl	73e2 <pinctrl_configure_pins>
    2a98:	2800      	cmp	r0, #0
    2a9a:	db0c      	blt.n	2ab6 <twi_0_init+0x4a>
	const struct i2c_nrfx_twi_config *config = dev->config;
    2a9c:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&config->twi, &config->config,
    2a9e:	6923      	ldr	r3, [r4, #16]
    2aa0:	4a06      	ldr	r2, [pc, #24]	; (2abc <twi_0_init+0x50>)
    2aa2:	f100 0108 	add.w	r1, r0, #8
    2aa6:	f001 fbf3 	bl	4290 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
    2aaa:	4b05      	ldr	r3, [pc, #20]	; (2ac0 <twi_0_init+0x54>)
	return 0;
    2aac:	4298      	cmp	r0, r3
    2aae:	bf14      	ite	ne
    2ab0:	f06f 000f 	mvnne.w	r0, #15
    2ab4:	2000      	moveq	r0, #0
I2C_NRFX_TWI_DEVICE(0);
    2ab6:	b003      	add	sp, #12
    2ab8:	bd30      	pop	{r4, r5, pc}
    2aba:	bf00      	nop
    2abc:	00002ac5 	.word	0x00002ac5
    2ac0:	0bad0000 	.word	0x0bad0000

00002ac4 <event_handler>:
	switch (p_event->type) {
    2ac4:	7803      	ldrb	r3, [r0, #0]
    2ac6:	2b01      	cmp	r3, #1
    2ac8:	d008      	beq.n	2adc <event_handler+0x18>
    2aca:	2b02      	cmp	r3, #2
    2acc:	d008      	beq.n	2ae0 <event_handler+0x1c>
    2ace:	b94b      	cbnz	r3, 2ae4 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
    2ad0:	4b05      	ldr	r3, [pc, #20]	; (2ae8 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
    2ad2:	620b      	str	r3, [r1, #32]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2ad4:	f101 0010 	add.w	r0, r1, #16
    2ad8:	f002 bb6e 	b.w	51b8 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    2adc:	4b03      	ldr	r3, [pc, #12]	; (2aec <event_handler+0x28>)
    2ade:	e7f8      	b.n	2ad2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    2ae0:	4b03      	ldr	r3, [pc, #12]	; (2af0 <event_handler+0x2c>)
    2ae2:	e7f6      	b.n	2ad2 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
    2ae4:	4b03      	ldr	r3, [pc, #12]	; (2af4 <event_handler+0x30>)
    2ae6:	e7f4      	b.n	2ad2 <event_handler+0xe>
    2ae8:	0bad0000 	.word	0x0bad0000
    2aec:	0bae0001 	.word	0x0bae0001
    2af0:	0bae0002 	.word	0x0bae0002
    2af4:	0bad0001 	.word	0x0bad0001

00002af8 <i2c_nrfx_twi_transfer>:
{
    2af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2afc:	b08b      	sub	sp, #44	; 0x2c
    2afe:	4605      	mov	r5, r0
    2b00:	460c      	mov	r4, r1
    2b02:	4690      	mov	r8, r2
    2b04:	9301      	str	r3, [sp, #4]
	const struct i2c_nrfx_twi_config *config = dev->config;
    2b06:	6847      	ldr	r7, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    2b08:	6906      	ldr	r6, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    2b0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b12:	4630      	mov	r0, r6
    2b14:	f002 fb8e 	bl	5234 <z_impl_k_sem_take>
	k_sem_take(&data->completion_sync, K_NO_WAIT);
    2b18:	f106 0a10 	add.w	sl, r6, #16
    2b1c:	2200      	movs	r2, #0
    2b1e:	2300      	movs	r3, #0
    2b20:	4650      	mov	r0, sl
    2b22:	f002 fb87 	bl	5234 <z_impl_k_sem_take>
	nrfx_twi_enable(&config->twi);
    2b26:	4638      	mov	r0, r7
    2b28:	f001 fc22 	bl	4370 <nrfx_twi_enable>
		if (res != NRFX_SUCCESS) {
    2b2c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 2bf0 <i2c_nrfx_twi_transfer+0xf8>
	for (size_t i = 0; i < num_msgs; i++) {
    2b30:	f04f 0900 	mov.w	r9, #0
    2b34:	45c1      	cmp	r9, r8
    2b36:	d301      	bcc.n	2b3c <i2c_nrfx_twi_transfer+0x44>
    2b38:	2400      	movs	r4, #0
    2b3a:	e02e      	b.n	2b9a <i2c_nrfx_twi_transfer+0xa2>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    2b3c:	7a23      	ldrb	r3, [r4, #8]
    2b3e:	9303      	str	r3, [sp, #12]
    2b40:	f013 0108 	ands.w	r1, r3, #8
    2b44:	d14d      	bne.n	2be2 <i2c_nrfx_twi_transfer+0xea>
		nrfx_twi_xfer_desc_t cur_xfer = {
    2b46:	2212      	movs	r2, #18
    2b48:	f10d 0016 	add.w	r0, sp, #22
    2b4c:	9102      	str	r1, [sp, #8]
    2b4e:	f004 faec 	bl	712a <memset>
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2b52:	9b03      	ldr	r3, [sp, #12]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2b54:	6860      	ldr	r0, [r4, #4]
    2b56:	9901      	ldr	r1, [sp, #4]
    2b58:	9006      	str	r0, [sp, #24]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    2b5a:	f003 0201 	and.w	r2, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    2b5e:	6820      	ldr	r0, [r4, #0]
    2b60:	f88d 1015 	strb.w	r1, [sp, #21]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2b64:	f013 0f02 	tst.w	r3, #2
    2b68:	9902      	ldr	r1, [sp, #8]
		nrfx_twi_xfer_desc_t cur_xfer = {
    2b6a:	f88d 2014 	strb.w	r2, [sp, #20]
    2b6e:	9008      	str	r0, [sp, #32]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    2b70:	d11d      	bne.n	2bae <i2c_nrfx_twi_transfer+0xb6>
			if ((i < (num_msgs - 1)) &&
    2b72:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    2b76:	454b      	cmp	r3, r9
    2b78:	d902      	bls.n	2b80 <i2c_nrfx_twi_transfer+0x88>
    2b7a:	7d23      	ldrb	r3, [r4, #20]
    2b7c:	075b      	lsls	r3, r3, #29
    2b7e:	d518      	bpl.n	2bb2 <i2c_nrfx_twi_transfer+0xba>
			} else if (msgs[i].flags & I2C_MSG_READ) {
    2b80:	bb7a      	cbnz	r2, 2be2 <i2c_nrfx_twi_transfer+0xea>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    2b82:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&config->twi, &cur_xfer, xfer_flags);
    2b84:	a905      	add	r1, sp, #20
    2b86:	4638      	mov	r0, r7
    2b88:	f001 fc4a 	bl	4420 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
    2b8c:	4558      	cmp	r0, fp
    2b8e:	d012      	beq.n	2bb6 <i2c_nrfx_twi_transfer+0xbe>
			if (res == NRFX_ERROR_BUSY) {
    2b90:	4b18      	ldr	r3, [pc, #96]	; (2bf4 <i2c_nrfx_twi_transfer+0xfc>)
    2b92:	4298      	cmp	r0, r3
    2b94:	d028      	beq.n	2be8 <i2c_nrfx_twi_transfer+0xf0>
				ret = -EIO;
    2b96:	f06f 0404 	mvn.w	r4, #4
	nrfx_twi_disable(&config->twi);
    2b9a:	4638      	mov	r0, r7
    2b9c:	f001 fc0e 	bl	43bc <nrfx_twi_disable>
	z_impl_k_sem_give(sem);
    2ba0:	4630      	mov	r0, r6
    2ba2:	f002 fb09 	bl	51b8 <z_impl_k_sem_give>
}
    2ba6:	4620      	mov	r0, r4
    2ba8:	b00b      	add	sp, #44	; 0x2c
    2baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
    2bae:	460a      	mov	r2, r1
    2bb0:	e7e8      	b.n	2b84 <i2c_nrfx_twi_transfer+0x8c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    2bb2:	2240      	movs	r2, #64	; 0x40
    2bb4:	e7e6      	b.n	2b84 <i2c_nrfx_twi_transfer+0x8c>
	return z_impl_k_sem_take(sem, timeout);
    2bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2bba:	2300      	movs	r3, #0
    2bbc:	4650      	mov	r0, sl
    2bbe:	f002 fb39 	bl	5234 <z_impl_k_sem_take>
		if (ret != 0) {
    2bc2:	b130      	cbz	r0, 2bd2 <i2c_nrfx_twi_transfer+0xda>
			nrfx_twi_disable(&config->twi);
    2bc4:	4638      	mov	r0, r7
    2bc6:	f001 fbf9 	bl	43bc <nrfx_twi_disable>
			(void)i2c_nrfx_twi_recover_bus(dev);
    2bca:	4628      	mov	r0, r5
    2bcc:	f7ff ff3c 	bl	2a48 <i2c_nrfx_twi_recover_bus>
			break;
    2bd0:	e7e1      	b.n	2b96 <i2c_nrfx_twi_transfer+0x9e>
		res = data->res;
    2bd2:	6a33      	ldr	r3, [r6, #32]
		if (res != NRFX_SUCCESS) {
    2bd4:	455b      	cmp	r3, fp
    2bd6:	f104 040c 	add.w	r4, r4, #12
    2bda:	d1dc      	bne.n	2b96 <i2c_nrfx_twi_transfer+0x9e>
	for (size_t i = 0; i < num_msgs; i++) {
    2bdc:	f109 0901 	add.w	r9, r9, #1
    2be0:	e7a8      	b.n	2b34 <i2c_nrfx_twi_transfer+0x3c>
			ret = -ENOTSUP;
    2be2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    2be6:	e7d8      	b.n	2b9a <i2c_nrfx_twi_transfer+0xa2>
				ret = -EBUSY;
    2be8:	f06f 040f 	mvn.w	r4, #15
    2bec:	e7d5      	b.n	2b9a <i2c_nrfx_twi_transfer+0xa2>
    2bee:	bf00      	nop
    2bf0:	0bad0000 	.word	0x0bad0000
    2bf4:	0bad000b 	.word	0x0bad000b

00002bf8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2bfa:	794b      	ldrb	r3, [r1, #5]
    2bfc:	2b01      	cmp	r3, #1
    2bfe:	d026      	beq.n	2c4e <uarte_nrfx_configure+0x56>
    2c00:	2b03      	cmp	r3, #3
    2c02:	d121      	bne.n	2c48 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2c04:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2c06:	798b      	ldrb	r3, [r1, #6]
    2c08:	2b03      	cmp	r3, #3
    2c0a:	d11d      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2c0c:	79ce      	ldrb	r6, [r1, #7]
    2c0e:	b10e      	cbz	r6, 2c14 <uarte_nrfx_configure+0x1c>
    2c10:	2e01      	cmp	r6, #1
    2c12:	d119      	bne.n	2c48 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2c14:	790a      	ldrb	r2, [r1, #4]
    2c16:	b112      	cbz	r2, 2c1e <uarte_nrfx_configure+0x26>
    2c18:	2a02      	cmp	r2, #2
    2c1a:	d115      	bne.n	2c48 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2c1c:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2c1e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2c20:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
    2c22:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2c26:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
    2c28:	d067      	beq.n	2cfa <uarte_nrfx_configure+0x102>
    2c2a:	d82d      	bhi.n	2c88 <uarte_nrfx_configure+0x90>
    2c2c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2c30:	d066      	beq.n	2d00 <uarte_nrfx_configure+0x108>
    2c32:	d816      	bhi.n	2c62 <uarte_nrfx_configure+0x6a>
    2c34:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2c38:	d064      	beq.n	2d04 <uarte_nrfx_configure+0x10c>
    2c3a:	d80a      	bhi.n	2c52 <uarte_nrfx_configure+0x5a>
    2c3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2c40:	d063      	beq.n	2d0a <uarte_nrfx_configure+0x112>
    2c42:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2c46:	d063      	beq.n	2d10 <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
    2c48:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c4c:	e054      	b.n	2cf8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    2c4e:	2500      	movs	r5, #0
    2c50:	e7d9      	b.n	2c06 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2c52:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2c56:	d05e      	beq.n	2d16 <uarte_nrfx_configure+0x11e>
    2c58:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2c5c:	d1f4      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2c5e:	4b38      	ldr	r3, [pc, #224]	; (2d40 <uarte_nrfx_configure+0x148>)
    2c60:	e03c      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c62:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2c66:	d059      	beq.n	2d1c <uarte_nrfx_configure+0x124>
    2c68:	d807      	bhi.n	2c7a <uarte_nrfx_configure+0x82>
    2c6a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2c6e:	d057      	beq.n	2d20 <uarte_nrfx_configure+0x128>
    2c70:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2c74:	d1e8      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2c76:	4b33      	ldr	r3, [pc, #204]	; (2d44 <uarte_nrfx_configure+0x14c>)
    2c78:	e030      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c7a:	f647 2412 	movw	r4, #31250	; 0x7a12
    2c7e:	42a3      	cmp	r3, r4
    2c80:	d1e2      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2c82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2c86:	e029      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2c88:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2c8c:	d04a      	beq.n	2d24 <uarte_nrfx_configure+0x12c>
    2c8e:	d813      	bhi.n	2cb8 <uarte_nrfx_configure+0xc0>
    2c90:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2c94:	d049      	beq.n	2d2a <uarte_nrfx_configure+0x132>
    2c96:	d809      	bhi.n	2cac <uarte_nrfx_configure+0xb4>
    2c98:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2c9c:	42a3      	cmp	r3, r4
    2c9e:	d046      	beq.n	2d2e <uarte_nrfx_configure+0x136>
    2ca0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2ca4:	d1d0      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2ca6:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2caa:	e017      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cac:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2cb0:	d1ca      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2cb2:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2cb6:	e011      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cb8:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2cbc:	d03a      	beq.n	2d34 <uarte_nrfx_configure+0x13c>
    2cbe:	d808      	bhi.n	2cd2 <uarte_nrfx_configure+0xda>
    2cc0:	4c21      	ldr	r4, [pc, #132]	; (2d48 <uarte_nrfx_configure+0x150>)
    2cc2:	42a3      	cmp	r3, r4
    2cc4:	d039      	beq.n	2d3a <uarte_nrfx_configure+0x142>
    2cc6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2cca:	d1bd      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2ccc:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2cd0:	e004      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2cd2:	4c1e      	ldr	r4, [pc, #120]	; (2d4c <uarte_nrfx_configure+0x154>)
    2cd4:	42a3      	cmp	r3, r4
    2cd6:	d1b7      	bne.n	2c48 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2cdc:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2cde:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
    2ce2:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
    2ce4:	4335      	orrs	r5, r6
    2ce6:	681b      	ldr	r3, [r3, #0]
    2ce8:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2cea:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    2cee:	c903      	ldmia	r1, {r0, r1}
    2cf0:	1d23      	adds	r3, r4, #4
    2cf2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2cf6:	2000      	movs	r0, #0
}
    2cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2cfa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2cfe:	e7ed      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2d00:	4b13      	ldr	r3, [pc, #76]	; (2d50 <uarte_nrfx_configure+0x158>)
    2d02:	e7eb      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2d04:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2d08:	e7e8      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2d0a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2d0e:	e7e5      	b.n	2cdc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2d10:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2d14:	e7e2      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2d16:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2d1a:	e7df      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2d1c:	4b0d      	ldr	r3, [pc, #52]	; (2d54 <uarte_nrfx_configure+0x15c>)
    2d1e:	e7dd      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2d20:	4b0d      	ldr	r3, [pc, #52]	; (2d58 <uarte_nrfx_configure+0x160>)
    2d22:	e7db      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2d24:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2d28:	e7d8      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2d2a:	4b0c      	ldr	r3, [pc, #48]	; (2d5c <uarte_nrfx_configure+0x164>)
    2d2c:	e7d6      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2d2e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2d32:	e7d3      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2d34:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2d38:	e7d0      	b.n	2cdc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2d3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2d3e:	e7cd      	b.n	2cdc <uarte_nrfx_configure+0xe4>
    2d40:	0013b000 	.word	0x0013b000
    2d44:	004ea000 	.word	0x004ea000
    2d48:	0003d090 	.word	0x0003d090
    2d4c:	000f4240 	.word	0x000f4240
    2d50:	00275000 	.word	0x00275000
    2d54:	0075c000 	.word	0x0075c000
    2d58:	003af000 	.word	0x003af000
    2d5c:	013a9000 	.word	0x013a9000

00002d60 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    2d64:	6847      	ldr	r7, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2d66:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2d68:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2d6a:	2100      	movs	r1, #0
    2d6c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    2d70:	6030      	str	r0, [r6, #0]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2d72:	f8d7 900c 	ldr.w	r9, [r7, #12]
static int uarte_instance_init(const struct device *dev,
    2d76:	4680      	mov	r8, r0
	ret = pinctrl_lookup_state(config, id, &state);
    2d78:	aa01      	add	r2, sp, #4
    2d7a:	4648      	mov	r0, r9
    2d7c:	f004 fb1e 	bl	73bc <pinctrl_lookup_state>
	if (ret < 0) {
    2d80:	1e05      	subs	r5, r0, #0
    2d82:	db54      	blt.n	2e2e <uarte_instance_init.constprop.0+0xce>
	return pinctrl_apply_state_direct(config, state);
    2d84:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2d86:	f8d9 2000 	ldr.w	r2, [r9]
    2d8a:	7919      	ldrb	r1, [r3, #4]
    2d8c:	6818      	ldr	r0, [r3, #0]
    2d8e:	f004 fb28 	bl	73e2 <pinctrl_configure_pins>
	if (err < 0) {
    2d92:	1e05      	subs	r5, r0, #0
    2d94:	db4b      	blt.n	2e2e <uarte_instance_init.constprop.0+0xce>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2d96:	1d31      	adds	r1, r6, #4
    2d98:	4640      	mov	r0, r8
    2d9a:	f7ff ff2d 	bl	2bf8 <uarte_nrfx_configure>
	if (err) {
    2d9e:	4605      	mov	r5, r0
    2da0:	2800      	cmp	r0, #0
    2da2:	d144      	bne.n	2e2e <uarte_instance_init.constprop.0+0xce>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2da4:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2da6:	0799      	lsls	r1, r3, #30
    2da8:	d51a      	bpl.n	2de0 <uarte_instance_init.constprop.0+0x80>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2daa:	f106 0018 	add.w	r0, r6, #24
    2dae:	f001 f947 	bl	4040 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2db2:	4b22      	ldr	r3, [pc, #136]	; (2e3c <uarte_instance_init.constprop.0+0xdc>)
    2db4:	4298      	cmp	r0, r3
    2db6:	d13e      	bne.n	2e36 <uarte_instance_init.constprop.0+0xd6>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2db8:	7e33      	ldrb	r3, [r6, #24]
    2dba:	00db      	lsls	r3, r3, #3
    2dbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2dc0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2dc4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2dc8:	f504 7190 	add.w	r1, r4, #288	; 0x120
    2dcc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2dd0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2dd4:	7e32      	ldrb	r2, [r6, #24]
    2dd6:	2301      	movs	r3, #1
    2dd8:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
    2dda:	4a19      	ldr	r2, [pc, #100]	; (2e40 <uarte_instance_init.constprop.0+0xe0>)
    2ddc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2de0:	2308      	movs	r3, #8
    2de2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    2de6:	7a3b      	ldrb	r3, [r7, #8]
    2de8:	b953      	cbnz	r3, 2e00 <uarte_instance_init.constprop.0+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2dea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2dee:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2df2:	6973      	ldr	r3, [r6, #20]
    2df4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2df8:	2301      	movs	r3, #1
    2dfa:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2dfe:	6023      	str	r3, [r4, #0]
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2e00:	687b      	ldr	r3, [r7, #4]
    2e02:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2e04:	bf5c      	itt	pl
    2e06:	f44f 7380 	movpl.w	r3, #256	; 0x100
    2e0a:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2e0e:	687b      	ldr	r3, [r7, #4]
    2e10:	06db      	lsls	r3, r3, #27
    2e12:	bf44      	itt	mi
    2e14:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2e18:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2e1c:	6933      	ldr	r3, [r6, #16]
    2e1e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2e22:	2300      	movs	r3, #0
    2e24:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e28:	2301      	movs	r3, #1
    2e2a:	60a3      	str	r3, [r4, #8]
    2e2c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2e2e:	4628      	mov	r0, r5
    2e30:	b003      	add	sp, #12
    2e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2e36:	f06f 0504 	mvn.w	r5, #4
    2e3a:	e7f8      	b.n	2e2e <uarte_instance_init.constprop.0+0xce>
    2e3c:	0bad0000 	.word	0x0bad0000
    2e40:	4001f000 	.word	0x4001f000

00002e44 <uarte_nrfx_poll_out>:
{
    2e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e46:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    2e48:	6907      	ldr	r7, [r0, #16]
{
    2e4a:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2e4c:	f004 fce3 	bl	7816 <k_is_in_isr>
    2e50:	b9b0      	cbnz	r0, 2e80 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    2e52:	4b2e      	ldr	r3, [pc, #184]	; (2f0c <uarte_nrfx_poll_out+0xc8>)
    2e54:	781b      	ldrb	r3, [r3, #0]
    2e56:	b19b      	cbz	r3, 2e80 <uarte_nrfx_poll_out+0x3c>
{
    2e58:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2e5a:	6860      	ldr	r0, [r4, #4]
    2e5c:	f004 fa46 	bl	72ec <is_tx_ready.isra.0>
    2e60:	bb00      	cbnz	r0, 2ea4 <uarte_nrfx_poll_out+0x60>
    2e62:	2001      	movs	r0, #1
    2e64:	f004 fb7c 	bl	7560 <nrfx_busy_wait>
    2e68:	3e01      	subs	r6, #1
    2e6a:	d1f6      	bne.n	2e5a <uarte_nrfx_poll_out+0x16>
	return z_impl_k_sleep(timeout);
    2e6c:	2100      	movs	r1, #0
    2e6e:	2021      	movs	r0, #33	; 0x21
    2e70:	f003 f9e2 	bl	6238 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2e74:	e7f0      	b.n	2e58 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    2e76:	f386 8811 	msr	BASEPRI, r6
    2e7a:	f3bf 8f6f 	isb	sy
}
    2e7e:	e7f5      	b.n	2e6c <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2e80:	f04f 0320 	mov.w	r3, #32
    2e84:	f3ef 8611 	mrs	r6, BASEPRI
    2e88:	f383 8812 	msr	BASEPRI_MAX, r3
    2e8c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2e90:	6860      	ldr	r0, [r4, #4]
    2e92:	4631      	mov	r1, r6
    2e94:	f004 fa2a 	bl	72ec <is_tx_ready.isra.0>
    2e98:	b990      	cbnz	r0, 2ec0 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    2e9a:	f386 8811 	msr	BASEPRI, r6
    2e9e:	f3bf 8f6f 	isb	sy
}
    2ea2:	e7ed      	b.n	2e80 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    2ea4:	f04f 0320 	mov.w	r3, #32
    2ea8:	f3ef 8611 	mrs	r6, BASEPRI
    2eac:	f383 8812 	msr	BASEPRI_MAX, r3
    2eb0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2eb4:	6860      	ldr	r0, [r4, #4]
    2eb6:	4631      	mov	r1, r6
    2eb8:	f004 fa18 	bl	72ec <is_tx_ready.isra.0>
    2ebc:	2800      	cmp	r0, #0
    2ebe:	d0da      	beq.n	2e76 <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    2ec0:	693b      	ldr	r3, [r7, #16]
    2ec2:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    2ec4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2ec6:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    2ec8:	6813      	ldr	r3, [r2, #0]
    2eca:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2ece:	2001      	movs	r0, #1
    2ed0:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ed4:	2000      	movs	r0, #0
    2ed6:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    2eda:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    2ede:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2ee2:	6852      	ldr	r2, [r2, #4]
    2ee4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    2ee8:	06d2      	lsls	r2, r2, #27
    2eea:	d508      	bpl.n	2efe <uarte_nrfx_poll_out+0xba>
	return config->uarte_regs;
    2eec:	6862      	ldr	r2, [r4, #4]
    2eee:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2ef0:	2008      	movs	r0, #8
    2ef2:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2ef6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2efa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2efe:	2201      	movs	r2, #1
    2f00:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    2f02:	f381 8811 	msr	BASEPRI, r1
    2f06:	f3bf 8f6f 	isb	sy
}
    2f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f0c:	2000112e 	.word	0x2000112e

00002f10 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2f10:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2f12:	490e      	ldr	r1, [pc, #56]	; (2f4c <sys_clock_timeout_handler+0x3c>)
    2f14:	e9d1 3400 	ldrd	r3, r4, [r1]
    2f18:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    2f1a:	18c3      	adds	r3, r0, r3
    2f1c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    2f20:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    2f24:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2f28:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2f2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2f30:	d209      	bcs.n	2f46 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2f32:	4b07      	ldr	r3, [pc, #28]	; (2f50 <sys_clock_timeout_handler+0x40>)
    2f34:	681b      	ldr	r3, [r3, #0]
    2f36:	0a1a      	lsrs	r2, r3, #8
    2f38:	061b      	lsls	r3, r3, #24
    2f3a:	199c      	adds	r4, r3, r6
    2f3c:	4b05      	ldr	r3, [pc, #20]	; (2f54 <sys_clock_timeout_handler+0x44>)
    2f3e:	f142 0500 	adc.w	r5, r2, #0
    2f42:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    2f46:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    2f48:	f003 bc88 	b.w	685c <sys_clock_announce>
    2f4c:	20000300 	.word	0x20000300
    2f50:	20000a08 	.word	0x20000a08
    2f54:	20000308 	.word	0x20000308

00002f58 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2f58:	4b0d      	ldr	r3, [pc, #52]	; (2f90 <z_nrf_rtc_timer_read+0x38>)
    2f5a:	6818      	ldr	r0, [r3, #0]
    2f5c:	0a01      	lsrs	r1, r0, #8
    2f5e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2f60:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2f64:	4b0b      	ldr	r3, [pc, #44]	; (2f94 <z_nrf_rtc_timer_read+0x3c>)
    2f66:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2f6a:	1818      	adds	r0, r3, r0
    2f6c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2f70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2f74:	d20a      	bcs.n	2f8c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2f76:	4b08      	ldr	r3, [pc, #32]	; (2f98 <z_nrf_rtc_timer_read+0x40>)
    2f78:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f7c:	4290      	cmp	r0, r2
    2f7e:	eb71 0303 	sbcs.w	r3, r1, r3
    2f82:	d203      	bcs.n	2f8c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2f84:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2f88:	f141 0100 	adc.w	r1, r1, #0
}
    2f8c:	4770      	bx	lr
    2f8e:	bf00      	nop
    2f90:	20000a08 	.word	0x20000a08
    2f94:	40011000 	.word	0x40011000
    2f98:	20000308 	.word	0x20000308

00002f9c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    2f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2fa0:	4c2f      	ldr	r4, [pc, #188]	; (3060 <rtc_nrf_isr+0xc4>)
    2fa2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2fa6:	0799      	lsls	r1, r3, #30
    2fa8:	d50b      	bpl.n	2fc2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2faa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2fae:	b143      	cbz	r3, 2fc2 <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    2fb0:	4a2c      	ldr	r2, [pc, #176]	; (3064 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2fb2:	2300      	movs	r3, #0
    2fb4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2fb8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2fbc:	6813      	ldr	r3, [r2, #0]
    2fbe:	3301      	adds	r3, #1
    2fc0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2fc2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2fc6:	03da      	lsls	r2, r3, #15
    2fc8:	d52a      	bpl.n	3020 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2fca:	f3bf 8f5b 	dmb	ish
    2fce:	4b26      	ldr	r3, [pc, #152]	; (3068 <rtc_nrf_isr+0xcc>)
    2fd0:	e853 2f00 	ldrex	r2, [r3]
    2fd4:	f022 0101 	bic.w	r1, r2, #1
    2fd8:	e843 1000 	strex	r0, r1, [r3]
    2fdc:	2800      	cmp	r0, #0
    2fde:	d1f7      	bne.n	2fd0 <rtc_nrf_isr+0x34>
    2fe0:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    2fe4:	07d3      	lsls	r3, r2, #31
    2fe6:	d402      	bmi.n	2fee <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2fe8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2fec:	b1c3      	cbz	r3, 3020 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2fee:	2500      	movs	r5, #0
    2ff0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2ff4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2ff8:	f7ff ffae 	bl	2f58 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2ffc:	f04f 0320 	mov.w	r3, #32
    3000:	f3ef 8211 	mrs	r2, BASEPRI
    3004:	f383 8812 	msr	BASEPRI_MAX, r3
    3008:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    300c:	4b17      	ldr	r3, [pc, #92]	; (306c <rtc_nrf_isr+0xd0>)
    300e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3012:	42b0      	cmp	r0, r6
    3014:	41b9      	sbcs	r1, r7
    3016:	d206      	bcs.n	3026 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    3018:	f382 8811 	msr	BASEPRI, r2
    301c:	f3bf 8f6f 	isb	sy
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
    3020:	b003      	add	sp, #12
    3022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3026:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    302a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    302e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    3032:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    3036:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    303c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3040:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    3044:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    3048:	f382 8811 	msr	BASEPRI, r2
    304c:	f3bf 8f6f 	isb	sy
		if (handler) {
    3050:	2900      	cmp	r1, #0
    3052:	d0e5      	beq.n	3020 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    3054:	9000      	str	r0, [sp, #0]
    3056:	4632      	mov	r2, r6
    3058:	463b      	mov	r3, r7
    305a:	4628      	mov	r0, r5
    305c:	4788      	blx	r1
    305e:	e7df      	b.n	3020 <rtc_nrf_isr+0x84>
    3060:	40011000 	.word	0x40011000
    3064:	20000a08 	.word	0x20000a08
    3068:	20000a00 	.word	0x20000a00
    306c:	200002f0 	.word	0x200002f0

00003070 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
    3070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3074:	4d4b      	ldr	r5, [pc, #300]	; (31a4 <compare_set.constprop.0.isra.0+0x134>)
    3076:	f3bf 8f5b 	dmb	ish
    307a:	4606      	mov	r6, r0
    307c:	460f      	mov	r7, r1
    307e:	e855 8f00 	ldrex	r8, [r5]
    3082:	f028 0301 	bic.w	r3, r8, #1
    3086:	e845 3200 	strex	r2, r3, [r5]
    308a:	2a00      	cmp	r2, #0
    308c:	d1f7      	bne.n	307e <compare_set.constprop.0.isra.0+0xe>
    308e:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
    3092:	4c45      	ldr	r4, [pc, #276]	; (31a8 <compare_set.constprop.0.isra.0+0x138>)
    3094:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    3098:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    309c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30a0:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
    30a4:	f7ff ff58 	bl	2f58 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    30a8:	42b0      	cmp	r0, r6
    30aa:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
    30ae:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
    30b2:	d240      	bcs.n	3136 <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    30b4:	4b3d      	ldr	r3, [pc, #244]	; (31ac <compare_set.constprop.0.isra.0+0x13c>)
    30b6:	1a30      	subs	r0, r6, r0
    30b8:	eb67 0101 	sbc.w	r1, r7, r1
    30bc:	4298      	cmp	r0, r3
    30be:	f171 0100 	sbcs.w	r1, r1, #0
    30c2:	d24c      	bcs.n	315e <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
    30c4:	4b3a      	ldr	r3, [pc, #232]	; (31b0 <compare_set.constprop.0.isra.0+0x140>)
    30c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    30ca:	429f      	cmp	r7, r3
    30cc:	bf08      	it	eq
    30ce:	4296      	cmpeq	r6, r2
    30d0:	d03e      	beq.n	3150 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30d2:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
    30d6:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    30da:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
    30de:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    30e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    30e6:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 31b4 <compare_set.constprop.0.isra.0+0x144>
	uint32_t cc_val = req_cc;
    30ea:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    30ec:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
    30ee:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    30f2:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    30f6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
    30fa:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
    30fe:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3102:	ebae 0302 	sub.w	r3, lr, r2
    3106:	445b      	add	r3, fp
    3108:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    310c:	4553      	cmp	r3, sl
    310e:	d91f      	bls.n	3150 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3110:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
    3114:	b15b      	cbz	r3, 312e <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
    3116:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    311a:	1a13      	subs	r3, r2, r0
    311c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    3120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3124:	d914      	bls.n	3150 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3126:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
    312a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
    312e:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
    3132:	3101      	adds	r1, #1
	for (;;) {
    3134:	e7dd      	b.n	30f2 <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3136:	4b20      	ldr	r3, [pc, #128]	; (31b8 <compare_set.constprop.0.isra.0+0x148>)
    3138:	f3bf 8f5b 	dmb	ish
    313c:	e853 1f00 	ldrex	r1, [r3]
    3140:	f041 0101 	orr.w	r1, r1, #1
    3144:	e843 1200 	strex	r2, r1, [r3]
    3148:	2a00      	cmp	r2, #0
    314a:	d1f7      	bne.n	313c <compare_set.constprop.0.isra.0+0xcc>
    314c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    3150:	4b17      	ldr	r3, [pc, #92]	; (31b0 <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
    3152:	4a1a      	ldr	r2, [pc, #104]	; (31bc <compare_set.constprop.0.isra.0+0x14c>)
    3154:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
    3156:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
    315a:	2200      	movs	r2, #0
    315c:	605a      	str	r2, [r3, #4]
	if (key) {
    315e:	f1b8 0f00 	cmp.w	r8, #0
    3162:	d01c      	beq.n	319e <compare_set.constprop.0.isra.0+0x12e>
    3164:	f3bf 8f5b 	dmb	ish
    3168:	e855 3f00 	ldrex	r3, [r5]
    316c:	f043 0301 	orr.w	r3, r3, #1
    3170:	e845 3200 	strex	r2, r3, [r5]
    3174:	2a00      	cmp	r2, #0
    3176:	d1f7      	bne.n	3168 <compare_set.constprop.0.isra.0+0xf8>
    3178:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    317c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3180:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3184:	4b0c      	ldr	r3, [pc, #48]	; (31b8 <compare_set.constprop.0.isra.0+0x148>)
    3186:	f3bf 8f5b 	dmb	ish
    318a:	681b      	ldr	r3, [r3, #0]
    318c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3190:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3192:	bf42      	ittt	mi
    3194:	4b0a      	ldrmi	r3, [pc, #40]	; (31c0 <compare_set.constprop.0.isra.0+0x150>)
    3196:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    319a:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    319e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31a2:	bf00      	nop
    31a4:	20000a04 	.word	0x20000a04
    31a8:	40011000 	.word	0x40011000
    31ac:	00800001 	.word	0x00800001
    31b0:	200002f0 	.word	0x200002f0
    31b4:	007ffffd 	.word	0x007ffffd
    31b8:	20000a00 	.word	0x20000a00
    31bc:	00002f11 	.word	0x00002f11
    31c0:	e000e100 	.word	0xe000e100

000031c4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    31c4:	b570      	push	{r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    31c6:	4b16      	ldr	r3, [pc, #88]	; (3220 <sys_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
    31c8:	4c16      	ldr	r4, [pc, #88]	; (3224 <sys_clock_driver_init+0x60>)
    31ca:	2500      	movs	r5, #0
    31cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    31d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    31d4:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    31d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    31dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    31e0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    31e4:	4b10      	ldr	r3, [pc, #64]	; (3228 <sys_clock_driver_init+0x64>)
    31e6:	2602      	movs	r6, #2
    31e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    31ec:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    31f0:	2101      	movs	r1, #1
    31f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    31f6:	2011      	movs	r0, #17
    31f8:	462a      	mov	r2, r5
    31fa:	f7fe fb91 	bl	1920 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    31fe:	2011      	movs	r0, #17
    3200:	f7fe fb72 	bl	18e8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3204:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3206:	4a09      	ldr	r2, [pc, #36]	; (322c <sys_clock_driver_init+0x68>)
    3208:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    320a:	2100      	movs	r1, #0
    320c:	6023      	str	r3, [r4, #0]
    320e:	4808      	ldr	r0, [pc, #32]	; (3230 <sys_clock_driver_init+0x6c>)
	int_mask = BIT_MASK(CHAN_COUNT);
    3210:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3212:	f7ff ff2d 	bl	3070 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
    3216:	4630      	mov	r0, r6
    3218:	f7ff f96a 	bl	24f0 <z_nrf_clock_control_lf_on>

	return 0;
}
    321c:	4628      	mov	r0, r5
    321e:	bd70      	pop	{r4, r5, r6, pc}
    3220:	200002f0 	.word	0x200002f0
    3224:	40011000 	.word	0x40011000
    3228:	e000e100 	.word	0xe000e100
    322c:	20000a04 	.word	0x20000a04
    3230:	007fffff 	.word	0x007fffff

00003234 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    3234:	1c43      	adds	r3, r0, #1
{
    3236:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    3238:	d01d      	beq.n	3276 <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    323a:	2801      	cmp	r0, #1
    323c:	dd1d      	ble.n	327a <sys_clock_set_timeout+0x46>
    323e:	4a10      	ldr	r2, [pc, #64]	; (3280 <sys_clock_set_timeout+0x4c>)
    3240:	4b10      	ldr	r3, [pc, #64]	; (3284 <sys_clock_set_timeout+0x50>)
    3242:	4290      	cmp	r0, r2
    3244:	bfd4      	ite	le
    3246:	4604      	movle	r4, r0
    3248:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    324a:	f7ff fe85 	bl	2f58 <z_nrf_rtc_timer_read>
    324e:	4a0e      	ldr	r2, [pc, #56]	; (3288 <sys_clock_set_timeout+0x54>)
    3250:	e9d2 3100 	ldrd	r3, r1, [r2]
    3254:	1ac0      	subs	r0, r0, r3
		cyc = 0;
    3256:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
    325a:	4a0a      	ldr	r2, [pc, #40]	; (3284 <sys_clock_set_timeout+0x50>)
		cyc = 0;
    325c:	bf28      	it	cs
    325e:	2400      	movcs	r4, #0
	cyc += unannounced;
    3260:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    3262:	4294      	cmp	r4, r2
    3264:	bf28      	it	cs
    3266:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
    3268:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    326a:	f141 0100 	adc.w	r1, r1, #0
}
    326e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3272:	f7ff befd 	b.w	3070 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
    3276:	4c03      	ldr	r4, [pc, #12]	; (3284 <sys_clock_set_timeout+0x50>)
    3278:	e7e7      	b.n	324a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    327a:	2401      	movs	r4, #1
    327c:	e7e5      	b.n	324a <sys_clock_set_timeout+0x16>
    327e:	bf00      	nop
    3280:	007ffffe 	.word	0x007ffffe
    3284:	007fffff 	.word	0x007fffff
    3288:	20000300 	.word	0x20000300

0000328c <sys_clock_elapsed>:
{
    328c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    328e:	f7ff fe63 	bl	2f58 <z_nrf_rtc_timer_read>
    3292:	4b02      	ldr	r3, [pc, #8]	; (329c <sys_clock_elapsed+0x10>)
    3294:	681b      	ldr	r3, [r3, #0]
}
    3296:	1ac0      	subs	r0, r0, r3
    3298:	bd08      	pop	{r3, pc}
    329a:	bf00      	nop
    329c:	20000300 	.word	0x20000300

000032a0 <nrf_gpio_pin_port_decode>:
{
    32a0:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32a2:	6803      	ldr	r3, [r0, #0]
    switch (port)
    32a4:	095a      	lsrs	r2, r3, #5
    32a6:	d00d      	beq.n	32c4 <nrf_gpio_pin_port_decode+0x24>
    32a8:	2a01      	cmp	r2, #1
    32aa:	d014      	beq.n	32d6 <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32ac:	490f      	ldr	r1, [pc, #60]	; (32ec <nrf_gpio_pin_port_decode+0x4c>)
    32ae:	4810      	ldr	r0, [pc, #64]	; (32f0 <nrf_gpio_pin_port_decode+0x50>)
    32b0:	4a10      	ldr	r2, [pc, #64]	; (32f4 <nrf_gpio_pin_port_decode+0x54>)
    32b2:	f240 2347 	movw	r3, #583	; 0x247
    32b6:	f003 fef0 	bl	709a <assert_print>
    32ba:	480e      	ldr	r0, [pc, #56]	; (32f4 <nrf_gpio_pin_port_decode+0x54>)
    32bc:	f240 2147 	movw	r1, #583	; 0x247
    32c0:	f003 fee4 	bl	708c <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
    32c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    32c8:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32cc:	07d9      	lsls	r1, r3, #31
    32ce:	d5ed      	bpl.n	32ac <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    32d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    32d4:	e008      	b.n	32e8 <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
    32d6:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    32da:	f64f 72ff 	movw	r2, #65535	; 0xffff
    32de:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    32e0:	07d2      	lsls	r2, r2, #31
    32e2:	d5e3      	bpl.n	32ac <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
    32e4:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
    32e6:	4804      	ldr	r0, [pc, #16]	; (32f8 <nrf_gpio_pin_port_decode+0x58>)
}
    32e8:	bd08      	pop	{r3, pc}
    32ea:	bf00      	nop
    32ec:	0000864c 	.word	0x0000864c
    32f0:	00007ea3 	.word	0x00007ea3
    32f4:	00008619 	.word	0x00008619
    32f8:	50000300 	.word	0x50000300

000032fc <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    32fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3300:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3304:	2a08      	cmp	r2, #8
    3306:	d106      	bne.n	3316 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3308:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    330c:	2b05      	cmp	r3, #5
    330e:	d802      	bhi.n	3316 <nrf52_errata_103+0x1a>
    3310:	4a02      	ldr	r2, [pc, #8]	; (331c <nrf52_errata_103+0x20>)
    3312:	5cd0      	ldrb	r0, [r2, r3]
    3314:	4770      	bx	lr
                        return false;
    3316:	2000      	movs	r0, #0
}
    3318:	4770      	bx	lr
    331a:	bf00      	nop
    331c:	00008727 	.word	0x00008727

00003320 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3320:	4a02      	ldr	r2, [pc, #8]	; (332c <nvmc_wait+0xc>)
    3322:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3326:	2b00      	cmp	r3, #0
    3328:	d0fb      	beq.n	3322 <nvmc_wait+0x2>
}
    332a:	4770      	bx	lr
    332c:	4001e000 	.word	0x4001e000

00003330 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3330:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3332:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3336:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    333a:	2a08      	cmp	r2, #8
    333c:	d14e      	bne.n	33dc <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    333e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3342:	2100      	movs	r1, #0
    3344:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3348:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    334c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3350:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    3354:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
    3358:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    335c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    3360:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3364:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    3368:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    336c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
    3370:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3374:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
    3378:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    337c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3380:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3384:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
    3388:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    338c:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
    3390:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3394:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
    3398:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    339c:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
    33a0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    33a4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
    33a8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    33ac:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
    33b0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    33b4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
    33b8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    33bc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
    33c0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    33c4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
    33c8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    33cc:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
    33d0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    33d4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    33d8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    33dc:	f7ff ff8e 	bl	32fc <nrf52_errata_103>
    33e0:	b118      	cbz	r0, 33ea <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    33e2:	4b3b      	ldr	r3, [pc, #236]	; (34d0 <SystemInit+0x1a0>)
    33e4:	4a3b      	ldr	r2, [pc, #236]	; (34d4 <SystemInit+0x1a4>)
    33e6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    33ea:	f7ff ff87 	bl	32fc <nrf52_errata_103>
    33ee:	b118      	cbz	r0, 33f8 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    33f0:	4b39      	ldr	r3, [pc, #228]	; (34d8 <SystemInit+0x1a8>)
    33f2:	22fb      	movs	r2, #251	; 0xfb
    33f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    33f8:	f7ff ff80 	bl	32fc <nrf52_errata_103>
    33fc:	b170      	cbz	r0, 341c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    33fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3406:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    340a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    340e:	f022 020f 	bic.w	r2, r2, #15
    3412:	f003 030f 	and.w	r3, r3, #15
    3416:	4313      	orrs	r3, r2
    3418:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    341c:	f7ff ff6e 	bl	32fc <nrf52_errata_103>
    3420:	b120      	cbz	r0, 342c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    3422:	4b2e      	ldr	r3, [pc, #184]	; (34dc <SystemInit+0x1ac>)
    3424:	f44f 7200 	mov.w	r2, #512	; 0x200
    3428:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    342c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3430:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    3434:	2b08      	cmp	r3, #8
    3436:	d11a      	bne.n	346e <SystemInit+0x13e>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    3438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    343c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3440:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3442:	bf44      	itt	mi
    3444:	f06f 0201 	mvnmi.w	r2, #1
    3448:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    344c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3450:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
            {
                switch(var2)
    3454:	2b05      	cmp	r3, #5
    3456:	d802      	bhi.n	345e <SystemInit+0x12e>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    3458:	4a21      	ldr	r2, [pc, #132]	; (34e0 <SystemInit+0x1b0>)
    345a:	5cd3      	ldrb	r3, [r2, r3]
    345c:	b13b      	cbz	r3, 346e <SystemInit+0x13e>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    345e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3462:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    3466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    346a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    346e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3472:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    3476:	2a00      	cmp	r2, #0
    3478:	db03      	blt.n	3482 <SystemInit+0x152>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    347a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    347e:	2b00      	cmp	r3, #0
    3480:	da22      	bge.n	34c8 <SystemInit+0x198>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3482:	4918      	ldr	r1, [pc, #96]	; (34e4 <SystemInit+0x1b4>)
    3484:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3486:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    348a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    348e:	2412      	movs	r4, #18
    nvmc_wait();
    3490:	f7ff ff46 	bl	3320 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3494:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    3498:	f7ff ff42 	bl	3320 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    349c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    34a0:	f7ff ff3e 	bl	3320 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    34a4:	2300      	movs	r3, #0
    34a6:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    34aa:	f7ff ff39 	bl	3320 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    34ae:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    34b2:	490d      	ldr	r1, [pc, #52]	; (34e8 <SystemInit+0x1b8>)
    34b4:	4b0d      	ldr	r3, [pc, #52]	; (34ec <SystemInit+0x1bc>)
    34b6:	68ca      	ldr	r2, [r1, #12]
    34b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    34bc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    34be:	60cb      	str	r3, [r1, #12]
    34c0:	f3bf 8f4f 	dsb	sy
    __NOP();
    34c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    34c6:	e7fd      	b.n	34c4 <SystemInit+0x194>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    34c8:	4b09      	ldr	r3, [pc, #36]	; (34f0 <SystemInit+0x1c0>)
    34ca:	4a0a      	ldr	r2, [pc, #40]	; (34f4 <SystemInit+0x1c4>)
    34cc:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    34ce:	bd10      	pop	{r4, pc}
    34d0:	40005000 	.word	0x40005000
    34d4:	00038148 	.word	0x00038148
    34d8:	4000f000 	.word	0x4000f000
    34dc:	40029000 	.word	0x40029000
    34e0:	00008721 	.word	0x00008721
    34e4:	4001e000 	.word	0x4001e000
    34e8:	e000ed00 	.word	0xe000ed00
    34ec:	05fa0004 	.word	0x05fa0004
    34f0:	20000090 	.word	0x20000090
    34f4:	03d09000 	.word	0x03d09000

000034f8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    34f8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    34fa:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    34fc:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    34fe:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    3502:	fab2 f382 	clz	r3, r2
    3506:	f1c3 031f 	rsb	r3, r3, #31
    350a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    350c:	fa05 f403 	lsl.w	r4, r5, r3
    3510:	ea22 0404 	bic.w	r4, r2, r4
    3514:	e850 6f00 	ldrex	r6, [r0]
    3518:	4296      	cmp	r6, r2
    351a:	d104      	bne.n	3526 <nrfx_flag32_alloc+0x2e>
    351c:	e840 4c00 	strex	ip, r4, [r0]
    3520:	f1bc 0f00 	cmp.w	ip, #0
    3524:	d1f6      	bne.n	3514 <nrfx_flag32_alloc+0x1c>
    3526:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    352a:	d1e7      	bne.n	34fc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    352c:	4801      	ldr	r0, [pc, #4]	; (3534 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    352e:	700b      	strb	r3, [r1, #0]
}
    3530:	bd70      	pop	{r4, r5, r6, pc}
    3532:	bf00      	nop
    3534:	0bad0000 	.word	0x0bad0000

00003538 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    3538:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    353a:	6803      	ldr	r3, [r0, #0]
    353c:	40cb      	lsrs	r3, r1
    353e:	07db      	lsls	r3, r3, #31
    3540:	d414      	bmi.n	356c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    3542:	2301      	movs	r3, #1
    3544:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    3546:	6802      	ldr	r2, [r0, #0]
    3548:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    354c:	ea43 0102 	orr.w	r1, r3, r2
    3550:	e850 4f00 	ldrex	r4, [r0]
    3554:	4294      	cmp	r4, r2
    3556:	d104      	bne.n	3562 <nrfx_flag32_free+0x2a>
    3558:	e840 1c00 	strex	ip, r1, [r0]
    355c:	f1bc 0f00 	cmp.w	ip, #0
    3560:	d1f6      	bne.n	3550 <nrfx_flag32_free+0x18>
    3562:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3566:	d1ee      	bne.n	3546 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    3568:	4801      	ldr	r0, [pc, #4]	; (3570 <nrfx_flag32_free+0x38>)
}
    356a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    356c:	4801      	ldr	r0, [pc, #4]	; (3574 <nrfx_flag32_free+0x3c>)
    356e:	e7fc      	b.n	356a <nrfx_flag32_free+0x32>
    3570:	0bad0000 	.word	0x0bad0000
    3574:	0bad0004 	.word	0x0bad0004

00003578 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    3578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    357a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    switch (domain)
    357e:	4604      	mov	r4, r0
    3580:	b158      	cbz	r0, 359a <clock_stop+0x22>
    3582:	2801      	cmp	r0, #1
    3584:	d028      	beq.n	35d8 <clock_stop+0x60>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    3586:	4936      	ldr	r1, [pc, #216]	; (3660 <clock_stop+0xe8>)
    3588:	4836      	ldr	r0, [pc, #216]	; (3664 <clock_stop+0xec>)
    358a:	4a37      	ldr	r2, [pc, #220]	; (3668 <clock_stop+0xf0>)
    358c:	23d8      	movs	r3, #216	; 0xd8
    358e:	f003 fd84 	bl	709a <assert_print>
    3592:	4835      	ldr	r0, [pc, #212]	; (3668 <clock_stop+0xf0>)
    3594:	21d8      	movs	r1, #216	; 0xd8
            NRFX_ASSERT(0);
    3596:	f003 fd79 	bl	708c <assert_post_action>
    p_reg->INTENCLR = mask;
    359a:	2202      	movs	r2, #2
    359c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35a0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    35a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35a8:	2201      	movs	r2, #1
    35aa:	60da      	str	r2, [r3, #12]
            return;
    }

    bool stopped;
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    35ac:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    35ae:	2301      	movs	r3, #1
    35b0:	f88d 3007 	strb.w	r3, [sp, #7]
    35b4:	f242 7510 	movw	r5, #10000	; 0x2710
    35b8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    35bc:	b1bc      	cbz	r4, 35ee <clock_stop+0x76>
    35be:	2c01      	cmp	r4, #1
    35c0:	d035      	beq.n	362e <clock_stop+0xb6>
            NRFX_ASSERT(0);
    35c2:	4927      	ldr	r1, [pc, #156]	; (3660 <clock_stop+0xe8>)
    35c4:	4827      	ldr	r0, [pc, #156]	; (3664 <clock_stop+0xec>)
    35c6:	4a29      	ldr	r2, [pc, #164]	; (366c <clock_stop+0xf4>)
    35c8:	f240 3347 	movw	r3, #839	; 0x347
    35cc:	f003 fd65 	bl	709a <assert_print>
    35d0:	4826      	ldr	r0, [pc, #152]	; (366c <clock_stop+0xf4>)
    35d2:	f240 3147 	movw	r1, #839	; 0x347
    35d6:	e7de      	b.n	3596 <clock_stop+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35d8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    35da:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    35e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35e6:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    35e8:	f10d 0707 	add.w	r7, sp, #7
    35ec:	e7df      	b.n	35ae <clock_stop+0x36>
            if (p_clk_src != NULL)
    35ee:	b19f      	cbz	r7, 3618 <clock_stop+0xa0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35f0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    35f4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    35f8:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35fa:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    35fe:	03d8      	lsls	r0, r3, #15
    3600:	d513      	bpl.n	362a <clock_stop+0xb2>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3602:	f89d 0007 	ldrb.w	r0, [sp, #7]
    3606:	2801      	cmp	r0, #1
    3608:	d103      	bne.n	3612 <clock_stop+0x9a>
    360a:	f003 ffa9 	bl	7560 <nrfx_busy_wait>
    360e:	3d01      	subs	r5, #1
    3610:	d1d4      	bne.n	35bc <clock_stop+0x44>
    {
        NRFX_LOG_ERROR("Failed to stop clock domain: %d.", domain);
    }

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3612:	2c01      	cmp	r4, #1
    3614:	d109      	bne.n	362a <clock_stop+0xb2>
    3616:	e014      	b.n	3642 <clock_stop+0xca>
    3618:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    361c:	03d9      	lsls	r1, r3, #15
    361e:	d504      	bpl.n	362a <clock_stop+0xb2>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3620:	2001      	movs	r0, #1
    3622:	f003 ff9d 	bl	7560 <nrfx_busy_wait>
    3626:	3d01      	subs	r5, #1
    3628:	d1f6      	bne.n	3618 <clock_stop+0xa0>
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    362a:	b003      	add	sp, #12
    362c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if (p_clk_src != NULL)
    362e:	b167      	cbz	r7, 364a <clock_stop+0xd2>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3630:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3634:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3638:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    363a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    363e:	03da      	lsls	r2, r3, #15
    3640:	d4df      	bmi.n	3602 <clock_stop+0x8a>
            m_clock_cb.hfclk_started = false;
    3642:	4b0b      	ldr	r3, [pc, #44]	; (3670 <clock_stop+0xf8>)
    3644:	2200      	movs	r2, #0
    3646:	715a      	strb	r2, [r3, #5]
    3648:	e7ef      	b.n	362a <clock_stop+0xb2>
    364a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    364e:	03db      	lsls	r3, r3, #15
    3650:	d5f7      	bpl.n	3642 <clock_stop+0xca>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    3652:	2001      	movs	r0, #1
    3654:	f003 ff84 	bl	7560 <nrfx_busy_wait>
    3658:	3d01      	subs	r5, #1
    365a:	d1f6      	bne.n	364a <clock_stop+0xd2>
    365c:	e7f1      	b.n	3642 <clock_stop+0xca>
    365e:	bf00      	nop
    3660:	000080a0 	.word	0x000080a0
    3664:	00007ea3 	.word	0x00007ea3
    3668:	0000872d 	.word	0x0000872d
    366c:	0000876a 	.word	0x0000876a
    3670:	20000a0c 	.word	0x20000a0c

00003674 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    3674:	b508      	push	{r3, lr}
    NRFX_ASSERT(event_handler);
    3676:	b958      	cbnz	r0, 3690 <nrfx_clock_init+0x1c>
    3678:	490a      	ldr	r1, [pc, #40]	; (36a4 <nrfx_clock_init+0x30>)
    367a:	480b      	ldr	r0, [pc, #44]	; (36a8 <nrfx_clock_init+0x34>)
    367c:	4a0b      	ldr	r2, [pc, #44]	; (36ac <nrfx_clock_init+0x38>)
    367e:	f240 1315 	movw	r3, #277	; 0x115
    3682:	f003 fd0a 	bl	709a <assert_print>
    3686:	4809      	ldr	r0, [pc, #36]	; (36ac <nrfx_clock_init+0x38>)
    3688:	f240 1115 	movw	r1, #277	; 0x115
    368c:	f003 fcfe 	bl	708c <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3690:	4b07      	ldr	r3, [pc, #28]	; (36b0 <nrfx_clock_init+0x3c>)
    3692:	791a      	ldrb	r2, [r3, #4]
    3694:	b922      	cbnz	r2, 36a0 <nrfx_clock_init+0x2c>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    3696:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3698:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    369a:	4806      	ldr	r0, [pc, #24]	; (36b4 <nrfx_clock_init+0x40>)
        m_clock_cb.module_initialized = true;
    369c:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    369e:	bd08      	pop	{r3, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    36a0:	4805      	ldr	r0, [pc, #20]	; (36b8 <nrfx_clock_init+0x44>)
    return err_code;
    36a2:	e7fc      	b.n	369e <nrfx_clock_init+0x2a>
    36a4:	0000879e 	.word	0x0000879e
    36a8:	00007ea3 	.word	0x00007ea3
    36ac:	0000872d 	.word	0x0000872d
    36b0:	20000a0c 	.word	0x20000a0c
    36b4:	0bad0000 	.word	0x0bad0000
    36b8:	0bad000c 	.word	0x0bad000c

000036bc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    36bc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    36be:	4b0d      	ldr	r3, [pc, #52]	; (36f4 <nrfx_clock_enable+0x38>)
    36c0:	791b      	ldrb	r3, [r3, #4]
    36c2:	b95b      	cbnz	r3, 36dc <nrfx_clock_enable+0x20>
    36c4:	490c      	ldr	r1, [pc, #48]	; (36f8 <nrfx_clock_enable+0x3c>)
    36c6:	480d      	ldr	r0, [pc, #52]	; (36fc <nrfx_clock_enable+0x40>)
    36c8:	4a0d      	ldr	r2, [pc, #52]	; (3700 <nrfx_clock_enable+0x44>)
    36ca:	f44f 7397 	mov.w	r3, #302	; 0x12e
    36ce:	f003 fce4 	bl	709a <assert_print>
    36d2:	480b      	ldr	r0, [pc, #44]	; (3700 <nrfx_clock_enable+0x44>)
    36d4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    36d8:	f003 fcd8 	bl	708c <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    36dc:	2000      	movs	r0, #0
    36de:	f7fe f911 	bl	1904 <arch_irq_is_enabled>
    36e2:	b908      	cbnz	r0, 36e8 <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    36e4:	f7fe f900 	bl	18e8 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36ec:	2200      	movs	r2, #0
    36ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    36f2:	bd08      	pop	{r3, pc}
    36f4:	20000a0c 	.word	0x20000a0c
    36f8:	000087ac 	.word	0x000087ac
    36fc:	00007ea3 	.word	0x00007ea3
    3700:	0000872d 	.word	0x0000872d

00003704 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    3704:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    3706:	4b29      	ldr	r3, [pc, #164]	; (37ac <nrfx_clock_start+0xa8>)
    3708:	791b      	ldrb	r3, [r3, #4]
    370a:	b95b      	cbnz	r3, 3724 <nrfx_clock_start+0x20>
    370c:	4928      	ldr	r1, [pc, #160]	; (37b0 <nrfx_clock_start+0xac>)
    370e:	4a29      	ldr	r2, [pc, #164]	; (37b4 <nrfx_clock_start+0xb0>)
    3710:	4829      	ldr	r0, [pc, #164]	; (37b8 <nrfx_clock_start+0xb4>)
    3712:	f44f 73b4 	mov.w	r3, #360	; 0x168
    3716:	f003 fcc0 	bl	709a <assert_print>
    371a:	f44f 71b4 	mov.w	r1, #360	; 0x168
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    371e:	4825      	ldr	r0, [pc, #148]	; (37b4 <nrfx_clock_start+0xb0>)
    3720:	f003 fcb4 	bl	708c <assert_post_action>
    switch (domain)
    3724:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3728:	b158      	cbz	r0, 3742 <nrfx_clock_start+0x3e>
    372a:	2801      	cmp	r0, #1
    372c:	d034      	beq.n	3798 <nrfx_clock_start+0x94>
            NRFX_ASSERT(0);
    372e:	4923      	ldr	r1, [pc, #140]	; (37bc <nrfx_clock_start+0xb8>)
    3730:	4a20      	ldr	r2, [pc, #128]	; (37b4 <nrfx_clock_start+0xb0>)
    3732:	4821      	ldr	r0, [pc, #132]	; (37b8 <nrfx_clock_start+0xb4>)
    3734:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    3738:	f003 fcaf 	bl	709a <assert_print>
    373c:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    3740:	e7ed      	b.n	371e <nrfx_clock_start+0x1a>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3742:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3746:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    374a:	03c8      	lsls	r0, r1, #15
    374c:	d512      	bpl.n	3774 <nrfx_clock_start+0x70>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    374e:	f002 0303 	and.w	r3, r2, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    3752:	2b01      	cmp	r3, #1
    3754:	d11a      	bne.n	378c <nrfx_clock_start+0x88>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3756:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    375a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    375e:	2300      	movs	r3, #0
    3760:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    3764:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    3768:	2302      	movs	r3, #2
    376a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    376e:	2301      	movs	r3, #1
    3770:	6093      	str	r3, [r2, #8]
}
    3772:	e00a      	b.n	378a <nrfx_clock_start+0x86>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    3774:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    3778:	07d1      	lsls	r1, r2, #31
    377a:	d50b      	bpl.n	3794 <nrfx_clock_start+0x90>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    377c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    3780:	0792      	lsls	r2, r2, #30
    3782:	d404      	bmi.n	378e <nrfx_clock_start+0x8a>
    p_reg->INTENSET = mask;
    3784:	2202      	movs	r2, #2
    3786:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
            break;
    }
}
    378a:	bd08      	pop	{r3, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    378c:	b113      	cbz	r3, 3794 <nrfx_clock_start+0x90>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    378e:	2000      	movs	r0, #0
    3790:	f7ff fef2 	bl	3578 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    3794:	2300      	movs	r3, #0
    3796:	e7de      	b.n	3756 <nrfx_clock_start+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3798:	2200      	movs	r2, #0
    379a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    379e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    37a2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37a6:	6018      	str	r0, [r3, #0]
}
    37a8:	e7ef      	b.n	378a <nrfx_clock_start+0x86>
    37aa:	bf00      	nop
    37ac:	20000a0c 	.word	0x20000a0c
    37b0:	000087ac 	.word	0x000087ac
    37b4:	0000872d 	.word	0x0000872d
    37b8:	00007ea3 	.word	0x00007ea3
    37bc:	000080a0 	.word	0x000080a0

000037c0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    37c0:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    37c2:	4b09      	ldr	r3, [pc, #36]	; (37e8 <nrfx_clock_stop+0x28>)
    37c4:	791b      	ldrb	r3, [r3, #4]
    37c6:	b95b      	cbnz	r3, 37e0 <nrfx_clock_stop+0x20>
    37c8:	4908      	ldr	r1, [pc, #32]	; (37ec <nrfx_clock_stop+0x2c>)
    37ca:	4809      	ldr	r0, [pc, #36]	; (37f0 <nrfx_clock_stop+0x30>)
    37cc:	4a09      	ldr	r2, [pc, #36]	; (37f4 <nrfx_clock_stop+0x34>)
    37ce:	f240 13ad 	movw	r3, #429	; 0x1ad
    37d2:	f003 fc62 	bl	709a <assert_print>
    37d6:	4807      	ldr	r0, [pc, #28]	; (37f4 <nrfx_clock_stop+0x34>)
    37d8:	f240 11ad 	movw	r1, #429	; 0x1ad
    37dc:	f003 fc56 	bl	708c <assert_post_action>
    clock_stop(domain);
}
    37e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    clock_stop(domain);
    37e4:	f7ff bec8 	b.w	3578 <clock_stop>
    37e8:	20000a0c 	.word	0x20000a0c
    37ec:	000087ac 	.word	0x000087ac
    37f0:	00007ea3 	.word	0x00007ea3
    37f4:	0000872d 	.word	0x0000872d

000037f8 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    37f8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    37fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37fe:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3802:	b16a      	cbz	r2, 3820 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3804:	2200      	movs	r2, #0
    3806:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    380a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    380e:	2201      	movs	r2, #1
    3810:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3814:	4b11      	ldr	r3, [pc, #68]	; (385c <nrfx_power_clock_irq_handler+0x64>)
    3816:	7958      	ldrb	r0, [r3, #5]
    3818:	b910      	cbnz	r0, 3820 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    381a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    381c:	681b      	ldr	r3, [r3, #0]
    381e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3824:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3828:	b172      	cbz	r2, 3848 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    382a:	2200      	movs	r2, #0
    382c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3830:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3834:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3838:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    383c:	0792      	lsls	r2, r2, #30
    383e:	d104      	bne.n	384a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3840:	2201      	movs	r2, #1
    3842:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3846:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3848:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    384a:	2202      	movs	r2, #2
    384c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3850:	4b02      	ldr	r3, [pc, #8]	; (385c <nrfx_power_clock_irq_handler+0x64>)
}
    3852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	2001      	movs	r0, #1
    385a:	4718      	bx	r3
    385c:	20000a0c 	.word	0x20000a0c

00003860 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3860:	4b03      	ldr	r3, [pc, #12]	; (3870 <pin_in_use_by_te+0x10>)
    3862:	3008      	adds	r0, #8
    3864:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3868:	f3c0 1040 	ubfx	r0, r0, #5, #1
    386c:	4770      	bx	lr
    386e:	bf00      	nop
    3870:	20000094 	.word	0x20000094

00003874 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3874:	4b04      	ldr	r3, [pc, #16]	; (3888 <pin_has_trigger+0x14>)
    3876:	3008      	adds	r0, #8
    3878:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    387c:	f010 001c 	ands.w	r0, r0, #28
    3880:	bf18      	it	ne
    3882:	2001      	movne	r0, #1
    3884:	4770      	bx	lr
    3886:	bf00      	nop
    3888:	20000094 	.word	0x20000094

0000388c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    388c:	4b03      	ldr	r3, [pc, #12]	; (389c <pin_is_output+0x10>)
    388e:	3008      	adds	r0, #8
    3890:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3894:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3898:	4770      	bx	lr
    389a:	bf00      	nop
    389c:	20000094 	.word	0x20000094

000038a0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    38a0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    38a2:	f100 0308 	add.w	r3, r0, #8
    38a6:	4c0c      	ldr	r4, [pc, #48]	; (38d8 <call_handler+0x38>)
    38a8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    38ac:	05da      	lsls	r2, r3, #23
{
    38ae:	4605      	mov	r5, r0
    38b0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    38b2:	d507      	bpl.n	38c4 <call_handler+0x24>
    38b4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    38b8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    38bc:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    38c0:	6852      	ldr	r2, [r2, #4]
    38c2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    38c4:	68a3      	ldr	r3, [r4, #8]
    38c6:	b12b      	cbz	r3, 38d4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    38c8:	68e2      	ldr	r2, [r4, #12]
    38ca:	4631      	mov	r1, r6
    38cc:	4628      	mov	r0, r5
    }
}
    38ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    38d2:	4718      	bx	r3
}
    38d4:	bd70      	pop	{r4, r5, r6, pc}
    38d6:	bf00      	nop
    38d8:	20000094 	.word	0x20000094

000038dc <release_handler>:
{
    38dc:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    38de:	4a18      	ldr	r2, [pc, #96]	; (3940 <release_handler+0x64>)
    38e0:	3008      	adds	r0, #8
    38e2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    38e6:	05d9      	lsls	r1, r3, #23
    38e8:	d51d      	bpl.n	3926 <release_handler+0x4a>
    38ea:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    38ee:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    38f2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    38f6:	f102 040e 	add.w	r4, r2, #14
    38fa:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    38fc:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3900:	f413 7f80 	tst.w	r3, #256	; 0x100
    3904:	d003      	beq.n	390e <release_handler+0x32>
    3906:	f3c3 2343 	ubfx	r3, r3, #9, #4
    390a:	4299      	cmp	r1, r3
    390c:	d00b      	beq.n	3926 <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    390e:	3001      	adds	r0, #1
    3910:	2830      	cmp	r0, #48	; 0x30
    3912:	d1f3      	bne.n	38fc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3914:	2300      	movs	r3, #0
    3916:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    391a:	480a      	ldr	r0, [pc, #40]	; (3944 <release_handler+0x68>)
    391c:	f7ff fe0c 	bl	3538 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3920:	4b09      	ldr	r3, [pc, #36]	; (3948 <release_handler+0x6c>)
    3922:	4298      	cmp	r0, r3
    3924:	d100      	bne.n	3928 <release_handler+0x4c>
}
    3926:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3928:	4908      	ldr	r1, [pc, #32]	; (394c <release_handler+0x70>)
    392a:	4809      	ldr	r0, [pc, #36]	; (3950 <release_handler+0x74>)
    392c:	4a09      	ldr	r2, [pc, #36]	; (3954 <release_handler+0x78>)
    392e:	f44f 7399 	mov.w	r3, #306	; 0x132
    3932:	f003 fbb2 	bl	709a <assert_print>
    3936:	4807      	ldr	r0, [pc, #28]	; (3954 <release_handler+0x78>)
    3938:	f44f 7199 	mov.w	r1, #306	; 0x132
    393c:	f003 fba6 	bl	708c <assert_post_action>
    3940:	20000094 	.word	0x20000094
    3944:	20000108 	.word	0x20000108
    3948:	0bad0000 	.word	0x0bad0000
    394c:	0000869b 	.word	0x0000869b
    3950:	00007ea3 	.word	0x00007ea3
    3954:	000087d5 	.word	0x000087d5

00003958 <pin_handler_trigger_uninit>:
{
    3958:	b538      	push	{r3, r4, r5, lr}
    395a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    395c:	f7ff ff80 	bl	3860 <pin_in_use_by_te>
    3960:	4c09      	ldr	r4, [pc, #36]	; (3988 <pin_handler_trigger_uninit+0x30>)
    3962:	f102 0508 	add.w	r5, r2, #8
    3966:	b140      	cbz	r0, 397a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3968:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    396c:	4907      	ldr	r1, [pc, #28]	; (398c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    396e:	0b5b      	lsrs	r3, r3, #13
    3970:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3974:	2000      	movs	r0, #0
    3976:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    397a:	4610      	mov	r0, r2
    397c:	f7ff ffae 	bl	38dc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3980:	2300      	movs	r3, #0
    3982:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3986:	bd38      	pop	{r3, r4, r5, pc}
    3988:	20000094 	.word	0x20000094
    398c:	40006000 	.word	0x40006000

00003990 <nrf_gpio_pin_port_decode>:
{
    3990:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3992:	6802      	ldr	r2, [r0, #0]
{
    3994:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3996:	4610      	mov	r0, r2
    3998:	f003 fde4 	bl	7564 <nrf_gpio_pin_present_check>
    399c:	b958      	cbnz	r0, 39b6 <nrf_gpio_pin_port_decode+0x26>
    399e:	4911      	ldr	r1, [pc, #68]	; (39e4 <nrf_gpio_pin_port_decode+0x54>)
    39a0:	4a11      	ldr	r2, [pc, #68]	; (39e8 <nrf_gpio_pin_port_decode+0x58>)
    39a2:	4812      	ldr	r0, [pc, #72]	; (39ec <nrf_gpio_pin_port_decode+0x5c>)
    39a4:	f240 2347 	movw	r3, #583	; 0x247
    39a8:	f003 fb77 	bl	709a <assert_print>
    39ac:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
    39b0:	480d      	ldr	r0, [pc, #52]	; (39e8 <nrf_gpio_pin_port_decode+0x58>)
    39b2:	f003 fb6b 	bl	708c <assert_post_action>
    *p_pin = pin_number & 0x1F;
    39b6:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39ba:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
    39bc:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39be:	d00b      	beq.n	39d8 <nrf_gpio_pin_port_decode+0x48>
    39c0:	2a01      	cmp	r2, #1
    39c2:	d00c      	beq.n	39de <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
    39c4:	490a      	ldr	r1, [pc, #40]	; (39f0 <nrf_gpio_pin_port_decode+0x60>)
    39c6:	4a08      	ldr	r2, [pc, #32]	; (39e8 <nrf_gpio_pin_port_decode+0x58>)
    39c8:	4808      	ldr	r0, [pc, #32]	; (39ec <nrf_gpio_pin_port_decode+0x5c>)
    39ca:	f44f 7313 	mov.w	r3, #588	; 0x24c
    39ce:	f003 fb64 	bl	709a <assert_print>
    39d2:	f44f 7113 	mov.w	r1, #588	; 0x24c
    39d6:	e7eb      	b.n	39b0 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
    39d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    39dc:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    39de:	4805      	ldr	r0, [pc, #20]	; (39f4 <nrf_gpio_pin_port_decode+0x64>)
    39e0:	e7fc      	b.n	39dc <nrf_gpio_pin_port_decode+0x4c>
    39e2:	bf00      	nop
    39e4:	0000864c 	.word	0x0000864c
    39e8:	00008619 	.word	0x00008619
    39ec:	00007ea3 	.word	0x00007ea3
    39f0:	000080a0 	.word	0x000080a0
    39f4:	50000300 	.word	0x50000300

000039f8 <nrfx_gpiote_input_configure>:
{
    39f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    39fa:	4604      	mov	r4, r0
    39fc:	b085      	sub	sp, #20
    39fe:	4617      	mov	r7, r2
    3a00:	461d      	mov	r5, r3
    if (p_input_config)
    3a02:	b1d9      	cbz	r1, 3a3c <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
    3a04:	f003 fdbf 	bl	7586 <pin_is_task_output>
    3a08:	bb00      	cbnz	r0, 3a4c <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3a0a:	460b      	mov	r3, r1
    3a0c:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3a10:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    3a14:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3a18:	f10d 020f 	add.w	r2, sp, #15
    3a1c:	f10d 010e 	add.w	r1, sp, #14
    3a20:	4620      	mov	r0, r4
    3a22:	f003 fdbb 	bl	759c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3a26:	4a44      	ldr	r2, [pc, #272]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a28:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3a2c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3a30:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3a34:	f043 0301 	orr.w	r3, r3, #1
    3a38:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3a3c:	b34f      	cbz	r7, 3a92 <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
    3a3e:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3a40:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3a42:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    3a44:	f7ff ff22 	bl	388c <pin_is_output>
    3a48:	b110      	cbz	r0, 3a50 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
    3a4a:	b1ba      	cbz	r2, 3a7c <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
    3a4c:	483b      	ldr	r0, [pc, #236]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3a4e:	e022      	b.n	3a96 <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3a50:	4b39      	ldr	r3, [pc, #228]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a52:	f104 0c08 	add.w	ip, r4, #8
    3a56:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
    3a5a:	f021 0120 	bic.w	r1, r1, #32
    3a5e:	04c9      	lsls	r1, r1, #19
    3a60:	0cc9      	lsrs	r1, r1, #19
    3a62:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
    3a66:	b14a      	cbz	r2, 3a7c <nrfx_gpiote_input_configure+0x84>
                if (!edge)
    3a68:	2e03      	cmp	r6, #3
    3a6a:	d8ef      	bhi.n	3a4c <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3a6c:	687a      	ldr	r2, [r7, #4]
    3a6e:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3a70:	b99e      	cbnz	r6, 3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
    3a72:	4b33      	ldr	r3, [pc, #204]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
    3a74:	f507 77a2 	add.w	r7, r7, #324	; 0x144
    3a78:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3a7c:	4a2e      	ldr	r2, [pc, #184]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3a7e:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3a82:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3a86:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3a8a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    3a8e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    3a92:	bb3d      	cbnz	r5, 3ae4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4c>
        err = NRFX_SUCCESS;
    3a94:	482b      	ldr	r0, [pc, #172]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
}
    3a96:	b005      	add	sp, #20
    3a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3a9a:	00ba      	lsls	r2, r7, #2
    3a9c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3aa0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3aa4:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    3aa8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3aac:	f020 0003 	bic.w	r0, r0, #3
    3ab0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    3ab4:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3ab8:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    3abc:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    3ac0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3ac4:	0220      	lsls	r0, r4, #8
    3ac6:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3aca:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    3ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    3ad2:	ea40 000e 	orr.w	r0, r0, lr
    3ad6:	f041 0120 	orr.w	r1, r1, #32
    3ada:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
    3ade:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    3ae2:	e7cb      	b.n	3a7c <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3ae4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    3ae8:	4620      	mov	r0, r4
    3aea:	f7ff fef7 	bl	38dc <release_handler>
    if (!handler)
    3aee:	2e00      	cmp	r6, #0
    3af0:	d0d0      	beq.n	3a94 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3af2:	4d11      	ldr	r5, [pc, #68]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3af4:	e9d5 2300 	ldrd	r2, r3, [r5]
    3af8:	4296      	cmp	r6, r2
    3afa:	d101      	bne.n	3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>
    3afc:	429f      	cmp	r7, r3
    3afe:	d018      	beq.n	3b32 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3b00:	4811      	ldr	r0, [pc, #68]	; (3b48 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xb0>)
    3b02:	f10d 010f 	add.w	r1, sp, #15
    3b06:	f7ff fcf7 	bl	34f8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3b0a:	4b0e      	ldr	r3, [pc, #56]	; (3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>)
    3b0c:	4298      	cmp	r0, r3
    3b0e:	d1c2      	bne.n	3a96 <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
    3b10:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    3b14:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3b18:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b1c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    3b1e:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3b20:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    3b24:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    3b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3b2c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    3b30:	e7b0      	b.n	3a94 <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3b32:	2200      	movs	r2, #0
    3b34:	e7ee      	b.n	3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>
    3b36:	bf00      	nop
    3b38:	20000094 	.word	0x20000094
    3b3c:	0bad0004 	.word	0x0bad0004
    3b40:	40006000 	.word	0x40006000
    3b44:	0bad0000 	.word	0x0bad0000
    3b48:	20000108 	.word	0x20000108

00003b4c <nrfx_gpiote_output_configure>:
{
    3b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4e:	4604      	mov	r4, r0
    3b50:	b085      	sub	sp, #20
    3b52:	4615      	mov	r5, r2
    if (p_config)
    3b54:	b321      	cbz	r1, 3ba0 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    3b56:	f7ff fe99 	bl	388c <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3b5a:	b920      	cbnz	r0, 3b66 <nrfx_gpiote_output_configure+0x1a>
    3b5c:	4620      	mov	r0, r4
    3b5e:	f7ff fe7f 	bl	3860 <pin_in_use_by_te>
    3b62:	2800      	cmp	r0, #0
    3b64:	d15e      	bne.n	3c24 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3b66:	4620      	mov	r0, r4
    3b68:	f7ff fe84 	bl	3874 <pin_has_trigger>
    3b6c:	b110      	cbz	r0, 3b74 <nrfx_gpiote_output_configure+0x28>
    3b6e:	784b      	ldrb	r3, [r1, #1]
    3b70:	2b01      	cmp	r3, #1
    3b72:	d057      	beq.n	3c24 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3b74:	2301      	movs	r3, #1
    3b76:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3b7a:	2300      	movs	r3, #0
    3b7c:	e9cd 1300 	strd	r1, r3, [sp]
    3b80:	1c4a      	adds	r2, r1, #1
    3b82:	1c8b      	adds	r3, r1, #2
    3b84:	4620      	mov	r0, r4
    3b86:	f10d 010f 	add.w	r1, sp, #15
    3b8a:	f003 fd07 	bl	759c <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3b8e:	4a26      	ldr	r2, [pc, #152]	; (3c28 <nrfx_gpiote_output_configure+0xdc>)
    3b90:	f104 0108 	add.w	r1, r4, #8
    3b94:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3b98:	f043 0303 	orr.w	r3, r3, #3
    3b9c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3ba0:	b915      	cbnz	r5, 3ba8 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    3ba2:	4822      	ldr	r0, [pc, #136]	; (3c2c <nrfx_gpiote_output_configure+0xe0>)
}
    3ba4:	b005      	add	sp, #20
    3ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    3ba8:	4620      	mov	r0, r4
    3baa:	f7ff fe6f 	bl	388c <pin_is_output>
        if (pin_is_input(pin))
    3bae:	b3c8      	cbz	r0, 3c24 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3bb0:	4e1d      	ldr	r6, [pc, #116]	; (3c28 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    3bb2:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3bb6:	f104 0708 	add.w	r7, r4, #8
    3bba:	4661      	mov	r1, ip
    3bbc:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    3bc0:	0089      	lsls	r1, r1, #2
    3bc2:	f020 0020 	bic.w	r0, r0, #32
    3bc6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3bca:	04c0      	lsls	r0, r0, #19
    3bcc:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3bd0:	0cc0      	lsrs	r0, r0, #19
    3bd2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3bd6:	2300      	movs	r3, #0
    3bd8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3bdc:	786a      	ldrb	r2, [r5, #1]
    3bde:	2a00      	cmp	r2, #0
    3be0:	d0df      	beq.n	3ba2 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3be2:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3be6:	78ad      	ldrb	r5, [r5, #2]
    3be8:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    3bec:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3bf0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3bf4:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3bf8:	0223      	lsls	r3, r4, #8
    3bfa:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3bfe:	0412      	lsls	r2, r2, #16
    3c00:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c04:	ea43 030e 	orr.w	r3, r3, lr
    3c08:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3c0a:	052a      	lsls	r2, r5, #20
    3c0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3c10:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3c14:	4313      	orrs	r3, r2
    3c16:	f040 0020 	orr.w	r0, r0, #32
    3c1a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3c1e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3c22:	e7be      	b.n	3ba2 <nrfx_gpiote_output_configure+0x56>
{
    3c24:	4802      	ldr	r0, [pc, #8]	; (3c30 <nrfx_gpiote_output_configure+0xe4>)
    3c26:	e7bd      	b.n	3ba4 <nrfx_gpiote_output_configure+0x58>
    3c28:	20000094 	.word	0x20000094
    3c2c:	0bad0000 	.word	0x0bad0000
    3c30:	0bad0004 	.word	0x0bad0004

00003c34 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3c34:	4b01      	ldr	r3, [pc, #4]	; (3c3c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    3c36:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    3c3a:	4770      	bx	lr
    3c3c:	20000094 	.word	0x20000094

00003c40 <nrfx_gpiote_channel_get>:
{
    3c40:	b508      	push	{r3, lr}
    3c42:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
    3c44:	b959      	cbnz	r1, 3c5e <nrfx_gpiote_channel_get+0x1e>
    3c46:	490c      	ldr	r1, [pc, #48]	; (3c78 <nrfx_gpiote_channel_get+0x38>)
    3c48:	480c      	ldr	r0, [pc, #48]	; (3c7c <nrfx_gpiote_channel_get+0x3c>)
    3c4a:	4a0d      	ldr	r2, [pc, #52]	; (3c80 <nrfx_gpiote_channel_get+0x40>)
    3c4c:	f240 2335 	movw	r3, #565	; 0x235
    3c50:	f003 fa23 	bl	709a <assert_print>
    3c54:	480a      	ldr	r0, [pc, #40]	; (3c80 <nrfx_gpiote_channel_get+0x40>)
    3c56:	f240 2135 	movw	r1, #565	; 0x235
    3c5a:	f003 fa17 	bl	708c <assert_post_action>
    if (pin_in_use_by_te(pin))
    3c5e:	f7ff fdff 	bl	3860 <pin_in_use_by_te>
    3c62:	b138      	cbz	r0, 3c74 <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c64:	4b07      	ldr	r3, [pc, #28]	; (3c84 <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
    3c66:	4808      	ldr	r0, [pc, #32]	; (3c88 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3c68:	3208      	adds	r2, #8
    3c6a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3c6e:	0b5b      	lsrs	r3, r3, #13
    3c70:	700b      	strb	r3, [r1, #0]
}
    3c72:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3c74:	4805      	ldr	r0, [pc, #20]	; (3c8c <nrfx_gpiote_channel_get+0x4c>)
    3c76:	e7fc      	b.n	3c72 <nrfx_gpiote_channel_get+0x32>
    3c78:	00008813 	.word	0x00008813
    3c7c:	00007ea3 	.word	0x00007ea3
    3c80:	000087d5 	.word	0x000087d5
    3c84:	20000094 	.word	0x20000094
    3c88:	0bad0000 	.word	0x0bad0000
    3c8c:	0bad0004 	.word	0x0bad0004

00003c90 <nrfx_gpiote_init>:
{
    3c90:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3c92:	4c0f      	ldr	r4, [pc, #60]	; (3cd0 <nrfx_gpiote_init+0x40>)
    3c94:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3c98:	b9bd      	cbnz	r5, 3cca <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3c9a:	2260      	movs	r2, #96	; 0x60
    3c9c:	4629      	mov	r1, r5
    3c9e:	f104 0010 	add.w	r0, r4, #16
    3ca2:	f003 fa42 	bl	712a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3ca6:	2006      	movs	r0, #6
    3ca8:	f7fd fe1e 	bl	18e8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3cac:	4b09      	ldr	r3, [pc, #36]	; (3cd4 <nrfx_gpiote_init+0x44>)
    return err_code;
    3cae:	480a      	ldr	r0, [pc, #40]	; (3cd8 <nrfx_gpiote_init+0x48>)
    3cb0:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3cb4:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3cb8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3cbc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3cc0:	2301      	movs	r3, #1
    3cc2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3cc6:	6763      	str	r3, [r4, #116]	; 0x74
}
    3cc8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3cca:	4804      	ldr	r0, [pc, #16]	; (3cdc <nrfx_gpiote_init+0x4c>)
    3ccc:	e7fc      	b.n	3cc8 <nrfx_gpiote_init+0x38>
    3cce:	bf00      	nop
    3cd0:	20000094 	.word	0x20000094
    3cd4:	40006000 	.word	0x40006000
    3cd8:	0bad0000 	.word	0x0bad0000
    3cdc:	0bad0005 	.word	0x0bad0005

00003ce0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3ce0:	4b03      	ldr	r3, [pc, #12]	; (3cf0 <nrfx_gpiote_is_init+0x10>)
    3ce2:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3ce6:	3800      	subs	r0, #0
    3ce8:	bf18      	it	ne
    3cea:	2001      	movne	r0, #1
    3cec:	4770      	bx	lr
    3cee:	bf00      	nop
    3cf0:	20000094 	.word	0x20000094

00003cf4 <nrfx_gpiote_channel_free>:
{
    3cf4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3cf6:	4801      	ldr	r0, [pc, #4]	; (3cfc <nrfx_gpiote_channel_free+0x8>)
    3cf8:	f7ff bc1e 	b.w	3538 <nrfx_flag32_free>
    3cfc:	20000104 	.word	0x20000104

00003d00 <nrfx_gpiote_channel_alloc>:
{
    3d00:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3d02:	4801      	ldr	r0, [pc, #4]	; (3d08 <nrfx_gpiote_channel_alloc+0x8>)
    3d04:	f7ff bbf8 	b.w	34f8 <nrfx_flag32_alloc>
    3d08:	20000104 	.word	0x20000104

00003d0c <nrfx_gpiote_trigger_enable>:
{
    3d0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3d0e:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
    3d10:	f7ff fdb0 	bl	3874 <pin_has_trigger>
    3d14:	b958      	cbnz	r0, 3d2e <nrfx_gpiote_trigger_enable+0x22>
    3d16:	492d      	ldr	r1, [pc, #180]	; (3dcc <nrfx_gpiote_trigger_enable+0xc0>)
    3d18:	4a2d      	ldr	r2, [pc, #180]	; (3dd0 <nrfx_gpiote_trigger_enable+0xc4>)
    3d1a:	482e      	ldr	r0, [pc, #184]	; (3dd4 <nrfx_gpiote_trigger_enable+0xc8>)
    3d1c:	f240 33df 	movw	r3, #991	; 0x3df
    3d20:	f003 f9bb 	bl	709a <assert_print>
    3d24:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
    3d28:	4829      	ldr	r0, [pc, #164]	; (3dd0 <nrfx_gpiote_trigger_enable+0xc4>)
    3d2a:	f003 f9af 	bl	708c <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d2e:	4620      	mov	r0, r4
    3d30:	f7ff fd96 	bl	3860 <pin_in_use_by_te>
    3d34:	4a28      	ldr	r2, [pc, #160]	; (3dd8 <nrfx_gpiote_trigger_enable+0xcc>)
    3d36:	f104 0508 	add.w	r5, r4, #8
    3d3a:	b1f8      	cbz	r0, 3d7c <nrfx_gpiote_trigger_enable+0x70>
    return !pin_is_output(pin);
    3d3c:	4620      	mov	r0, r4
    3d3e:	f7ff fda5 	bl	388c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3d42:	b9d8      	cbnz	r0, 3d7c <nrfx_gpiote_trigger_enable+0x70>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3d44:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    3d48:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3d4a:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
    3d4c:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
    3d50:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
    3d54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3d58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3d5c:	6020      	str	r0, [r4, #0]
    3d5e:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3d60:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    3d64:	f040 0001 	orr.w	r0, r0, #1
    3d68:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
    3d6c:	b121      	cbz	r1, 3d78 <nrfx_gpiote_trigger_enable+0x6c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3d6e:	2301      	movs	r3, #1
    3d70:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    3d72:	4a1a      	ldr	r2, [pc, #104]	; (3ddc <nrfx_gpiote_trigger_enable+0xd0>)
    3d74:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3d78:	b003      	add	sp, #12
    3d7a:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
    3d7c:	b949      	cbnz	r1, 3d92 <nrfx_gpiote_trigger_enable+0x86>
    3d7e:	4918      	ldr	r1, [pc, #96]	; (3de0 <nrfx_gpiote_trigger_enable+0xd4>)
    3d80:	4a13      	ldr	r2, [pc, #76]	; (3dd0 <nrfx_gpiote_trigger_enable+0xc4>)
    3d82:	4814      	ldr	r0, [pc, #80]	; (3dd4 <nrfx_gpiote_trigger_enable+0xc8>)
    3d84:	f240 33ee 	movw	r3, #1006	; 0x3ee
    3d88:	f003 f987 	bl	709a <assert_print>
    3d8c:	f240 31ee 	movw	r1, #1006	; 0x3ee
    3d90:	e7ca      	b.n	3d28 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3d92:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
    3d96:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3d9a:	2b04      	cmp	r3, #4
    3d9c:	d012      	beq.n	3dc4 <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3d9e:	2b05      	cmp	r3, #5
    3da0:	d012      	beq.n	3dc8 <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3da2:	a801      	add	r0, sp, #4
    3da4:	9401      	str	r4, [sp, #4]
    3da6:	f7ff fdf3 	bl	3990 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3daa:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    3dac:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3db0:	40d9      	lsrs	r1, r3
    3db2:	f001 0101 	and.w	r1, r1, #1
    3db6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3db8:	4620      	mov	r0, r4
}
    3dba:	b003      	add	sp, #12
    3dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3dc0:	f003 bc39 	b.w	7636 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3dc4:	2103      	movs	r1, #3
    3dc6:	e7f7      	b.n	3db8 <nrfx_gpiote_trigger_enable+0xac>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3dc8:	2102      	movs	r1, #2
    3dca:	e7f5      	b.n	3db8 <nrfx_gpiote_trigger_enable+0xac>
    3dcc:	0000881d 	.word	0x0000881d
    3dd0:	000087d5 	.word	0x000087d5
    3dd4:	00007ea3 	.word	0x00007ea3
    3dd8:	20000094 	.word	0x20000094
    3ddc:	40006000 	.word	0x40006000
    3de0:	00008832 	.word	0x00008832

00003de4 <nrfx_gpiote_trigger_disable>:
{
    3de4:	b508      	push	{r3, lr}
    3de6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3de8:	f7ff fd3a 	bl	3860 <pin_in_use_by_te>
    3dec:	b1c8      	cbz	r0, 3e22 <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    3dee:	4610      	mov	r0, r2
    3df0:	f7ff fd4c 	bl	388c <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3df4:	b9a8      	cbnz	r0, 3e22 <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3df6:	3208      	adds	r2, #8
    3df8:	4b0d      	ldr	r3, [pc, #52]	; (3e30 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    3dfa:	490e      	ldr	r1, [pc, #56]	; (3e34 <nrfx_gpiote_trigger_disable+0x50>)
    3dfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3e00:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3e02:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3e04:	409a      	lsls	r2, r3
    3e06:	009b      	lsls	r3, r3, #2
    3e08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3e0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    3e10:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3e14:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3e18:	f022 0203 	bic.w	r2, r2, #3
    3e1c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3e20:	bd08      	pop	{r3, pc}
    3e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3e26:	2100      	movs	r1, #0
    3e28:	4610      	mov	r0, r2
    3e2a:	f003 bc04 	b.w	7636 <nrf_gpio_cfg_sense_set>
    3e2e:	bf00      	nop
    3e30:	20000094 	.word	0x20000094
    3e34:	40006000 	.word	0x40006000

00003e38 <nrfx_gpiote_pin_uninit>:
{
    3e38:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3e3a:	4b0e      	ldr	r3, [pc, #56]	; (3e74 <nrfx_gpiote_pin_uninit+0x3c>)
    3e3c:	f100 0208 	add.w	r2, r0, #8
{
    3e40:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3e42:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    3e46:	07db      	lsls	r3, r3, #31
    3e48:	d511      	bpl.n	3e6e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    3e4a:	f7ff ffcb 	bl	3de4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3e4e:	4620      	mov	r0, r4
    3e50:	f7ff fd82 	bl	3958 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e54:	a801      	add	r0, sp, #4
    3e56:	9401      	str	r4, [sp, #4]
    3e58:	f7ff fd9a 	bl	3990 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3e5c:	9b01      	ldr	r3, [sp, #4]
    3e5e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3e62:	2202      	movs	r2, #2
    3e64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    3e68:	4803      	ldr	r0, [pc, #12]	; (3e78 <nrfx_gpiote_pin_uninit+0x40>)
}
    3e6a:	b002      	add	sp, #8
    3e6c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3e6e:	4803      	ldr	r0, [pc, #12]	; (3e7c <nrfx_gpiote_pin_uninit+0x44>)
    3e70:	e7fb      	b.n	3e6a <nrfx_gpiote_pin_uninit+0x32>
    3e72:	bf00      	nop
    3e74:	20000094 	.word	0x20000094
    3e78:	0bad0000 	.word	0x0bad0000
    3e7c:	0bad0004 	.word	0x0bad0004

00003e80 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e84:	4b69      	ldr	r3, [pc, #420]	; (402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>)
    return p_reg->INTENSET & mask;
    3e86:	486a      	ldr	r0, [pc, #424]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3e88:	496a      	ldr	r1, [pc, #424]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    uint32_t status = 0;
    3e8a:	2600      	movs	r6, #0
{
    3e8c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3e8e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e90:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3e92:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3e94:	b135      	cbz	r5, 3ea4 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3e96:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3e9a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3e9c:	bf1e      	ittt	ne
    3e9e:	601c      	strne	r4, [r3, #0]
    3ea0:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3ea2:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3ea4:	3304      	adds	r3, #4
    3ea6:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3ea8:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3eac:	d1f1      	bne.n	3e92 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3eae:	f8df 9180 	ldr.w	r9, [pc, #384]	; 4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>
    3eb2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	f000 809b 	beq.w	3ff2 <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
    3ebc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3ec0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    3ec4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3ec6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3eca:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    3ece:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3ed0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3ed4:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    3ed8:	f10d 0a10 	add.w	sl, sp, #16
    3edc:	ea4f 1348 	mov.w	r3, r8, lsl #5
    3ee0:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3ee2:	f04f 0b01 	mov.w	fp, #1
    3ee6:	e04b      	b.n	3f80 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
    3ee8:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3eea:	4a53      	ldr	r2, [pc, #332]	; (4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>)
                uint32_t pin = NRF_CTZ(latch[i]);
    3eec:	fa94 f4a4 	rbit	r4, r4
    3ef0:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3ef4:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3ef6:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3ef8:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
    3efc:	f004 0107 	and.w	r1, r4, #7
    3f00:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    3f04:	f81a 3000 	ldrb.w	r3, [sl, r0]
    3f08:	9403      	str	r4, [sp, #12]
    3f0a:	fa0b f101 	lsl.w	r1, fp, r1
    3f0e:	ea23 0301 	bic.w	r3, r3, r1
    3f12:	08ba      	lsrs	r2, r7, #2
    3f14:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f18:	a803      	add	r0, sp, #12
    3f1a:	9201      	str	r2, [sp, #4]
    3f1c:	f7ff fd38 	bl	3990 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3f20:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
    3f22:	9a01      	ldr	r2, [sp, #4]
    3f24:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3f28:	f3c7 0582 	ubfx	r5, r7, #2, #3
    3f2c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
    3f30:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3f32:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3f34:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    3f38:	d52c      	bpl.n	3f94 <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
    3f3a:	4639      	mov	r1, r7
    3f3c:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3f3e:	b2dd      	uxtb	r5, r3
    3f40:	f7ff fcae 	bl	38a0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f44:	a803      	add	r0, sp, #12
    3f46:	9403      	str	r4, [sp, #12]
    3f48:	f7ff fd22 	bl	3990 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3f4c:	9b03      	ldr	r3, [sp, #12]
    3f4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f52:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3f56:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3f5a:	429d      	cmp	r5, r3
    3f5c:	d107      	bne.n	3f6e <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3f5e:	2100      	movs	r1, #0
    3f60:	4620      	mov	r0, r4
    3f62:	f003 fb68 	bl	7636 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3f66:	4629      	mov	r1, r5
    3f68:	4620      	mov	r0, r4
    3f6a:	f003 fb64 	bl	7636 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f6e:	a803      	add	r0, sp, #12
    3f70:	9403      	str	r4, [sp, #12]
    3f72:	f7ff fd0d 	bl	3990 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3f76:	9b03      	ldr	r3, [sp, #12]
    3f78:	fa0b f303 	lsl.w	r3, fp, r3
    3f7c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    3f80:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    3f84:	2c00      	cmp	r4, #0
    3f86:	d1af      	bne.n	3ee8 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3f88:	f1b8 0f00 	cmp.w	r8, #0
    3f8c:	d11d      	bne.n	3fca <nrfx_gpiote_irq_handler+0x14a>
    3f8e:	f04f 0801 	mov.w	r8, #1
    3f92:	e7a3      	b.n	3edc <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3f94:	2b02      	cmp	r3, #2
    3f96:	d10c      	bne.n	3fb2 <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3f98:	2103      	movs	r1, #3
    3f9a:	4620      	mov	r0, r4
    3f9c:	f003 fb4b 	bl	7636 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3fa0:	f005 0305 	and.w	r3, r5, #5
    3fa4:	2b01      	cmp	r3, #1
    3fa6:	d1e2      	bne.n	3f6e <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
    3fa8:	4639      	mov	r1, r7
    3faa:	4620      	mov	r0, r4
    3fac:	f7ff fc78 	bl	38a0 <call_handler>
    3fb0:	e7dd      	b.n	3f6e <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3fb2:	2102      	movs	r1, #2
    3fb4:	4620      	mov	r0, r4
    3fb6:	9301      	str	r3, [sp, #4]
    3fb8:	f003 fb3d 	bl	7636 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3fbc:	2d03      	cmp	r5, #3
    3fbe:	d0f3      	beq.n	3fa8 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3fc0:	9b01      	ldr	r3, [sp, #4]
    3fc2:	2b03      	cmp	r3, #3
    3fc4:	d1d3      	bne.n	3f6e <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3fc6:	2d02      	cmp	r5, #2
    3fc8:	e7ed      	b.n	3fa6 <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
    3fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3fce:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    3fd2:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    3fd6:	4919      	ldr	r1, [pc, #100]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3fd8:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    3fdc:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3fde:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    3fe2:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    3fe6:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    3fe8:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    3fea:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    3fee:	f47f af71 	bne.w	3ed4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    3ff2:	2401      	movs	r4, #1
    while (mask)
    3ff4:	b916      	cbnz	r6, 3ffc <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3ff6:	b007      	add	sp, #28
    3ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3ffc:	fa96 f3a6 	rbit	r3, r6
    4000:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4004:	fa04 f203 	lsl.w	r2, r4, r3
    4008:	009b      	lsls	r3, r3, #2
    400a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    400e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4012:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4016:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    401a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    401e:	f3c0 2005 	ubfx	r0, r0, #8, #6
    4022:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4026:	f7ff fc3b 	bl	38a0 <call_handler>
    402a:	e7e3      	b.n	3ff4 <nrfx_gpiote_irq_handler+0x174>
    402c:	40006100 	.word	0x40006100
    4030:	40006000 	.word	0x40006000
    4034:	40006120 	.word	0x40006120
    4038:	20000094 	.word	0x20000094
    403c:	50000300 	.word	0x50000300

00004040 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4040:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4042:	4801      	ldr	r0, [pc, #4]	; (4048 <nrfx_ppi_channel_alloc+0x8>)
    4044:	f7ff ba58 	b.w	34f8 <nrfx_flag32_alloc>
    4048:	20000110 	.word	0x20000110

0000404c <nrf_gpio_pin_port_decode>:
{
    404c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    404e:	6803      	ldr	r3, [r0, #0]
    switch (port)
    4050:	095a      	lsrs	r2, r3, #5
    4052:	d00d      	beq.n	4070 <nrf_gpio_pin_port_decode+0x24>
    4054:	2a01      	cmp	r2, #1
    4056:	d014      	beq.n	4082 <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4058:	490f      	ldr	r1, [pc, #60]	; (4098 <nrf_gpio_pin_port_decode+0x4c>)
    405a:	4810      	ldr	r0, [pc, #64]	; (409c <nrf_gpio_pin_port_decode+0x50>)
    405c:	4a10      	ldr	r2, [pc, #64]	; (40a0 <nrf_gpio_pin_port_decode+0x54>)
    405e:	f240 2347 	movw	r3, #583	; 0x247
    4062:	f003 f81a 	bl	709a <assert_print>
    4066:	480e      	ldr	r0, [pc, #56]	; (40a0 <nrf_gpio_pin_port_decode+0x54>)
    4068:	f240 2147 	movw	r1, #583	; 0x247
    406c:	f003 f80e 	bl	708c <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
    4070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4074:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4078:	07d9      	lsls	r1, r3, #31
    407a:	d5ed      	bpl.n	4058 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    407c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    4080:	e008      	b.n	4094 <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
    4082:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4086:	f64f 72ff 	movw	r2, #65535	; 0xffff
    408a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    408c:	07d2      	lsls	r2, r2, #31
    408e:	d5e3      	bpl.n	4058 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
    4090:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
    4092:	4804      	ldr	r0, [pc, #16]	; (40a4 <nrf_gpio_pin_port_decode+0x58>)
}
    4094:	bd08      	pop	{r3, pc}
    4096:	bf00      	nop
    4098:	0000864c 	.word	0x0000864c
    409c:	00007ea3 	.word	0x00007ea3
    40a0:	00008619 	.word	0x00008619
    40a4:	50000300 	.word	0x50000300

000040a8 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    40a8:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    40aa:	4b3b      	ldr	r3, [pc, #236]	; (4198 <twi_tx_start_transfer+0xf0>)
    40ac:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    40ae:	2300      	movs	r3, #0
    40b0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    40b4:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    40b8:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    40bc:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    40c0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    40c4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    40c8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    40cc:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    40d0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    40d4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    40d6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    40da:	2301      	movs	r3, #1
    40dc:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    40de:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    40e2:	429a      	cmp	r2, r3
    40e4:	bf18      	it	ne
    40e6:	6083      	strne	r3, [r0, #8]
    if (p_cb->bytes_transferred < p_cb->curr_length)
    40e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    40ea:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    40ec:	4293      	cmp	r3, r2
{
    40ee:	4604      	mov	r4, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
    40f0:	d20e      	bcs.n	4110 <twi_tx_start_transfer+0x68>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    40f2:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    p_reg->TXD = data;
    40f4:	5cd3      	ldrb	r3, [r2, r3]
    40f6:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);

    if (p_cb->handler)
    40fa:	680b      	ldr	r3, [r1, #0]
    40fc:	b303      	cbz	r3, 4140 <twi_tx_start_transfer+0x98>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    40fe:	f240 2386 	movw	r3, #646	; 0x286
    4102:	608b      	str	r3, [r1, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4104:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4106:	4825      	ldr	r0, [pc, #148]	; (419c <twi_tx_start_transfer+0xf4>)
    p_reg->INTENSET = mask;
    4108:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    410c:	b002      	add	sp, #8
    410e:	bd10      	pop	{r4, pc}
        if (p_cb->curr_tx_no_stop)
    4110:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
    4114:	b113      	cbz	r3, 411c <twi_tx_start_transfer+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4116:	2301      	movs	r3, #1
    4118:	61c3      	str	r3, [r0, #28]
            return false;
    411a:	e7ee      	b.n	40fa <twi_tx_start_transfer+0x52>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    411c:	6a0b      	ldr	r3, [r1, #32]
    411e:	f013 0f40 	tst.w	r3, #64	; 0x40
    4122:	f04f 0301 	mov.w	r3, #1
    4126:	bf16      	itet	ne
    4128:	61c3      	strne	r3, [r0, #28]
    412a:	6143      	streq	r3, [r0, #20]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    412c:	f881 302d 	strbne.w	r3, [r1, #45]	; 0x2d
}
    4130:	e7e3      	b.n	40fa <twi_tx_start_transfer+0x52>
               twi_transfer(p_twi, p_cb))
    4132:	4620      	mov	r0, r4
    4134:	f003 fa8e 	bl	7654 <twi_transfer>
        while ((hw_timeout > 0) &&
    4138:	b128      	cbz	r0, 4146 <twi_tx_start_transfer+0x9e>
            hw_timeout--;
    413a:	9b01      	ldr	r3, [sp, #4]
    413c:	3b01      	subs	r3, #1
    413e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4140:	9b01      	ldr	r3, [sp, #4]
    4142:	2b00      	cmp	r3, #0
    4144:	dcf5      	bgt.n	4132 <twi_tx_start_transfer+0x8a>
        if (p_cb->error)
    4146:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    414a:	b95b      	cbnz	r3, 4164 <twi_tx_start_transfer+0xbc>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    414c:	4813      	ldr	r0, [pc, #76]	; (419c <twi_tx_start_transfer+0xf4>)
        if (hw_timeout <= 0)
    414e:	9b01      	ldr	r3, [sp, #4]
    4150:	2b00      	cmp	r3, #0
    4152:	dcdb      	bgt.n	410c <twi_tx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4154:	2300      	movs	r3, #0
    4156:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    415a:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    415c:	4810      	ldr	r0, [pc, #64]	; (41a0 <twi_tx_start_transfer+0xf8>)
    415e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4162:	e7d3      	b.n	410c <twi_tx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
    4164:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    4168:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    416c:	b18b      	cbz	r3, 4192 <twi_tx_start_transfer+0xea>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    416e:	4a0d      	ldr	r2, [pc, #52]	; (41a4 <twi_tx_start_transfer+0xfc>)
    4170:	480b      	ldr	r0, [pc, #44]	; (41a0 <twi_tx_start_transfer+0xf8>)
    4172:	f013 0f01 	tst.w	r3, #1
    4176:	bf18      	it	ne
    4178:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    417a:	f013 0f02 	tst.w	r3, #2
    417e:	f102 0201 	add.w	r2, r2, #1
    4182:	bf18      	it	ne
    4184:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    4186:	f013 0f04 	tst.w	r3, #4
    418a:	4b07      	ldr	r3, [pc, #28]	; (41a8 <twi_tx_start_transfer+0x100>)
    418c:	bf18      	it	ne
    418e:	4618      	movne	r0, r3
    4190:	e7dd      	b.n	414e <twi_tx_start_transfer+0xa6>
                ret_code = NRFX_ERROR_INTERNAL;
    4192:	4803      	ldr	r0, [pc, #12]	; (41a0 <twi_tx_start_transfer+0xf8>)
    4194:	e7db      	b.n	414e <twi_tx_start_transfer+0xa6>
    4196:	bf00      	nop
    4198:	000186a0 	.word	0x000186a0
    419c:	0bad0000 	.word	0x0bad0000
    41a0:	0bad0001 	.word	0x0bad0001
    41a4:	0bae0000 	.word	0x0bae0000
    41a8:	0bae0002 	.word	0x0bae0002

000041ac <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    41ac:	b513      	push	{r0, r1, r4, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    41ae:	4b33      	ldr	r3, [pc, #204]	; (427c <twi_rx_start_transfer+0xd0>)
    41b0:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    41b2:	2300      	movs	r3, #0
    41b4:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    41b8:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    41bc:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    41c0:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    41c4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    41c8:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    41cc:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    41d0:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    41d4:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    41d6:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    41da:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    41dc:	2b01      	cmp	r3, #1
{
    41de:	4604      	mov	r4, r0
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    41e0:	d117      	bne.n	4212 <twi_rx_start_transfer+0x66>
    41e2:	6a0b      	ldr	r3, [r1, #32]
    41e4:	065b      	lsls	r3, r3, #25
    41e6:	d414      	bmi.n	4212 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    41e8:	2302      	movs	r3, #2
    41ea:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    41ee:	2301      	movs	r3, #1
    41f0:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    41f2:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
    41f6:	2a02      	cmp	r2, #2
    41f8:	bf18      	it	ne
    41fa:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    41fc:	680b      	ldr	r3, [r1, #0]
    41fe:	b18b      	cbz	r3, 4224 <twi_rx_start_transfer+0x78>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    4200:	f240 2386 	movw	r3, #646	; 0x286
    4204:	608b      	str	r3, [r1, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    4206:	688b      	ldr	r3, [r1, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4208:	481d      	ldr	r0, [pc, #116]	; (4280 <twi_rx_start_transfer+0xd4>)
    p_reg->INTENSET = mask;
    420a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    420e:	b002      	add	sp, #8
    4210:	bd10      	pop	{r4, pc}
    p_reg->SHORTS = mask;
    4212:	2301      	movs	r3, #1
    4214:	e7e9      	b.n	41ea <twi_rx_start_transfer+0x3e>
               twi_transfer(p_twi, p_cb))
    4216:	4620      	mov	r0, r4
    4218:	f003 fa1c 	bl	7654 <twi_transfer>
        while ((hw_timeout > 0) &&
    421c:	b128      	cbz	r0, 422a <twi_rx_start_transfer+0x7e>
               hw_timeout--;
    421e:	9b01      	ldr	r3, [sp, #4]
    4220:	3b01      	subs	r3, #1
    4222:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
    4224:	9b01      	ldr	r3, [sp, #4]
    4226:	2b00      	cmp	r3, #0
    4228:	dcf5      	bgt.n	4216 <twi_rx_start_transfer+0x6a>
        if (p_cb->error)
    422a:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
    422e:	b95b      	cbnz	r3, 4248 <twi_rx_start_transfer+0x9c>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    4230:	4813      	ldr	r0, [pc, #76]	; (4280 <twi_rx_start_transfer+0xd4>)
        if (hw_timeout <= 0)
    4232:	9b01      	ldr	r3, [sp, #4]
    4234:	2b00      	cmp	r3, #0
    4236:	dcea      	bgt.n	420e <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    4238:	2300      	movs	r3, #0
    423a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    423e:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
    4240:	4810      	ldr	r0, [pc, #64]	; (4284 <twi_rx_start_transfer+0xd8>)
    4242:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
    4246:	e7e2      	b.n	420e <twi_rx_start_transfer+0x62>
    uint32_t error_source = p_reg->ERRORSRC;
    4248:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    424c:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
    4250:	b18b      	cbz	r3, 4276 <twi_rx_start_transfer+0xca>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    4252:	4a0d      	ldr	r2, [pc, #52]	; (4288 <twi_rx_start_transfer+0xdc>)
    4254:	480b      	ldr	r0, [pc, #44]	; (4284 <twi_rx_start_transfer+0xd8>)
    4256:	f013 0f01 	tst.w	r3, #1
    425a:	bf18      	it	ne
    425c:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    425e:	f013 0f02 	tst.w	r3, #2
    4262:	f102 0201 	add.w	r2, r2, #1
    4266:	bf18      	it	ne
    4268:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    426a:	f013 0f04 	tst.w	r3, #4
    426e:	4b07      	ldr	r3, [pc, #28]	; (428c <twi_rx_start_transfer+0xe0>)
    4270:	bf18      	it	ne
    4272:	4618      	movne	r0, r3
    4274:	e7dd      	b.n	4232 <twi_rx_start_transfer+0x86>
                ret_code = NRFX_ERROR_INTERNAL;
    4276:	4803      	ldr	r0, [pc, #12]	; (4284 <twi_rx_start_transfer+0xd8>)
    4278:	e7db      	b.n	4232 <twi_rx_start_transfer+0x86>
    427a:	bf00      	nop
    427c:	000186a0 	.word	0x000186a0
    4280:	0bad0000 	.word	0x0bad0000
    4284:	0bad0001 	.word	0x0bad0001
    4288:	0bae0000 	.word	0x0bae0000
    428c:	0bae0002 	.word	0x0bae0002

00004290 <nrfx_twi_init>:
{
    4290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4294:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    4296:	460c      	mov	r4, r1
    4298:	b949      	cbnz	r1, 42ae <nrfx_twi_init+0x1e>
    429a:	492f      	ldr	r1, [pc, #188]	; (4358 <nrfx_twi_init+0xc8>)
    429c:	482f      	ldr	r0, [pc, #188]	; (435c <nrfx_twi_init+0xcc>)
    429e:	4a30      	ldr	r2, [pc, #192]	; (4360 <nrfx_twi_init+0xd0>)
    42a0:	23a4      	movs	r3, #164	; 0xa4
    42a2:	f002 fefa 	bl	709a <assert_print>
    42a6:	482e      	ldr	r0, [pc, #184]	; (4360 <nrfx_twi_init+0xd0>)
    42a8:	21a4      	movs	r1, #164	; 0xa4
    42aa:	f002 feef 	bl	708c <assert_post_action>
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    42ae:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    42b2:	4d2c      	ldr	r5, [pc, #176]	; (4364 <nrfx_twi_init+0xd4>)
    42b4:	273c      	movs	r7, #60	; 0x3c
    42b6:	fb07 f708 	mul.w	r7, r7, r8
    42ba:	19e9      	adds	r1, r5, r7
    42bc:	f891 002e 	ldrb.w	r0, [r1, #46]	; 0x2e
    42c0:	2800      	cmp	r0, #0
    42c2:	d146      	bne.n	4352 <nrfx_twi_init+0xc2>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    42c4:	f8d6 9000 	ldr.w	r9, [r6]
    p_cb->handler         = event_handler;
    42c8:	51ea      	str	r2, [r5, r7]
    p_cb->int_mask        = 0;
    42ca:	6088      	str	r0, [r1, #8]
    p_cb->p_context       = p_context;
    42cc:	604b      	str	r3, [r1, #4]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    42ce:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
    p_cb->repeated        = false;
    42d2:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    p_cb->busy            = false;
    42d6:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    42da:	7b63      	ldrb	r3, [r4, #13]
    42dc:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
    42e0:	7ba3      	ldrb	r3, [r4, #14]
    42e2:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
    42e6:	b9ab      	cbnz	r3, 4314 <nrfx_twi_init+0x84>
        TWI_PIN_INIT(p_config->scl);
    42e8:	6823      	ldr	r3, [r4, #0]
    42ea:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    42ec:	a801      	add	r0, sp, #4
    42ee:	f7ff fead 	bl	404c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    42f2:	9b01      	ldr	r3, [sp, #4]
    42f4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    42f8:	f240 670c 	movw	r7, #1548	; 0x60c
    42fc:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4300:	a801      	add	r0, sp, #4
    4302:	6863      	ldr	r3, [r4, #4]
    4304:	9301      	str	r3, [sp, #4]
    4306:	f7ff fea1 	bl	404c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    430a:	9b01      	ldr	r3, [sp, #4]
    430c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4310:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4314:	7be3      	ldrb	r3, [r4, #15]
    4316:	b92b      	cbnz	r3, 4324 <nrfx_twi_init+0x94>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    4318:	e9d4 2300 	ldrd	r2, r3, [r4]
    p_reg->PSEL.SCL = scl_pin;
    431c:	f8c9 2508 	str.w	r2, [r9, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    4320:	f8c9 350c 	str.w	r3, [r9, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    4324:	68a3      	ldr	r3, [r4, #8]
    p_reg->FREQUENCY = frequency;
    4326:	f8c9 3524 	str.w	r3, [r9, #1316]	; 0x524
    if (p_cb->handler)
    432a:	233c      	movs	r3, #60	; 0x3c
    432c:	fb03 f308 	mul.w	r3, r3, r8
    4330:	58eb      	ldr	r3, [r5, r3]
    4332:	b123      	cbz	r3, 433e <nrfx_twi_init+0xae>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    4334:	6830      	ldr	r0, [r6, #0]
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    4336:	f340 3007 	sbfx	r0, r0, #12, #8
    433a:	f7fd fad5 	bl	18e8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    433e:	233c      	movs	r3, #60	; 0x3c
    4340:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
    4344:	4808      	ldr	r0, [pc, #32]	; (4368 <nrfx_twi_init+0xd8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4346:	2301      	movs	r3, #1
    4348:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
    434c:	b003      	add	sp, #12
    434e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return err_code;
    4352:	4806      	ldr	r0, [pc, #24]	; (436c <nrfx_twi_init+0xdc>)
    4354:	e7fa      	b.n	434c <nrfx_twi_init+0xbc>
    4356:	bf00      	nop
    4358:	0000888d 	.word	0x0000888d
    435c:	00007ea3 	.word	0x00007ea3
    4360:	00008852 	.word	0x00008852
    4364:	20000a14 	.word	0x20000a14
    4368:	0bad0000 	.word	0x0bad0000
    436c:	0bad0005 	.word	0x0bad0005

00004370 <nrfx_twi_enable>:
{
    4370:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    4372:	4b0e      	ldr	r3, [pc, #56]	; (43ac <nrfx_twi_enable+0x3c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4374:	7902      	ldrb	r2, [r0, #4]
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
    4376:	213c      	movs	r1, #60	; 0x3c
    4378:	fb01 3302 	mla	r3, r1, r2, r3
    437c:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    4380:	2a01      	cmp	r2, #1
    4382:	d00b      	beq.n	439c <nrfx_twi_enable+0x2c>
    4384:	490a      	ldr	r1, [pc, #40]	; (43b0 <nrfx_twi_enable+0x40>)
    4386:	480b      	ldr	r0, [pc, #44]	; (43b4 <nrfx_twi_enable+0x44>)
    4388:	4a0b      	ldr	r2, [pc, #44]	; (43b8 <nrfx_twi_enable+0x48>)
    438a:	f240 130b 	movw	r3, #267	; 0x10b
    438e:	f002 fe84 	bl	709a <assert_print>
    4392:	4809      	ldr	r0, [pc, #36]	; (43b8 <nrfx_twi_enable+0x48>)
    4394:	f240 110b 	movw	r1, #267	; 0x10b
    4398:	f002 fe78 	bl	708c <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    439c:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    439e:	2105      	movs	r1, #5
    43a0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    43a4:	2202      	movs	r2, #2
    43a6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    43aa:	bd08      	pop	{r3, pc}
    43ac:	20000a14 	.word	0x20000a14
    43b0:	00008896 	.word	0x00008896
    43b4:	00007ea3 	.word	0x00007ea3
    43b8:	00008852 	.word	0x00008852

000043bc <nrfx_twi_disable>:
{
    43bc:	b508      	push	{r3, lr}
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    43be:	4b13      	ldr	r3, [pc, #76]	; (440c <nrfx_twi_disable+0x50>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    43c0:	7902      	ldrb	r2, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    43c2:	213c      	movs	r1, #60	; 0x3c
    43c4:	fb01 3302 	mla	r3, r1, r2, r3
    43c8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
    43cc:	b95a      	cbnz	r2, 43e6 <nrfx_twi_disable+0x2a>
    43ce:	4910      	ldr	r1, [pc, #64]	; (4410 <nrfx_twi_disable+0x54>)
    43d0:	4810      	ldr	r0, [pc, #64]	; (4414 <nrfx_twi_disable+0x58>)
    43d2:	4a11      	ldr	r2, [pc, #68]	; (4418 <nrfx_twi_disable+0x5c>)
    43d4:	f240 1317 	movw	r3, #279	; 0x117
    43d8:	f002 fe5f 	bl	709a <assert_print>
    43dc:	480e      	ldr	r0, [pc, #56]	; (4418 <nrfx_twi_disable+0x5c>)
    43de:	f240 1117 	movw	r1, #279	; 0x117
    43e2:	f002 fe53 	bl	708c <assert_post_action>
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    43e6:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    43e8:	490c      	ldr	r1, [pc, #48]	; (441c <nrfx_twi_disable+0x60>)
    43ea:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    43ee:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    43f2:	f021 0103 	bic.w	r1, r1, #3
    43f6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    43fa:	2100      	movs	r1, #0
    43fc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    4400:	2201      	movs	r2, #1
    4402:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    p_cb->busy = false;
    4406:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
    440a:	bd08      	pop	{r3, pc}
    440c:	20000a14 	.word	0x20000a14
    4410:	000088c0 	.word	0x000088c0
    4414:	00007ea3 	.word	0x00007ea3
    4418:	00008852 	.word	0x00008852
    441c:	00044286 	.word	0x00044286

00004420 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    4420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    4424:	7904      	ldrb	r4, [r0, #4]

    // TXRX and TXTX transfers are supported only in non-blocking mode.
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    4426:	4f41      	ldr	r7, [pc, #260]	; (452c <nrfx_twi_xfer+0x10c>)
    4428:	233c      	movs	r3, #60	; 0x3c
    442a:	4363      	muls	r3, r4
{
    442c:	460d      	mov	r5, r1
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    442e:	58fb      	ldr	r3, [r7, r3]
{
    4430:	4694      	mov	ip, r2
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXRX)));
    4432:	b9d3      	cbnz	r3, 446a <nrfx_twi_xfer+0x4a>
    4434:	780b      	ldrb	r3, [r1, #0]
    4436:	2b02      	cmp	r3, #2
    4438:	d10b      	bne.n	4452 <nrfx_twi_xfer+0x32>
    443a:	493d      	ldr	r1, [pc, #244]	; (4530 <nrfx_twi_xfer+0x110>)
    443c:	4a3d      	ldr	r2, [pc, #244]	; (4534 <nrfx_twi_xfer+0x114>)
    443e:	483e      	ldr	r0, [pc, #248]	; (4538 <nrfx_twi_xfer+0x118>)
    4440:	f44f 7322 	mov.w	r3, #648	; 0x288
    4444:	f002 fe29 	bl	709a <assert_print>
    4448:	f44f 7122 	mov.w	r1, #648	; 0x288
    NRFX_ASSERT( !((p_cb->handler == NULL) && (p_xfer_desc->type == NRFX_TWI_XFER_TXTX)));
    444c:	4839      	ldr	r0, [pc, #228]	; (4534 <nrfx_twi_xfer+0x114>)
    444e:	f002 fe1d 	bl	708c <assert_post_action>
    4452:	2b03      	cmp	r3, #3
    4454:	d109      	bne.n	446a <nrfx_twi_xfer+0x4a>
    4456:	4939      	ldr	r1, [pc, #228]	; (453c <nrfx_twi_xfer+0x11c>)
    4458:	4a36      	ldr	r2, [pc, #216]	; (4534 <nrfx_twi_xfer+0x114>)
    445a:	4837      	ldr	r0, [pc, #220]	; (4538 <nrfx_twi_xfer+0x118>)
    445c:	f240 2389 	movw	r3, #649	; 0x289
    4460:	f002 fe1b 	bl	709a <assert_print>
    4464:	f240 2189 	movw	r1, #649	; 0x289
    4468:	e7f0      	b.n	444c <nrfx_twi_xfer+0x2c>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    446a:	233c      	movs	r3, #60	; 0x3c
    446c:	fb03 7304 	mla	r3, r3, r4, r7
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    4470:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    4474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    4478:	2b01      	cmp	r3, #1
    447a:	d104      	bne.n	4486 <nrfx_twi_xfer+0x66>
    447c:	782b      	ldrb	r3, [r5, #0]
    447e:	2b01      	cmp	r3, #1
    4480:	d106      	bne.n	4490 <nrfx_twi_xfer+0x70>
        return NRFX_ERROR_INVALID_STATE;
    4482:	482f      	ldr	r0, [pc, #188]	; (4540 <nrfx_twi_xfer+0x120>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    4484:	e011      	b.n	44aa <nrfx_twi_xfer+0x8a>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    4486:	2b02      	cmp	r3, #2
    4488:	d102      	bne.n	4490 <nrfx_twi_xfer+0x70>
    448a:	782b      	ldrb	r3, [r5, #0]
    448c:	2b01      	cmp	r3, #1
    448e:	d1f8      	bne.n	4482 <nrfx_twi_xfer+0x62>
    if (p_cb->busy)
    4490:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
    4492:	4b2c      	ldr	r3, [pc, #176]	; (4544 <nrfx_twi_xfer+0x124>)
    4494:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
    4498:	fb06 7604 	mla	r6, r6, r4, r7
    449c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    44a0:	b12b      	cbz	r3, 44ae <nrfx_twi_xfer+0x8e>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    44a2:	68b3      	ldr	r3, [r6, #8]
        return err_code;
    44a4:	4828      	ldr	r0, [pc, #160]	; (4548 <nrfx_twi_xfer+0x128>)
    p_reg->INTENSET = mask;
    44a6:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
    44aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    44ae:	f08c 0304 	eor.w	r3, ip, #4
    44b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
    44b6:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
    44ba:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    44be:	46a8      	mov	r8, r5
    44c0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
    44c4:	f106 0e0c 	add.w	lr, r6, #12
    44c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    44cc:	f8d8 3000 	ldr.w	r3, [r8]
    44d0:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
    44d4:	686b      	ldr	r3, [r5, #4]
    44d6:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    44d8:	68eb      	ldr	r3, [r5, #12]
    44da:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
    44dc:	786b      	ldrb	r3, [r5, #1]
    44de:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    44e2:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    44e4:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    44e8:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    44ea:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    44ee:	d017      	beq.n	4520 <nrfx_twi_xfer+0x100>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    44f0:	b99b      	cbnz	r3, 451a <nrfx_twi_xfer+0xfa>
    44f2:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    44f6:	233c      	movs	r3, #60	; 0x3c
    44f8:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    44fc:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    44fe:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
    4502:	4648      	mov	r0, r9
    4504:	f7ff fdd0 	bl	40a8 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
    4508:	233c      	movs	r3, #60	; 0x3c
    450a:	435c      	muls	r4, r3
    450c:	193a      	adds	r2, r7, r4
    450e:	593b      	ldr	r3, [r7, r4]
    4510:	2b00      	cmp	r3, #0
    4512:	d1ca      	bne.n	44aa <nrfx_twi_xfer+0x8a>
        p_cb->busy = false;
    4514:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
    4518:	e7c7      	b.n	44aa <nrfx_twi_xfer+0x8a>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    451a:	f04f 0c01 	mov.w	ip, #1
    451e:	e7ea      	b.n	44f6 <nrfx_twi_xfer+0xd6>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    4520:	4651      	mov	r1, sl
    4522:	4648      	mov	r0, r9
    4524:	f7ff fe42 	bl	41ac <twi_rx_start_transfer>
    4528:	e7ee      	b.n	4508 <nrfx_twi_xfer+0xe8>
    452a:	bf00      	nop
    452c:	20000a14 	.word	0x20000a14
    4530:	000088ec 	.word	0x000088ec
    4534:	00008852 	.word	0x00008852
    4538:	00007ea3 	.word	0x00007ea3
    453c:	0000893b 	.word	0x0000893b
    4540:	0bad0005 	.word	0x0bad0005
    4544:	00044286 	.word	0x00044286
    4548:	0bad000b 	.word	0x0bad000b

0000454c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    454c:	b5f0      	push	{r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_cb->handler);
    454e:	4c39      	ldr	r4, [pc, #228]	; (4634 <nrfx_twi_0_irq_handler+0xe8>)
    4550:	6823      	ldr	r3, [r4, #0]
{
    4552:	b087      	sub	sp, #28
    NRFX_ASSERT(p_cb->handler);
    4554:	b95b      	cbnz	r3, 456e <nrfx_twi_0_irq_handler+0x22>
    4556:	4938      	ldr	r1, [pc, #224]	; (4638 <nrfx_twi_0_irq_handler+0xec>)
    4558:	4838      	ldr	r0, [pc, #224]	; (463c <nrfx_twi_0_irq_handler+0xf0>)
    455a:	4a39      	ldr	r2, [pc, #228]	; (4640 <nrfx_twi_0_irq_handler+0xf4>)
    455c:	f240 23a9 	movw	r3, #681	; 0x2a9
    4560:	f002 fd9b 	bl	709a <assert_print>
    4564:	4836      	ldr	r0, [pc, #216]	; (4640 <nrfx_twi_0_irq_handler+0xf4>)
    4566:	f240 21a9 	movw	r1, #681	; 0x2a9
    456a:	f002 fd8f 	bl	708c <assert_post_action>
    if (twi_transfer(p_twi, p_cb))
    456e:	4835      	ldr	r0, [pc, #212]	; (4644 <nrfx_twi_0_irq_handler+0xf8>)
    4570:	4621      	mov	r1, r4
    4572:	f003 f86f 	bl	7654 <twi_transfer>
    4576:	2800      	cmp	r0, #0
    4578:	d159      	bne.n	462e <nrfx_twi_0_irq_handler+0xe2>
    if (!p_cb->error &&
    457a:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
    457e:	b9ff      	cbnz	r7, 45c0 <nrfx_twi_0_irq_handler+0x74>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
    4580:	7b22      	ldrb	r2, [r4, #12]
    if (!p_cb->error &&
    4582:	1e93      	subs	r3, r2, #2
    4584:	2b01      	cmp	r3, #1
    4586:	d81b      	bhi.n	45c0 <nrfx_twi_0_irq_handler+0x74>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
    4588:	6a60      	ldr	r0, [r4, #36]	; 0x24
    458a:	69a3      	ldr	r3, [r4, #24]
    458c:	4298      	cmp	r0, r3
    458e:	d117      	bne.n	45c0 <nrfx_twi_0_irq_handler+0x74>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
    4590:	69e3      	ldr	r3, [r4, #28]
    4592:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
    4594:	6963      	ldr	r3, [r4, #20]
    4596:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    4598:	6a23      	ldr	r3, [r4, #32]
            (void)twi_tx_start_transfer(p_twi, p_cb);
    459a:	482a      	ldr	r0, [pc, #168]	; (4644 <nrfx_twi_0_irq_handler+0xf8>)
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
    459c:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    45a0:	f3c3 1340 	ubfx	r3, r3, #5, #1
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    45a4:	2a03      	cmp	r2, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
    45a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
    45aa:	d104      	bne.n	45b6 <nrfx_twi_0_irq_handler+0x6a>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
    45ac:	b007      	add	sp, #28
    45ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
    45b2:	f7ff bd79 	b.w	40a8 <twi_tx_start_transfer>
}
    45b6:	b007      	add	sp, #28
    45b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
    45bc:	f7ff bdf6 	b.w	41ac <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
    45c0:	4e21      	ldr	r6, [pc, #132]	; (4648 <nrfx_twi_0_irq_handler+0xfc>)
    45c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    45c4:	ad01      	add	r5, sp, #4
    45c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    45c8:	6833      	ldr	r3, [r6, #0]
    45ca:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
    45cc:	b347      	cbz	r7, 4620 <nrfx_twi_0_irq_handler+0xd4>
    uint32_t error_source = p_reg->ERRORSRC;
    45ce:	4a1d      	ldr	r2, [pc, #116]	; (4644 <nrfx_twi_0_irq_handler+0xf8>)
    45d0:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    45d4:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    45d8:	f013 0102 	ands.w	r1, r3, #2
    45dc:	d006      	beq.n	45ec <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
    45de:	2301      	movs	r3, #1
    45e0:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    45e4:	2300      	movs	r3, #0
    45e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    45ea:	e007      	b.n	45fc <nrfx_twi_0_irq_handler+0xb0>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    45ec:	f013 0204 	ands.w	r2, r3, #4
    45f0:	d009      	beq.n	4606 <nrfx_twi_0_irq_handler+0xba>
                event.type = NRFX_TWI_EVT_DATA_NACK;
    45f2:	2302      	movs	r3, #2
    45f4:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    45f8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
            p_cb->handler(&event, p_cb->p_context);
    45fc:	e9d4 3100 	ldrd	r3, r1, [r4]
    4600:	4668      	mov	r0, sp
    4602:	4798      	blx	r3
}
    4604:	e013      	b.n	462e <nrfx_twi_0_irq_handler+0xe2>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    4606:	f013 0301 	ands.w	r3, r3, #1
    460a:	d005      	beq.n	4618 <nrfx_twi_0_irq_handler+0xcc>
                event.type = NRFX_TWI_EVT_OVERRUN;
    460c:	2303      	movs	r3, #3
    460e:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
    4612:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4616:	e7f1      	b.n	45fc <nrfx_twi_0_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
    4618:	2204      	movs	r2, #4
    461a:	f88d 2000 	strb.w	r2, [sp]
    461e:	e7e2      	b.n	45e6 <nrfx_twi_0_irq_handler+0x9a>
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4620:	6a23      	ldr	r3, [r4, #32]
            event.type = NRFX_TWI_EVT_DONE;
    4622:	f88d 7000 	strb.w	r7, [sp]
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    4626:	075b      	lsls	r3, r3, #29
        p_cb->busy = false;
    4628:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
    462c:	d5e6      	bpl.n	45fc <nrfx_twi_0_irq_handler+0xb0>
}
    462e:	b007      	add	sp, #28
    4630:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4632:	bf00      	nop
    4634:	20000a14 	.word	0x20000a14
    4638:	0000898a 	.word	0x0000898a
    463c:	00007ea3 	.word	0x00007ea3
    4640:	00008852 	.word	0x00008852
    4644:	40003000 	.word	0x40003000
    4648:	20000a20 	.word	0x20000a20

0000464c <nrf_gpio_pin_port_decode>:
{
    464c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    464e:	6803      	ldr	r3, [r0, #0]
    switch (port)
    4650:	095a      	lsrs	r2, r3, #5
    4652:	d00d      	beq.n	4670 <nrf_gpio_pin_port_decode+0x24>
    4654:	2a01      	cmp	r2, #1
    4656:	d014      	beq.n	4682 <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4658:	490f      	ldr	r1, [pc, #60]	; (4698 <nrf_gpio_pin_port_decode+0x4c>)
    465a:	4810      	ldr	r0, [pc, #64]	; (469c <nrf_gpio_pin_port_decode+0x50>)
    465c:	4a10      	ldr	r2, [pc, #64]	; (46a0 <nrf_gpio_pin_port_decode+0x54>)
    465e:	f240 2347 	movw	r3, #583	; 0x247
    4662:	f002 fd1a 	bl	709a <assert_print>
    4666:	480e      	ldr	r0, [pc, #56]	; (46a0 <nrf_gpio_pin_port_decode+0x54>)
    4668:	f240 2147 	movw	r1, #583	; 0x247
    466c:	f002 fd0e 	bl	708c <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
    4670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4674:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4678:	07d9      	lsls	r1, r3, #31
    467a:	d5ed      	bpl.n	4658 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
    467c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    4680:	e008      	b.n	4694 <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
    4682:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4686:	f64f 72ff 	movw	r2, #65535	; 0xffff
    468a:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    468c:	07d2      	lsls	r2, r2, #31
    468e:	d5e3      	bpl.n	4658 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
    4690:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
    4692:	4804      	ldr	r0, [pc, #16]	; (46a4 <nrf_gpio_pin_port_decode+0x58>)
}
    4694:	bd08      	pop	{r3, pc}
    4696:	bf00      	nop
    4698:	0000864c 	.word	0x0000864c
    469c:	00007ea3 	.word	0x00007ea3
    46a0:	00008619 	.word	0x00008619
    46a4:	50000300 	.word	0x50000300

000046a8 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    46a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    46aa:	460c      	mov	r4, r1
    46ac:	4606      	mov	r6, r0
    nrf_gpio_pin_set(scl_pin);
    46ae:	f003 f869 	bl	7784 <nrf_gpio_pin_set>
    nrf_gpio_pin_set(sda_pin);
    46b2:	4620      	mov	r0, r4
    46b4:	f003 f866 	bl	7784 <nrf_gpio_pin_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46b8:	a801      	add	r0, sp, #4
    46ba:	9601      	str	r6, [sp, #4]
    46bc:	f7ff ffc6 	bl	464c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    46c0:	9b01      	ldr	r3, [sp, #4]
    46c2:	9401      	str	r4, [sp, #4]
    46c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    46c8:	f240 650d 	movw	r5, #1549	; 0x60d
    46cc:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46d0:	a801      	add	r0, sp, #4
    46d2:	f7ff ffbb 	bl	464c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    46d6:	9b01      	ldr	r3, [sp, #4]
    46d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    46dc:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
    46de:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    46e2:	2004      	movs	r0, #4
    46e4:	f002 ff3c 	bl	7560 <nrfx_busy_wait>
    46e8:	2509      	movs	r5, #9
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46ea:	a801      	add	r0, sp, #4
    46ec:	9401      	str	r4, [sp, #4]
    46ee:	f7ff ffad 	bl	464c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    46f2:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    46f4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    46f8:	40d3      	lsrs	r3, r2

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
    46fa:	07db      	lsls	r3, r3, #31
    46fc:	d415      	bmi.n	472a <nrfx_twi_twim_bus_recover+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    46fe:	a801      	add	r0, sp, #4
    4700:	9601      	str	r6, [sp, #4]
    4702:	f7ff ffa3 	bl	464c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4706:	9b01      	ldr	r3, [sp, #4]
    4708:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    470c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    4710:	2004      	movs	r0, #4
    4712:	f002 ff25 	bl	7560 <nrfx_busy_wait>
            nrf_gpio_pin_set(scl_pin);
    4716:	4630      	mov	r0, r6
    4718:	f003 f834 	bl	7784 <nrf_gpio_pin_set>
    for (uint8_t i = 0; i < 9; i++)
    471c:	3d01      	subs	r5, #1
            NRFX_DELAY_US(4);
    471e:	2004      	movs	r0, #4
    4720:	f002 ff1e 	bl	7560 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    4724:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4728:	d1df      	bne.n	46ea <nrfx_twi_twim_bus_recover+0x42>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    472a:	a801      	add	r0, sp, #4
    472c:	9401      	str	r4, [sp, #4]
    472e:	f7ff ff8d 	bl	464c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4732:	9a01      	ldr	r2, [sp, #4]
    4734:	2301      	movs	r3, #1
    4736:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    4738:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    473c:	2004      	movs	r0, #4
    473e:	f002 ff0f 	bl	7560 <nrfx_busy_wait>
    nrf_gpio_pin_set(sda_pin);
    4742:	4620      	mov	r0, r4
    4744:	f003 f81e 	bl	7784 <nrf_gpio_pin_set>
    NRFX_DELAY_US(4);
    4748:	2004      	movs	r0, #4
    474a:	f002 ff09 	bl	7560 <nrfx_busy_wait>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    474e:	a801      	add	r0, sp, #4
    4750:	9401      	str	r4, [sp, #4]
    4752:	f7ff ff7b 	bl	464c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4756:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
    4758:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    475c:	4803      	ldr	r0, [pc, #12]	; (476c <nrfx_twi_twim_bus_recover+0xc4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    475e:	40d3      	lsrs	r3, r2
    4760:	f003 0301 	and.w	r3, r3, #1
    4764:	1ac0      	subs	r0, r0, r3
    4766:	b003      	add	sp, #12
    4768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    476a:	bf00      	nop
    476c:	0bad0001 	.word	0x0bad0001

00004770 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4770:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4772:	4c14      	ldr	r4, [pc, #80]	; (47c4 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4774:	4a14      	ldr	r2, [pc, #80]	; (47c8 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4776:	4915      	ldr	r1, [pc, #84]	; (47cc <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4778:	2303      	movs	r3, #3
    477a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    477c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    477e:	4b14      	ldr	r3, [pc, #80]	; (47d0 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    4780:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4782:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4784:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4788:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    478a:	2300      	movs	r3, #0
    478c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    478e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4790:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4792:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4794:	4a0f      	ldr	r2, [pc, #60]	; (47d4 <_DoInit+0x64>)
    4796:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4798:	2210      	movs	r2, #16
    479a:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    479c:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    479e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    47a0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    47a2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    47a4:	f002 fc9c 	bl	70e0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    47a8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    47ac:	490a      	ldr	r1, [pc, #40]	; (47d8 <_DoInit+0x68>)
    47ae:	4620      	mov	r0, r4
    47b0:	f002 fc96 	bl	70e0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    47b4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    47b8:	2320      	movs	r3, #32
    47ba:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    47bc:	f3bf 8f5f 	dmb	sy
}
    47c0:	bd10      	pop	{r4, pc}
    47c2:	bf00      	nop
    47c4:	20000a50 	.word	0x20000a50
    47c8:	000089a1 	.word	0x000089a1
    47cc:	000089aa 	.word	0x000089aa
    47d0:	20000d2e 	.word	0x20000d2e
    47d4:	20000d1e 	.word	0x20000d1e
    47d8:	000089ae 	.word	0x000089ae

000047dc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    47dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47de:	4604      	mov	r4, r0
    47e0:	460e      	mov	r6, r1
	__asm__ volatile(
    47e2:	f04f 0320 	mov.w	r3, #32
    47e6:	f3ef 8711 	mrs	r7, BASEPRI
    47ea:	f383 8812 	msr	BASEPRI_MAX, r3
    47ee:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    47f2:	f001 fd55 	bl	62a0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    47f6:	4631      	mov	r1, r6
    47f8:	4605      	mov	r5, r0
    47fa:	4620      	mov	r0, r4
    47fc:	f002 fea0 	bl	7540 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    4800:	2c04      	cmp	r4, #4
    4802:	d10c      	bne.n	481e <z_fatal_error+0x42>
    4804:	490a      	ldr	r1, [pc, #40]	; (4830 <z_fatal_error+0x54>)
    4806:	4a0b      	ldr	r2, [pc, #44]	; (4834 <z_fatal_error+0x58>)
    4808:	480b      	ldr	r0, [pc, #44]	; (4838 <z_fatal_error+0x5c>)
    480a:	2393      	movs	r3, #147	; 0x93
    480c:	f002 fc45 	bl	709a <assert_print>
    4810:	480a      	ldr	r0, [pc, #40]	; (483c <z_fatal_error+0x60>)
    4812:	f002 fc42 	bl	709a <assert_print>
    4816:	4807      	ldr	r0, [pc, #28]	; (4834 <z_fatal_error+0x58>)
    4818:	2193      	movs	r1, #147	; 0x93
    481a:	f002 fc37 	bl	708c <assert_post_action>
	__asm__ volatile(
    481e:	f387 8811 	msr	BASEPRI, r7
    4822:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4826:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    482c:	f7fd bb64 	b.w	1ef8 <z_impl_k_thread_abort>
    4830:	000089d7 	.word	0x000089d7
    4834:	000089b5 	.word	0x000089b5
    4838:	00007ea3 	.word	0x00007ea3
    483c:	000089f4 	.word	0x000089f4

00004840 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4840:	4b0f      	ldr	r3, [pc, #60]	; (4880 <z_sys_init_run_level+0x40>)
{
    4842:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4844:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4848:	3001      	adds	r0, #1
    484a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    484e:	42a6      	cmp	r6, r4
    4850:	d800      	bhi.n	4854 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4852:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4854:	e9d4 3500 	ldrd	r3, r5, [r4]
    4858:	4628      	mov	r0, r5
    485a:	4798      	blx	r3
		if (dev != NULL) {
    485c:	b16d      	cbz	r5, 487a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    485e:	b138      	cbz	r0, 4870 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4860:	2800      	cmp	r0, #0
    4862:	bfb8      	it	lt
    4864:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4866:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    4868:	28ff      	cmp	r0, #255	; 0xff
    486a:	bfa8      	it	ge
    486c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    486e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4870:	68ea      	ldr	r2, [r5, #12]
    4872:	7853      	ldrb	r3, [r2, #1]
    4874:	f043 0301 	orr.w	r3, r3, #1
    4878:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    487a:	3408      	adds	r4, #8
    487c:	e7e7      	b.n	484e <z_sys_init_run_level+0xe>
    487e:	bf00      	nop
    4880:	00007d64 	.word	0x00007d64

00004884 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4884:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4886:	4b0a      	ldr	r3, [pc, #40]	; (48b0 <bg_thread_main+0x2c>)
    4888:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    488a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    488c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    488e:	f7ff ffd7 	bl	4840 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4892:	f002 f8d7 	bl	6a44 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    4896:	2004      	movs	r0, #4
    4898:	f7ff ffd2 	bl	4840 <z_sys_init_run_level>

	z_init_static_threads();
    489c:	f000 fa52 	bl	4d44 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    48a0:	f7fb fe06 	bl	4b0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    48a4:	4a03      	ldr	r2, [pc, #12]	; (48b4 <bg_thread_main+0x30>)
    48a6:	7b13      	ldrb	r3, [r2, #12]
    48a8:	f023 0301 	bic.w	r3, r3, #1
    48ac:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    48ae:	bd08      	pop	{r3, pc}
    48b0:	2000112e 	.word	0x2000112e
    48b4:	20000390 	.word	0x20000390

000048b8 <z_bss_zero>:
{
    48b8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    48ba:	4803      	ldr	r0, [pc, #12]	; (48c8 <z_bss_zero+0x10>)
    48bc:	4a03      	ldr	r2, [pc, #12]	; (48cc <z_bss_zero+0x14>)
    48be:	2100      	movs	r1, #0
    48c0:	1a12      	subs	r2, r2, r0
    48c2:	f002 ff7f 	bl	77c4 <z_early_memset>
}
    48c6:	bd08      	pop	{r3, pc}
    48c8:	200001f0 	.word	0x200001f0
    48cc:	20001130 	.word	0x20001130

000048d0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    48d0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    48d2:	2300      	movs	r3, #0
{
    48d4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    48d6:	2201      	movs	r2, #1
    48d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    48dc:	4e13      	ldr	r6, [pc, #76]	; (492c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    48de:	4d14      	ldr	r5, [pc, #80]	; (4930 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    48e0:	9301      	str	r3, [sp, #4]
    48e2:	220f      	movs	r2, #15
    48e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    48e8:	4912      	ldr	r1, [pc, #72]	; (4934 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    48ea:	2318      	movs	r3, #24
    48ec:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    48f0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    48f4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    48f6:	f44f 70c0 	mov.w	r0, #384	; 0x180
    48fa:	fb00 1104 	mla	r1, r0, r4, r1
    48fe:	4b0e      	ldr	r3, [pc, #56]	; (4938 <z_init_cpu+0x68>)
    4900:	9500      	str	r5, [sp, #0]
    4902:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4906:	4630      	mov	r0, r6
    4908:	f000 f97e 	bl	4c08 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    490c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    490e:	4a0b      	ldr	r2, [pc, #44]	; (493c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4910:	60ee      	str	r6, [r5, #12]
    4912:	f023 0304 	bic.w	r3, r3, #4
    4916:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4918:	f44f 6304 	mov.w	r3, #2112	; 0x840
    491c:	fb04 3303 	mla	r3, r4, r3, r3
    4920:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    4922:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    4924:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4926:	b006      	add	sp, #24
    4928:	bd70      	pop	{r4, r5, r6, pc}
    492a:	bf00      	nop
    492c:	20000310 	.word	0x20000310
    4930:	20000af8 	.word	0x20000af8
    4934:	20002200 	.word	0x20002200
    4938:	00004e99 	.word	0x00004e99
    493c:	200019c0 	.word	0x200019c0

00004940 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4940:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4942:	2000      	movs	r0, #0
{
    4944:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    4946:	f7ff ff7b 	bl	4840 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    494a:	4b2e      	ldr	r3, [pc, #184]	; (4a04 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    494c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4950:	4d2d      	ldr	r5, [pc, #180]	; (4a08 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    4952:	4e2e      	ldr	r6, [pc, #184]	; (4a0c <z_cstart+0xcc>)
    4954:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4956:	4f2e      	ldr	r7, [pc, #184]	; (4a10 <z_cstart+0xd0>)
    4958:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    495c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    495e:	2400      	movs	r4, #0
    4960:	23e0      	movs	r3, #224	; 0xe0
    4962:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4966:	77ec      	strb	r4, [r5, #31]
    4968:	762c      	strb	r4, [r5, #24]
    496a:	766c      	strb	r4, [r5, #25]
    496c:	76ac      	strb	r4, [r5, #26]
    496e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4974:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4978:	626b      	str	r3, [r5, #36]	; 0x24
    497a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    497e:	f7fd fa2f 	bl	1de0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4982:	f7fc ff91 	bl	18a8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    498a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    498c:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    498e:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4990:	f7fd fb94 	bl	20bc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4994:	f7fd fac6 	bl	1f24 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4998:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    499c:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    499e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    49a2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    49a6:	f002 f847 	bl	6a38 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    49aa:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    49ac:	f002 fefe 	bl	77ac <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    49b0:	2001      	movs	r0, #1
    49b2:	f7ff ff45 	bl	4840 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    49b6:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    49b8:	4d16      	ldr	r5, [pc, #88]	; (4a14 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    49ba:	f7ff ff41 	bl	4840 <z_sys_init_run_level>
	z_sched_init();
    49be:	f001 faf5 	bl	5fac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    49c2:	4b15      	ldr	r3, [pc, #84]	; (4a18 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    49c4:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    49c6:	9305      	str	r3, [sp, #20]
    49c8:	2301      	movs	r3, #1
    49ca:	4914      	ldr	r1, [pc, #80]	; (4a1c <z_cstart+0xdc>)
    49cc:	9400      	str	r4, [sp, #0]
    49ce:	e9cd 4303 	strd	r4, r3, [sp, #12]
    49d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    49d6:	463b      	mov	r3, r7
    49d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    49dc:	4628      	mov	r0, r5
    49de:	f000 f913 	bl	4c08 <z_setup_new_thread>
    49e2:	7b6a      	ldrb	r2, [r5, #13]
    49e4:	4606      	mov	r6, r0
    49e6:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    49ea:	4628      	mov	r0, r5
    49ec:	736a      	strb	r2, [r5, #13]
    49ee:	f000 fd91 	bl	5514 <z_ready_thread>
	z_init_cpu(0);
    49f2:	4620      	mov	r0, r4
    49f4:	f7ff ff6c 	bl	48d0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    49f8:	463a      	mov	r2, r7
    49fa:	4631      	mov	r1, r6
    49fc:	4628      	mov	r0, r5
    49fe:	f7fd f869 	bl	1ad4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4a02:	bf00      	nop
    4a04:	20002200 	.word	0x20002200
    4a08:	e000ed00 	.word	0xe000ed00
    4a0c:	20000af8 	.word	0x20000af8
    4a10:	00004885 	.word	0x00004885
    4a14:	20000390 	.word	0x20000390
    4a18:	00008a29 	.word	0x00008a29
    4a1c:	20002380 	.word	0x20002380

00004a20 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4a20:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a22:	4c0d      	ldr	r4, [pc, #52]	; (4a58 <init_mem_slab_module+0x38>)
    4a24:	4d0d      	ldr	r5, [pc, #52]	; (4a5c <init_mem_slab_module+0x3c>)
	int rc = 0;
    4a26:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a28:	42ac      	cmp	r4, r5
    4a2a:	d913      	bls.n	4a54 <init_mem_slab_module+0x34>
    4a2c:	490c      	ldr	r1, [pc, #48]	; (4a60 <init_mem_slab_module+0x40>)
    4a2e:	4a0d      	ldr	r2, [pc, #52]	; (4a64 <init_mem_slab_module+0x44>)
    4a30:	480d      	ldr	r0, [pc, #52]	; (4a68 <init_mem_slab_module+0x48>)
    4a32:	233d      	movs	r3, #61	; 0x3d
    4a34:	f002 fb31 	bl	709a <assert_print>
    4a38:	480c      	ldr	r0, [pc, #48]	; (4a6c <init_mem_slab_module+0x4c>)
    4a3a:	f002 fb2e 	bl	709a <assert_print>
    4a3e:	4809      	ldr	r0, [pc, #36]	; (4a64 <init_mem_slab_module+0x44>)
    4a40:	213d      	movs	r1, #61	; 0x3d
    4a42:	f002 fb23 	bl	708c <assert_post_action>
		rc = create_free_list(slab);
    4a46:	4620      	mov	r0, r4
    4a48:	f002 fec0 	bl	77cc <create_free_list>
		if (rc < 0) {
    4a4c:	2800      	cmp	r0, #0
    4a4e:	db02      	blt.n	4a56 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4a50:	3420      	adds	r4, #32
    4a52:	e7e9      	b.n	4a28 <init_mem_slab_module+0x8>
    4a54:	d3f7      	bcc.n	4a46 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
    4a56:	bd38      	pop	{r3, r4, r5, pc}
    4a58:	20000188 	.word	0x20000188
    4a5c:	20000188 	.word	0x20000188
    4a60:	00008a56 	.word	0x00008a56
    4a64:	00008a31 	.word	0x00008a31
    4a68:	00007ea3 	.word	0x00007ea3
    4a6c:	00008a73 	.word	0x00008a73

00004a70 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4a74:	4604      	mov	r4, r0
    4a76:	460e      	mov	r6, r1
    4a78:	4690      	mov	r8, r2
    4a7a:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4a7c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4a80:	f04f 0320 	mov.w	r3, #32
    4a84:	f3ef 8911 	mrs	r9, BASEPRI
    4a88:	f383 8812 	msr	BASEPRI_MAX, r3
    4a8c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4a90:	4628      	mov	r0, r5
    4a92:	f000 f9db 	bl	4e4c <z_spin_lock_valid>
    4a96:	b968      	cbnz	r0, 4ab4 <k_mem_slab_alloc+0x44>
    4a98:	4a23      	ldr	r2, [pc, #140]	; (4b28 <k_mem_slab_alloc+0xb8>)
    4a9a:	4924      	ldr	r1, [pc, #144]	; (4b2c <k_mem_slab_alloc+0xbc>)
    4a9c:	4824      	ldr	r0, [pc, #144]	; (4b30 <k_mem_slab_alloc+0xc0>)
    4a9e:	2394      	movs	r3, #148	; 0x94
    4aa0:	f002 fafb 	bl	709a <assert_print>
    4aa4:	4629      	mov	r1, r5
    4aa6:	4823      	ldr	r0, [pc, #140]	; (4b34 <k_mem_slab_alloc+0xc4>)
    4aa8:	f002 faf7 	bl	709a <assert_print>
    4aac:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4aae:	481e      	ldr	r0, [pc, #120]	; (4b28 <k_mem_slab_alloc+0xb8>)
    4ab0:	f002 faec 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    4ab4:	4628      	mov	r0, r5
    4ab6:	f000 f9e7 	bl	4e88 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4aba:	69a3      	ldr	r3, [r4, #24]
    4abc:	b1b3      	cbz	r3, 4aec <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
    4abe:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    4ac0:	681b      	ldr	r3, [r3, #0]
    4ac2:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    4ac4:	69e3      	ldr	r3, [r4, #28]
    4ac6:	3301      	adds	r3, #1
    4ac8:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4aca:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4acc:	4628      	mov	r0, r5
    4ace:	f000 f9cb 	bl	4e68 <z_spin_unlock_valid>
    4ad2:	bb18      	cbnz	r0, 4b1c <k_mem_slab_alloc+0xac>
    4ad4:	4a14      	ldr	r2, [pc, #80]	; (4b28 <k_mem_slab_alloc+0xb8>)
    4ad6:	4918      	ldr	r1, [pc, #96]	; (4b38 <k_mem_slab_alloc+0xc8>)
    4ad8:	4815      	ldr	r0, [pc, #84]	; (4b30 <k_mem_slab_alloc+0xc0>)
    4ada:	23c2      	movs	r3, #194	; 0xc2
    4adc:	f002 fadd 	bl	709a <assert_print>
    4ae0:	4629      	mov	r1, r5
    4ae2:	4816      	ldr	r0, [pc, #88]	; (4b3c <k_mem_slab_alloc+0xcc>)
    4ae4:	f002 fad9 	bl	709a <assert_print>
    4ae8:	21c2      	movs	r1, #194	; 0xc2
    4aea:	e7e0      	b.n	4aae <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4aec:	ea58 0207 	orrs.w	r2, r8, r7
    4af0:	d103      	bne.n	4afa <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
    4af2:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    4af4:	f06f 040b 	mvn.w	r4, #11
    4af8:	e7e8      	b.n	4acc <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4afa:	4622      	mov	r2, r4
    4afc:	e9cd 8700 	strd	r8, r7, [sp]
    4b00:	4649      	mov	r1, r9
    4b02:	4628      	mov	r0, r5
    4b04:	f001 f81a 	bl	5b3c <z_pend_curr>
		if (result == 0) {
    4b08:	4604      	mov	r4, r0
    4b0a:	b918      	cbnz	r0, 4b14 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
    4b0c:	4b0c      	ldr	r3, [pc, #48]	; (4b40 <k_mem_slab_alloc+0xd0>)
    4b0e:	689b      	ldr	r3, [r3, #8]
    4b10:	695b      	ldr	r3, [r3, #20]
    4b12:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    4b14:	4620      	mov	r0, r4
    4b16:	b003      	add	sp, #12
    4b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
    4b1c:	f389 8811 	msr	BASEPRI, r9
    4b20:	f3bf 8f6f 	isb	sy
	return result;
    4b24:	e7f6      	b.n	4b14 <k_mem_slab_alloc+0xa4>
    4b26:	bf00      	nop
    4b28:	000080b8 	.word	0x000080b8
    4b2c:	00008111 	.word	0x00008111
    4b30:	00007ea3 	.word	0x00007ea3
    4b34:	00008126 	.word	0x00008126
    4b38:	000080e5 	.word	0x000080e5
    4b3c:	000080fc 	.word	0x000080fc
    4b40:	20000af8 	.word	0x20000af8

00004b44 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b48:	4604      	mov	r4, r0
    4b4a:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    4b4c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    4b50:	f04f 0320 	mov.w	r3, #32
    4b54:	f3ef 8711 	mrs	r7, BASEPRI
    4b58:	f383 8812 	msr	BASEPRI_MAX, r3
    4b5c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4b60:	4628      	mov	r0, r5
    4b62:	f000 f973 	bl	4e4c <z_spin_lock_valid>
    4b66:	b968      	cbnz	r0, 4b84 <k_mem_slab_free+0x40>
    4b68:	4a21      	ldr	r2, [pc, #132]	; (4bf0 <k_mem_slab_free+0xac>)
    4b6a:	4922      	ldr	r1, [pc, #136]	; (4bf4 <k_mem_slab_free+0xb0>)
    4b6c:	4822      	ldr	r0, [pc, #136]	; (4bf8 <k_mem_slab_free+0xb4>)
    4b6e:	2394      	movs	r3, #148	; 0x94
    4b70:	f002 fa93 	bl	709a <assert_print>
    4b74:	4629      	mov	r1, r5
    4b76:	4821      	ldr	r0, [pc, #132]	; (4bfc <k_mem_slab_free+0xb8>)
    4b78:	f002 fa8f 	bl	709a <assert_print>
    4b7c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4b7e:	481c      	ldr	r0, [pc, #112]	; (4bf0 <k_mem_slab_free+0xac>)
    4b80:	f002 fa84 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    4b84:	4628      	mov	r0, r5
    4b86:	f000 f97f 	bl	4e88 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4b8a:	f8d4 8018 	ldr.w	r8, [r4, #24]
    4b8e:	f1b8 0f00 	cmp.w	r8, #0
    4b92:	d10f      	bne.n	4bb4 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4b94:	4620      	mov	r0, r4
    4b96:	f001 f9b9 	bl	5f0c <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4b9a:	b158      	cbz	r0, 4bb4 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4b9c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4b9e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4ba0:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    4ba4:	f000 fcb6 	bl	5514 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4ba8:	4639      	mov	r1, r7
    4baa:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    4bb0:	f000 bcf6 	b.w	55a0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4bb4:	6833      	ldr	r3, [r6, #0]
    4bb6:	69a2      	ldr	r2, [r4, #24]
    4bb8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4bba:	6833      	ldr	r3, [r6, #0]
    4bbc:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    4bbe:	69e3      	ldr	r3, [r4, #28]
    4bc0:	3b01      	subs	r3, #1
    4bc2:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4bc4:	4628      	mov	r0, r5
    4bc6:	f000 f94f 	bl	4e68 <z_spin_unlock_valid>
    4bca:	b958      	cbnz	r0, 4be4 <k_mem_slab_free+0xa0>
    4bcc:	4a08      	ldr	r2, [pc, #32]	; (4bf0 <k_mem_slab_free+0xac>)
    4bce:	490c      	ldr	r1, [pc, #48]	; (4c00 <k_mem_slab_free+0xbc>)
    4bd0:	4809      	ldr	r0, [pc, #36]	; (4bf8 <k_mem_slab_free+0xb4>)
    4bd2:	23c2      	movs	r3, #194	; 0xc2
    4bd4:	f002 fa61 	bl	709a <assert_print>
    4bd8:	4629      	mov	r1, r5
    4bda:	480a      	ldr	r0, [pc, #40]	; (4c04 <k_mem_slab_free+0xc0>)
    4bdc:	f002 fa5d 	bl	709a <assert_print>
    4be0:	21c2      	movs	r1, #194	; 0xc2
    4be2:	e7cc      	b.n	4b7e <k_mem_slab_free+0x3a>
	__asm__ volatile(
    4be4:	f387 8811 	msr	BASEPRI, r7
    4be8:	f3bf 8f6f 	isb	sy
}
    4bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bf0:	000080b8 	.word	0x000080b8
    4bf4:	00008111 	.word	0x00008111
    4bf8:	00007ea3 	.word	0x00007ea3
    4bfc:	00008126 	.word	0x00008126
    4c00:	000080e5 	.word	0x000080e5
    4c04:	000080fc 	.word	0x000080fc

00004c08 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4c08:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c0a:	b085      	sub	sp, #20
    4c0c:	4604      	mov	r4, r0
    4c0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    4c10:	2d0f      	cmp	r5, #15
    4c12:	d12e      	bne.n	4c72 <z_setup_new_thread+0x6a>
    4c14:	4822      	ldr	r0, [pc, #136]	; (4ca0 <z_setup_new_thread+0x98>)
    4c16:	4283      	cmp	r3, r0
    4c18:	d12f      	bne.n	4c7a <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c1e:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4c20:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
    4c24:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
    4c26:	980e      	ldr	r0, [sp, #56]	; 0x38
    4c28:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c2a:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4c2e:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
    4c32:	e9c4 2519 	strd	r2, r5, [r4, #100]	; 0x64
	thread_base->pended_on = NULL;
    4c36:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4c3a:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
    4c3c:	2004      	movs	r0, #4
    4c3e:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4c40:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
    4c44:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    4c46:	66e6      	str	r6, [r4, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4c48:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c4c:	9202      	str	r2, [sp, #8]
    4c4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4c50:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4c52:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4c54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4c56:	9200      	str	r2, [sp, #0]
    4c58:	4620      	mov	r0, r4
    4c5a:	463a      	mov	r2, r7
    4c5c:	f7fc ff08 	bl	1a70 <arch_new_thread>
	if (!_current) {
    4c60:	4b10      	ldr	r3, [pc, #64]	; (4ca4 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
    4c62:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    4c64:	689b      	ldr	r3, [r3, #8]
    4c66:	b103      	cbz	r3, 4c6a <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
    4c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4c6a:	6723      	str	r3, [r4, #112]	; 0x70
}
    4c6c:	4638      	mov	r0, r7
    4c6e:	b005      	add	sp, #20
    4c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    4c72:	f105 0010 	add.w	r0, r5, #16
    4c76:	281e      	cmp	r0, #30
    4c78:	d9cf      	bls.n	4c1a <z_setup_new_thread+0x12>
    4c7a:	4a0b      	ldr	r2, [pc, #44]	; (4ca8 <z_setup_new_thread+0xa0>)
    4c7c:	490b      	ldr	r1, [pc, #44]	; (4cac <z_setup_new_thread+0xa4>)
    4c7e:	480c      	ldr	r0, [pc, #48]	; (4cb0 <z_setup_new_thread+0xa8>)
    4c80:	f44f 7306 	mov.w	r3, #536	; 0x218
    4c84:	f002 fa09 	bl	709a <assert_print>
    4c88:	480a      	ldr	r0, [pc, #40]	; (4cb4 <z_setup_new_thread+0xac>)
    4c8a:	4629      	mov	r1, r5
    4c8c:	f06f 030f 	mvn.w	r3, #15
    4c90:	220e      	movs	r2, #14
    4c92:	f002 fa02 	bl	709a <assert_print>
    4c96:	4804      	ldr	r0, [pc, #16]	; (4ca8 <z_setup_new_thread+0xa0>)
    4c98:	f44f 7106 	mov.w	r1, #536	; 0x218
    4c9c:	f002 f9f6 	bl	708c <assert_post_action>
    4ca0:	00004e99 	.word	0x00004e99
    4ca4:	20000af8 	.word	0x20000af8
    4ca8:	00008a92 	.word	0x00008a92
    4cac:	00008ab5 	.word	0x00008ab5
    4cb0:	00007ea3 	.word	0x00007ea3
    4cb4:	00008b35 	.word	0x00008b35

00004cb8 <z_impl_k_thread_create>:
{
    4cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cba:	b087      	sub	sp, #28
    4cbc:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
    4cc0:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4cc2:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    4cc6:	b175      	cbz	r5, 4ce6 <z_impl_k_thread_create+0x2e>
    4cc8:	4919      	ldr	r1, [pc, #100]	; (4d30 <z_impl_k_thread_create+0x78>)
    4cca:	4a1a      	ldr	r2, [pc, #104]	; (4d34 <z_impl_k_thread_create+0x7c>)
    4ccc:	481a      	ldr	r0, [pc, #104]	; (4d38 <z_impl_k_thread_create+0x80>)
    4cce:	f240 2387 	movw	r3, #647	; 0x287
    4cd2:	f002 f9e2 	bl	709a <assert_print>
    4cd6:	4819      	ldr	r0, [pc, #100]	; (4d3c <z_impl_k_thread_create+0x84>)
    4cd8:	f002 f9df 	bl	709a <assert_print>
    4cdc:	4815      	ldr	r0, [pc, #84]	; (4d34 <z_impl_k_thread_create+0x7c>)
    4cde:	f240 2187 	movw	r1, #647	; 0x287
    4ce2:	f002 f9d3 	bl	708c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4ce6:	9505      	str	r5, [sp, #20]
    4ce8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    4cea:	9504      	str	r5, [sp, #16]
    4cec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    4cee:	9503      	str	r5, [sp, #12]
    4cf0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4cf2:	9502      	str	r5, [sp, #8]
    4cf4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    4cf6:	9501      	str	r5, [sp, #4]
    4cf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4cfa:	9500      	str	r5, [sp, #0]
    4cfc:	f7ff ff84 	bl	4c08 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4d00:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    4d04:	bf08      	it	eq
    4d06:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    4d0a:	d005      	beq.n	4d18 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4d0c:	ea56 0307 	orrs.w	r3, r6, r7
    4d10:	d105      	bne.n	4d1e <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
    4d12:	4620      	mov	r0, r4
    4d14:	f000 fc86 	bl	5624 <z_sched_start>
}
    4d18:	4620      	mov	r0, r4
    4d1a:	b007      	add	sp, #28
    4d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4d1e:	4908      	ldr	r1, [pc, #32]	; (4d40 <z_impl_k_thread_create+0x88>)
    4d20:	463a      	mov	r2, r7
    4d22:	4633      	mov	r3, r6
    4d24:	f104 0018 	add.w	r0, r4, #24
    4d28:	f001 fbf0 	bl	650c <z_add_timeout>
    4d2c:	e7f4      	b.n	4d18 <z_impl_k_thread_create+0x60>
    4d2e:	bf00      	nop
    4d30:	00008b66 	.word	0x00008b66
    4d34:	00008a92 	.word	0x00008a92
    4d38:	00007ea3 	.word	0x00007ea3
    4d3c:	00008b78 	.word	0x00008b78
    4d40:	00005e5d 	.word	0x00005e5d

00004d44 <z_init_static_threads>:
{
    4d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4d48:	4c39      	ldr	r4, [pc, #228]	; (4e30 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4d4a:	4d3a      	ldr	r5, [pc, #232]	; (4e34 <z_init_static_threads+0xf0>)
{
    4d4c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    4d4e:	42ac      	cmp	r4, r5
    4d50:	4626      	mov	r6, r4
    4d52:	d92a      	bls.n	4daa <z_init_static_threads+0x66>
    4d54:	4938      	ldr	r1, [pc, #224]	; (4e38 <z_init_static_threads+0xf4>)
    4d56:	4a39      	ldr	r2, [pc, #228]	; (4e3c <z_init_static_threads+0xf8>)
    4d58:	4839      	ldr	r0, [pc, #228]	; (4e40 <z_init_static_threads+0xfc>)
    4d5a:	f240 23ee 	movw	r3, #750	; 0x2ee
    4d5e:	f002 f99c 	bl	709a <assert_print>
    4d62:	4838      	ldr	r0, [pc, #224]	; (4e44 <z_init_static_threads+0x100>)
    4d64:	f002 f999 	bl	709a <assert_print>
    4d68:	f240 21ee 	movw	r1, #750	; 0x2ee
	_FOREACH_STATIC_THREAD(thread_data) {
    4d6c:	4833      	ldr	r0, [pc, #204]	; (4e3c <z_init_static_threads+0xf8>)
    4d6e:	f002 f98d 	bl	708c <assert_post_action>
		z_setup_new_thread(
    4d72:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4d76:	9305      	str	r3, [sp, #20]
    4d78:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4d7c:	9304      	str	r3, [sp, #16]
    4d7e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4d82:	9303      	str	r3, [sp, #12]
    4d84:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4d88:	9302      	str	r3, [sp, #8]
    4d8a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4d8e:	9301      	str	r3, [sp, #4]
    4d90:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4d94:	9300      	str	r3, [sp, #0]
    4d96:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4d9a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4d9e:	f7ff ff33 	bl	4c08 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4da2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4da6:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4da8:	e7d1      	b.n	4d4e <z_init_static_threads+0xa>
    4daa:	42ae      	cmp	r6, r5
    4dac:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4db0:	d3df      	bcc.n	4d72 <z_init_static_threads+0x2e>
	k_sched_lock();
    4db2:	f000 fc89 	bl	56c8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4db6:	4c1e      	ldr	r4, [pc, #120]	; (4e30 <z_init_static_threads+0xec>)
    4db8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4e48 <z_init_static_threads+0x104>
			return ((t * to_hz + off) / from_hz);
    4dbc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4dc0:	f240 37e7 	movw	r7, #999	; 0x3e7
    4dc4:	42ac      	cmp	r4, r5
    4dc6:	d92c      	bls.n	4e22 <z_init_static_threads+0xde>
    4dc8:	491b      	ldr	r1, [pc, #108]	; (4e38 <z_init_static_threads+0xf4>)
    4dca:	4a1c      	ldr	r2, [pc, #112]	; (4e3c <z_init_static_threads+0xf8>)
    4dcc:	481c      	ldr	r0, [pc, #112]	; (4e40 <z_init_static_threads+0xfc>)
    4dce:	f240 330d 	movw	r3, #781	; 0x30d
    4dd2:	f002 f962 	bl	709a <assert_print>
    4dd6:	481b      	ldr	r0, [pc, #108]	; (4e44 <z_init_static_threads+0x100>)
    4dd8:	f002 f95f 	bl	709a <assert_print>
    4ddc:	f240 310d 	movw	r1, #781	; 0x30d
    4de0:	e7c4      	b.n	4d6c <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4de2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4de4:	1c5a      	adds	r2, r3, #1
    4de6:	d00d      	beq.n	4e04 <z_init_static_threads+0xc0>
					    K_MSEC(thread_data->init_delay));
    4de8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4dec:	2100      	movs	r1, #0
    4dee:	4638      	mov	r0, r7
    4df0:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4df4:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4df8:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4dfc:	d104      	bne.n	4e08 <z_init_static_threads+0xc4>
	z_sched_start(thread);
    4dfe:	4640      	mov	r0, r8
    4e00:	f000 fc10 	bl	5624 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4e04:	3430      	adds	r4, #48	; 0x30
    4e06:	e7dd      	b.n	4dc4 <z_init_static_threads+0x80>
    4e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4e0c:	2300      	movs	r3, #0
    4e0e:	f7fb f977 	bl	100 <__aeabi_uldivmod>
    4e12:	4602      	mov	r2, r0
    4e14:	460b      	mov	r3, r1
    4e16:	f108 0018 	add.w	r0, r8, #24
    4e1a:	4649      	mov	r1, r9
    4e1c:	f001 fb76 	bl	650c <z_add_timeout>
    4e20:	e7f0      	b.n	4e04 <z_init_static_threads+0xc0>
    4e22:	d3de      	bcc.n	4de2 <z_init_static_threads+0x9e>
}
    4e24:	b007      	add	sp, #28
    4e26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4e2a:	f000 bcb9 	b.w	57a0 <k_sched_unlock>
    4e2e:	bf00      	nop
    4e30:	00007b28 	.word	0x00007b28
    4e34:	00007b28 	.word	0x00007b28
    4e38:	00008b9d 	.word	0x00008b9d
    4e3c:	00008a92 	.word	0x00008a92
    4e40:	00007ea3 	.word	0x00007ea3
    4e44:	00008a73 	.word	0x00008a73
    4e48:	00005e5d 	.word	0x00005e5d

00004e4c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    4e4c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    4e4e:	b138      	cbz	r0, 4e60 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    4e50:	4b04      	ldr	r3, [pc, #16]	; (4e64 <z_spin_lock_valid+0x18>)
    4e52:	7d1b      	ldrb	r3, [r3, #20]
    4e54:	f000 0003 	and.w	r0, r0, #3
    4e58:	1ac0      	subs	r0, r0, r3
    4e5a:	bf18      	it	ne
    4e5c:	2001      	movne	r0, #1
    4e5e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    4e60:	2001      	movs	r0, #1
}
    4e62:	4770      	bx	lr
    4e64:	20000af8 	.word	0x20000af8

00004e68 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4e68:	4a06      	ldr	r2, [pc, #24]	; (4e84 <z_spin_unlock_valid+0x1c>)
    4e6a:	7d11      	ldrb	r1, [r2, #20]
    4e6c:	6892      	ldr	r2, [r2, #8]
    4e6e:	430a      	orrs	r2, r1
    4e70:	6801      	ldr	r1, [r0, #0]
{
    4e72:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    4e74:	4291      	cmp	r1, r2
    4e76:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    4e7a:	bf04      	itt	eq
    4e7c:	6018      	streq	r0, [r3, #0]
	return true;
    4e7e:	2001      	moveq	r0, #1
}
    4e80:	4770      	bx	lr
    4e82:	bf00      	nop
    4e84:	20000af8 	.word	0x20000af8

00004e88 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    4e88:	4b02      	ldr	r3, [pc, #8]	; (4e94 <z_spin_lock_set_owner+0xc>)
    4e8a:	7d1a      	ldrb	r2, [r3, #20]
    4e8c:	689b      	ldr	r3, [r3, #8]
    4e8e:	4313      	orrs	r3, r2
    4e90:	6003      	str	r3, [r0, #0]
}
    4e92:	4770      	bx	lr
    4e94:	20000af8 	.word	0x20000af8

00004e98 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    4e98:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4e9a:	4c13      	ldr	r4, [pc, #76]	; (4ee8 <idle+0x50>)
    4e9c:	68a3      	ldr	r3, [r4, #8]
    4e9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4ea2:	2b00      	cmp	r3, #0
    4ea4:	db10      	blt.n	4ec8 <idle+0x30>
	return !z_sys_post_kernel;
    4ea6:	4d11      	ldr	r5, [pc, #68]	; (4eec <idle+0x54>)
	__asm__ volatile(
    4ea8:	f04f 0220 	mov.w	r2, #32
    4eac:	f3ef 8311 	mrs	r3, BASEPRI
    4eb0:	f382 8812 	msr	BASEPRI_MAX, r2
    4eb4:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4eb8:	f001 fc3a 	bl	6730 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4ebc:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    4ebe:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4ec0:	b963      	cbnz	r3, 4edc <idle+0x44>
	arch_cpu_idle();
    4ec2:	f7fc fcf7 	bl	18b4 <arch_cpu_idle>
}
    4ec6:	e7ef      	b.n	4ea8 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    4ec8:	4909      	ldr	r1, [pc, #36]	; (4ef0 <idle+0x58>)
    4eca:	480a      	ldr	r0, [pc, #40]	; (4ef4 <idle+0x5c>)
    4ecc:	4a0a      	ldr	r2, [pc, #40]	; (4ef8 <idle+0x60>)
    4ece:	2327      	movs	r3, #39	; 0x27
    4ed0:	f002 f8e3 	bl	709a <assert_print>
    4ed4:	4808      	ldr	r0, [pc, #32]	; (4ef8 <idle+0x60>)
    4ed6:	2127      	movs	r1, #39	; 0x27
    4ed8:	f002 f8d8 	bl	708c <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4edc:	f7fc faf8 	bl	14d0 <pm_system_suspend>
    4ee0:	2800      	cmp	r0, #0
    4ee2:	d1e1      	bne.n	4ea8 <idle+0x10>
    4ee4:	e7ed      	b.n	4ec2 <idle+0x2a>
    4ee6:	bf00      	nop
    4ee8:	20000af8 	.word	0x20000af8
    4eec:	2000112e 	.word	0x2000112e
    4ef0:	00008beb 	.word	0x00008beb
    4ef4:	00007ea3 	.word	0x00007ea3
    4ef8:	00008bca 	.word	0x00008bca

00004efc <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4efc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4f00:	4604      	mov	r4, r0
    4f02:	4617      	mov	r7, r2
    4f04:	461e      	mov	r6, r3
    4f06:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    4f0a:	b165      	cbz	r5, 4f26 <z_impl_k_mutex_lock+0x2a>
    4f0c:	4958      	ldr	r1, [pc, #352]	; (5070 <z_impl_k_mutex_lock+0x174>)
    4f0e:	4a59      	ldr	r2, [pc, #356]	; (5074 <z_impl_k_mutex_lock+0x178>)
    4f10:	4859      	ldr	r0, [pc, #356]	; (5078 <z_impl_k_mutex_lock+0x17c>)
    4f12:	2365      	movs	r3, #101	; 0x65
    4f14:	f002 f8c1 	bl	709a <assert_print>
    4f18:	4858      	ldr	r0, [pc, #352]	; (507c <z_impl_k_mutex_lock+0x180>)
    4f1a:	f002 f8be 	bl	709a <assert_print>
    4f1e:	4855      	ldr	r0, [pc, #340]	; (5074 <z_impl_k_mutex_lock+0x178>)
    4f20:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    4f22:	f002 f8b3 	bl	708c <assert_post_action>
    4f26:	f04f 0320 	mov.w	r3, #32
    4f2a:	f3ef 8811 	mrs	r8, BASEPRI
    4f2e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f32:	f3bf 8f6f 	isb	sy
    4f36:	4852      	ldr	r0, [pc, #328]	; (5080 <z_impl_k_mutex_lock+0x184>)
    4f38:	f7ff ff88 	bl	4e4c <z_spin_lock_valid>
    4f3c:	b960      	cbnz	r0, 4f58 <z_impl_k_mutex_lock+0x5c>
    4f3e:	4a51      	ldr	r2, [pc, #324]	; (5084 <z_impl_k_mutex_lock+0x188>)
    4f40:	4951      	ldr	r1, [pc, #324]	; (5088 <z_impl_k_mutex_lock+0x18c>)
    4f42:	484d      	ldr	r0, [pc, #308]	; (5078 <z_impl_k_mutex_lock+0x17c>)
    4f44:	2394      	movs	r3, #148	; 0x94
    4f46:	f002 f8a8 	bl	709a <assert_print>
    4f4a:	494d      	ldr	r1, [pc, #308]	; (5080 <z_impl_k_mutex_lock+0x184>)
    4f4c:	484f      	ldr	r0, [pc, #316]	; (508c <z_impl_k_mutex_lock+0x190>)
    4f4e:	f002 f8a4 	bl	709a <assert_print>
    4f52:	2194      	movs	r1, #148	; 0x94
    4f54:	484b      	ldr	r0, [pc, #300]	; (5084 <z_impl_k_mutex_lock+0x188>)
    4f56:	e7e4      	b.n	4f22 <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
    4f58:	4849      	ldr	r0, [pc, #292]	; (5080 <z_impl_k_mutex_lock+0x184>)
    4f5a:	f7ff ff95 	bl	4e88 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4f5e:	68e3      	ldr	r3, [r4, #12]
    4f60:	4a4b      	ldr	r2, [pc, #300]	; (5090 <z_impl_k_mutex_lock+0x194>)
    4f62:	b19b      	cbz	r3, 4f8c <z_impl_k_mutex_lock+0x90>
    4f64:	68a0      	ldr	r0, [r4, #8]
    4f66:	6891      	ldr	r1, [r2, #8]
    4f68:	4288      	cmp	r0, r1
    4f6a:	d027      	beq.n	4fbc <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    4f6c:	ea57 0306 	orrs.w	r3, r7, r6
    4f70:	d12c      	bne.n	4fcc <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    4f72:	4843      	ldr	r0, [pc, #268]	; (5080 <z_impl_k_mutex_lock+0x184>)
    4f74:	f7ff ff78 	bl	4e68 <z_spin_unlock_valid>
    4f78:	b1a0      	cbz	r0, 4fa4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
    4f7a:	f388 8811 	msr	BASEPRI, r8
    4f7e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    4f82:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    4f86:	b002      	add	sp, #8
    4f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    4f8c:	6891      	ldr	r1, [r2, #8]
    4f8e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4f92:	483b      	ldr	r0, [pc, #236]	; (5080 <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4f94:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    4f96:	3301      	adds	r3, #1
    4f98:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    4f9a:	6893      	ldr	r3, [r2, #8]
    4f9c:	60a3      	str	r3, [r4, #8]
    4f9e:	f7ff ff63 	bl	4e68 <z_spin_unlock_valid>
    4fa2:	b968      	cbnz	r0, 4fc0 <z_impl_k_mutex_lock+0xc4>
    4fa4:	4a37      	ldr	r2, [pc, #220]	; (5084 <z_impl_k_mutex_lock+0x188>)
    4fa6:	493b      	ldr	r1, [pc, #236]	; (5094 <z_impl_k_mutex_lock+0x198>)
    4fa8:	4833      	ldr	r0, [pc, #204]	; (5078 <z_impl_k_mutex_lock+0x17c>)
    4faa:	23c2      	movs	r3, #194	; 0xc2
    4fac:	f002 f875 	bl	709a <assert_print>
    4fb0:	4933      	ldr	r1, [pc, #204]	; (5080 <z_impl_k_mutex_lock+0x184>)
    4fb2:	4839      	ldr	r0, [pc, #228]	; (5098 <z_impl_k_mutex_lock+0x19c>)
    4fb4:	f002 f871 	bl	709a <assert_print>
    4fb8:	21c2      	movs	r1, #194	; 0xc2
    4fba:	e7cb      	b.n	4f54 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
    4fbc:	6921      	ldr	r1, [r4, #16]
    4fbe:	e7e8      	b.n	4f92 <z_impl_k_mutex_lock+0x96>
    4fc0:	f388 8811 	msr	BASEPRI, r8
    4fc4:	f3bf 8f6f 	isb	sy
		return 0;
    4fc8:	2000      	movs	r0, #0
    4fca:	e7dc      	b.n	4f86 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4fcc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    4fd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    4fd4:	4299      	cmp	r1, r3
    4fd6:	bfa8      	it	ge
    4fd8:	4619      	movge	r1, r3
    4fda:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    4fde:	4291      	cmp	r1, r2
    4fe0:	bfb8      	it	lt
    4fe2:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    4fe4:	428b      	cmp	r3, r1
    4fe6:	dd02      	ble.n	4fee <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
    4fe8:	f002 fc22 	bl	7830 <adjust_owner_prio.isra.0>
    4fec:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    4fee:	e9cd 7600 	strd	r7, r6, [sp]
    4ff2:	4823      	ldr	r0, [pc, #140]	; (5080 <z_impl_k_mutex_lock+0x184>)
    4ff4:	4622      	mov	r2, r4
    4ff6:	4641      	mov	r1, r8
    4ff8:	f000 fda0 	bl	5b3c <z_pend_curr>
	if (got_mutex == 0) {
    4ffc:	2800      	cmp	r0, #0
    4ffe:	d0e3      	beq.n	4fc8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5000:	f04f 0320 	mov.w	r3, #32
    5004:	f3ef 8611 	mrs	r6, BASEPRI
    5008:	f383 8812 	msr	BASEPRI_MAX, r3
    500c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5010:	481b      	ldr	r0, [pc, #108]	; (5080 <z_impl_k_mutex_lock+0x184>)
    5012:	f7ff ff1b 	bl	4e4c <z_spin_lock_valid>
    5016:	2800      	cmp	r0, #0
    5018:	d091      	beq.n	4f3e <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
    501a:	4819      	ldr	r0, [pc, #100]	; (5080 <z_impl_k_mutex_lock+0x184>)
    501c:	f7ff ff34 	bl	4e88 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
    5020:	68a0      	ldr	r0, [r4, #8]
    5022:	b1c0      	cbz	r0, 5056 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5024:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5026:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5028:	429c      	cmp	r4, r3
    502a:	d00a      	beq.n	5042 <z_impl_k_mutex_lock+0x146>
    502c:	b14b      	cbz	r3, 5042 <z_impl_k_mutex_lock+0x146>
    502e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5032:	4299      	cmp	r1, r3
    5034:	bfa8      	it	ge
    5036:	4619      	movge	r1, r3
    5038:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    503c:	4299      	cmp	r1, r3
    503e:	bfb8      	it	lt
    5040:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    5042:	f002 fbf5 	bl	7830 <adjust_owner_prio.isra.0>
    5046:	b130      	cbz	r0, 5056 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
    5048:	480d      	ldr	r0, [pc, #52]	; (5080 <z_impl_k_mutex_lock+0x184>)
    504a:	4631      	mov	r1, r6
    504c:	f000 faa8 	bl	55a0 <z_reschedule>
	return -EAGAIN;
    5050:	f06f 000a 	mvn.w	r0, #10
    5054:	e797      	b.n	4f86 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
    5056:	2d00      	cmp	r5, #0
    5058:	d1f6      	bne.n	5048 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    505a:	4809      	ldr	r0, [pc, #36]	; (5080 <z_impl_k_mutex_lock+0x184>)
    505c:	f7ff ff04 	bl	4e68 <z_spin_unlock_valid>
    5060:	2800      	cmp	r0, #0
    5062:	d09f      	beq.n	4fa4 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
    5064:	f386 8811 	msr	BASEPRI, r6
    5068:	f3bf 8f6f 	isb	sy
    506c:	e7f0      	b.n	5050 <z_impl_k_mutex_lock+0x154>
    506e:	bf00      	nop
    5070:	00008b66 	.word	0x00008b66
    5074:	00008c13 	.word	0x00008c13
    5078:	00007ea3 	.word	0x00007ea3
    507c:	00008c35 	.word	0x00008c35
    5080:	20000b20 	.word	0x20000b20
    5084:	000080b8 	.word	0x000080b8
    5088:	00008111 	.word	0x00008111
    508c:	00008126 	.word	0x00008126
    5090:	20000af8 	.word	0x20000af8
    5094:	000080e5 	.word	0x000080e5
    5098:	000080fc 	.word	0x000080fc

0000509c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	4604      	mov	r4, r0
    50a0:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    50a4:	b166      	cbz	r6, 50c0 <z_impl_k_mutex_unlock+0x24>
    50a6:	4938      	ldr	r1, [pc, #224]	; (5188 <z_impl_k_mutex_unlock+0xec>)
    50a8:	4a38      	ldr	r2, [pc, #224]	; (518c <z_impl_k_mutex_unlock+0xf0>)
    50aa:	4839      	ldr	r0, [pc, #228]	; (5190 <z_impl_k_mutex_unlock+0xf4>)
    50ac:	23cd      	movs	r3, #205	; 0xcd
    50ae:	f001 fff4 	bl	709a <assert_print>
    50b2:	4838      	ldr	r0, [pc, #224]	; (5194 <z_impl_k_mutex_unlock+0xf8>)
    50b4:	f001 fff1 	bl	709a <assert_print>
    50b8:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    50ba:	4834      	ldr	r0, [pc, #208]	; (518c <z_impl_k_mutex_unlock+0xf0>)
    50bc:	f001 ffe6 	bl	708c <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
    50c0:	6883      	ldr	r3, [r0, #8]
    50c2:	2b00      	cmp	r3, #0
    50c4:	d059      	beq.n	517a <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
    50c6:	4a34      	ldr	r2, [pc, #208]	; (5198 <z_impl_k_mutex_unlock+0xfc>)
    50c8:	6892      	ldr	r2, [r2, #8]
    50ca:	4293      	cmp	r3, r2
    50cc:	d158      	bne.n	5180 <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    50ce:	68c3      	ldr	r3, [r0, #12]
    50d0:	b93b      	cbnz	r3, 50e2 <z_impl_k_mutex_unlock+0x46>
    50d2:	4932      	ldr	r1, [pc, #200]	; (519c <z_impl_k_mutex_unlock+0x100>)
    50d4:	4a2d      	ldr	r2, [pc, #180]	; (518c <z_impl_k_mutex_unlock+0xf0>)
    50d6:	482e      	ldr	r0, [pc, #184]	; (5190 <z_impl_k_mutex_unlock+0xf4>)
    50d8:	23e5      	movs	r3, #229	; 0xe5
    50da:	f001 ffde 	bl	709a <assert_print>
    50de:	21e5      	movs	r1, #229	; 0xe5
    50e0:	e7eb      	b.n	50ba <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    50e2:	2b01      	cmp	r3, #1
    50e4:	d003      	beq.n	50ee <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
    50e6:	3b01      	subs	r3, #1
    50e8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    50ea:	2000      	movs	r0, #0
}
    50ec:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    50ee:	f04f 0320 	mov.w	r3, #32
    50f2:	f3ef 8511 	mrs	r5, BASEPRI
    50f6:	f383 8812 	msr	BASEPRI_MAX, r3
    50fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    50fe:	4828      	ldr	r0, [pc, #160]	; (51a0 <z_impl_k_mutex_unlock+0x104>)
    5100:	f7ff fea4 	bl	4e4c <z_spin_lock_valid>
    5104:	b960      	cbnz	r0, 5120 <z_impl_k_mutex_unlock+0x84>
    5106:	4a27      	ldr	r2, [pc, #156]	; (51a4 <z_impl_k_mutex_unlock+0x108>)
    5108:	4927      	ldr	r1, [pc, #156]	; (51a8 <z_impl_k_mutex_unlock+0x10c>)
    510a:	4821      	ldr	r0, [pc, #132]	; (5190 <z_impl_k_mutex_unlock+0xf4>)
    510c:	2394      	movs	r3, #148	; 0x94
    510e:	f001 ffc4 	bl	709a <assert_print>
    5112:	4923      	ldr	r1, [pc, #140]	; (51a0 <z_impl_k_mutex_unlock+0x104>)
    5114:	4825      	ldr	r0, [pc, #148]	; (51ac <z_impl_k_mutex_unlock+0x110>)
    5116:	f001 ffc0 	bl	709a <assert_print>
    511a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    511c:	4821      	ldr	r0, [pc, #132]	; (51a4 <z_impl_k_mutex_unlock+0x108>)
    511e:	e7cd      	b.n	50bc <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
    5120:	481f      	ldr	r0, [pc, #124]	; (51a0 <z_impl_k_mutex_unlock+0x104>)
    5122:	f7ff feb1 	bl	4e88 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5126:	6921      	ldr	r1, [r4, #16]
    5128:	68a0      	ldr	r0, [r4, #8]
    512a:	f002 fb81 	bl	7830 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    512e:	4620      	mov	r0, r4
    5130:	f000 feec 	bl	5f0c <z_unpend_first_thread>
	mutex->owner = new_owner;
    5134:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5136:	b150      	cbz	r0, 514e <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
    5138:	f990 200e 	ldrsb.w	r2, [r0, #14]
    513c:	6122      	str	r2, [r4, #16]
    513e:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5140:	f000 f9e8 	bl	5514 <z_ready_thread>
		z_reschedule(&lock, key);
    5144:	4816      	ldr	r0, [pc, #88]	; (51a0 <z_impl_k_mutex_unlock+0x104>)
    5146:	4629      	mov	r1, r5
    5148:	f000 fa2a 	bl	55a0 <z_reschedule>
    514c:	e7cd      	b.n	50ea <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
    514e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5150:	4813      	ldr	r0, [pc, #76]	; (51a0 <z_impl_k_mutex_unlock+0x104>)
    5152:	f7ff fe89 	bl	4e68 <z_spin_unlock_valid>
    5156:	b958      	cbnz	r0, 5170 <z_impl_k_mutex_unlock+0xd4>
    5158:	4a12      	ldr	r2, [pc, #72]	; (51a4 <z_impl_k_mutex_unlock+0x108>)
    515a:	4915      	ldr	r1, [pc, #84]	; (51b0 <z_impl_k_mutex_unlock+0x114>)
    515c:	480c      	ldr	r0, [pc, #48]	; (5190 <z_impl_k_mutex_unlock+0xf4>)
    515e:	23c2      	movs	r3, #194	; 0xc2
    5160:	f001 ff9b 	bl	709a <assert_print>
    5164:	490e      	ldr	r1, [pc, #56]	; (51a0 <z_impl_k_mutex_unlock+0x104>)
    5166:	4813      	ldr	r0, [pc, #76]	; (51b4 <z_impl_k_mutex_unlock+0x118>)
    5168:	f001 ff97 	bl	709a <assert_print>
    516c:	21c2      	movs	r1, #194	; 0xc2
    516e:	e7d5      	b.n	511c <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
    5170:	f385 8811 	msr	BASEPRI, r5
    5174:	f3bf 8f6f 	isb	sy
    5178:	e7b7      	b.n	50ea <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
    517a:	f06f 0015 	mvn.w	r0, #21
    517e:	e7b5      	b.n	50ec <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
    5180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5184:	e7b2      	b.n	50ec <z_impl_k_mutex_unlock+0x50>
    5186:	bf00      	nop
    5188:	00008b66 	.word	0x00008b66
    518c:	00008c13 	.word	0x00008c13
    5190:	00007ea3 	.word	0x00007ea3
    5194:	00008c35 	.word	0x00008c35
    5198:	20000af8 	.word	0x20000af8
    519c:	00008c5a 	.word	0x00008c5a
    51a0:	20000b20 	.word	0x20000b20
    51a4:	000080b8 	.word	0x000080b8
    51a8:	00008111 	.word	0x00008111
    51ac:	00008126 	.word	0x00008126
    51b0:	000080e5 	.word	0x000080e5
    51b4:	000080fc 	.word	0x000080fc

000051b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    51b8:	b538      	push	{r3, r4, r5, lr}
    51ba:	4604      	mov	r4, r0
	__asm__ volatile(
    51bc:	f04f 0320 	mov.w	r3, #32
    51c0:	f3ef 8511 	mrs	r5, BASEPRI
    51c4:	f383 8812 	msr	BASEPRI_MAX, r3
    51c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    51cc:	4814      	ldr	r0, [pc, #80]	; (5220 <z_impl_k_sem_give+0x68>)
    51ce:	f7ff fe3d 	bl	4e4c <z_spin_lock_valid>
    51d2:	b968      	cbnz	r0, 51f0 <z_impl_k_sem_give+0x38>
    51d4:	4a13      	ldr	r2, [pc, #76]	; (5224 <z_impl_k_sem_give+0x6c>)
    51d6:	4914      	ldr	r1, [pc, #80]	; (5228 <z_impl_k_sem_give+0x70>)
    51d8:	4814      	ldr	r0, [pc, #80]	; (522c <z_impl_k_sem_give+0x74>)
    51da:	2394      	movs	r3, #148	; 0x94
    51dc:	f001 ff5d 	bl	709a <assert_print>
    51e0:	490f      	ldr	r1, [pc, #60]	; (5220 <z_impl_k_sem_give+0x68>)
    51e2:	4813      	ldr	r0, [pc, #76]	; (5230 <z_impl_k_sem_give+0x78>)
    51e4:	f001 ff59 	bl	709a <assert_print>
    51e8:	480e      	ldr	r0, [pc, #56]	; (5224 <z_impl_k_sem_give+0x6c>)
    51ea:	2194      	movs	r1, #148	; 0x94
    51ec:	f001 ff4e 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    51f0:	480b      	ldr	r0, [pc, #44]	; (5220 <z_impl_k_sem_give+0x68>)
    51f2:	f7ff fe49 	bl	4e88 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    51f6:	4620      	mov	r0, r4
    51f8:	f000 fe88 	bl	5f0c <z_unpend_first_thread>

	if (thread != NULL) {
    51fc:	b148      	cbz	r0, 5212 <z_impl_k_sem_give+0x5a>
    51fe:	2200      	movs	r2, #0
    5200:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5202:	f000 f987 	bl	5514 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5206:	4629      	mov	r1, r5
    5208:	4805      	ldr	r0, [pc, #20]	; (5220 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    520a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    520e:	f000 b9c7 	b.w	55a0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5212:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5216:	429a      	cmp	r2, r3
    5218:	bf18      	it	ne
    521a:	3301      	addne	r3, #1
    521c:	60a3      	str	r3, [r4, #8]
}
    521e:	e7f2      	b.n	5206 <z_impl_k_sem_give+0x4e>
    5220:	20000b24 	.word	0x20000b24
    5224:	000080b8 	.word	0x000080b8
    5228:	00008111 	.word	0x00008111
    522c:	00007ea3 	.word	0x00007ea3
    5230:	00008126 	.word	0x00008126

00005234 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5236:	4604      	mov	r4, r0
    5238:	4616      	mov	r6, r2
    523a:	461d      	mov	r5, r3
    523c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    5240:	b17b      	cbz	r3, 5262 <z_impl_k_sem_take+0x2e>
    5242:	ea52 0305 	orrs.w	r3, r2, r5
    5246:	d00c      	beq.n	5262 <z_impl_k_sem_take+0x2e>
    5248:	492d      	ldr	r1, [pc, #180]	; (5300 <z_impl_k_sem_take+0xcc>)
    524a:	4a2e      	ldr	r2, [pc, #184]	; (5304 <z_impl_k_sem_take+0xd0>)
    524c:	482e      	ldr	r0, [pc, #184]	; (5308 <z_impl_k_sem_take+0xd4>)
    524e:	2379      	movs	r3, #121	; 0x79
    5250:	f001 ff23 	bl	709a <assert_print>
    5254:	482d      	ldr	r0, [pc, #180]	; (530c <z_impl_k_sem_take+0xd8>)
    5256:	f001 ff20 	bl	709a <assert_print>
    525a:	482a      	ldr	r0, [pc, #168]	; (5304 <z_impl_k_sem_take+0xd0>)
    525c:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    525e:	f001 ff15 	bl	708c <assert_post_action>
    5262:	f04f 0320 	mov.w	r3, #32
    5266:	f3ef 8711 	mrs	r7, BASEPRI
    526a:	f383 8812 	msr	BASEPRI_MAX, r3
    526e:	f3bf 8f6f 	isb	sy
    5272:	4827      	ldr	r0, [pc, #156]	; (5310 <z_impl_k_sem_take+0xdc>)
    5274:	f7ff fdea 	bl	4e4c <z_spin_lock_valid>
    5278:	b960      	cbnz	r0, 5294 <z_impl_k_sem_take+0x60>
    527a:	4a26      	ldr	r2, [pc, #152]	; (5314 <z_impl_k_sem_take+0xe0>)
    527c:	4926      	ldr	r1, [pc, #152]	; (5318 <z_impl_k_sem_take+0xe4>)
    527e:	4822      	ldr	r0, [pc, #136]	; (5308 <z_impl_k_sem_take+0xd4>)
    5280:	2394      	movs	r3, #148	; 0x94
    5282:	f001 ff0a 	bl	709a <assert_print>
    5286:	4922      	ldr	r1, [pc, #136]	; (5310 <z_impl_k_sem_take+0xdc>)
    5288:	4824      	ldr	r0, [pc, #144]	; (531c <z_impl_k_sem_take+0xe8>)
    528a:	f001 ff06 	bl	709a <assert_print>
    528e:	2194      	movs	r1, #148	; 0x94
    5290:	4820      	ldr	r0, [pc, #128]	; (5314 <z_impl_k_sem_take+0xe0>)
    5292:	e7e4      	b.n	525e <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
    5294:	481e      	ldr	r0, [pc, #120]	; (5310 <z_impl_k_sem_take+0xdc>)
    5296:	f7ff fdf7 	bl	4e88 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    529a:	68a3      	ldr	r3, [r4, #8]
    529c:	b1c3      	cbz	r3, 52d0 <z_impl_k_sem_take+0x9c>
		sem->count--;
    529e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    52a0:	481b      	ldr	r0, [pc, #108]	; (5310 <z_impl_k_sem_take+0xdc>)
    52a2:	60a3      	str	r3, [r4, #8]
    52a4:	f7ff fde0 	bl	4e68 <z_spin_unlock_valid>
    52a8:	b958      	cbnz	r0, 52c2 <z_impl_k_sem_take+0x8e>
    52aa:	4a1a      	ldr	r2, [pc, #104]	; (5314 <z_impl_k_sem_take+0xe0>)
    52ac:	491c      	ldr	r1, [pc, #112]	; (5320 <z_impl_k_sem_take+0xec>)
    52ae:	4816      	ldr	r0, [pc, #88]	; (5308 <z_impl_k_sem_take+0xd4>)
    52b0:	23c2      	movs	r3, #194	; 0xc2
    52b2:	f001 fef2 	bl	709a <assert_print>
    52b6:	4916      	ldr	r1, [pc, #88]	; (5310 <z_impl_k_sem_take+0xdc>)
    52b8:	481a      	ldr	r0, [pc, #104]	; (5324 <z_impl_k_sem_take+0xf0>)
    52ba:	f001 feee 	bl	709a <assert_print>
    52be:	21c2      	movs	r1, #194	; 0xc2
    52c0:	e7e6      	b.n	5290 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
    52c2:	f387 8811 	msr	BASEPRI, r7
    52c6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    52ca:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    52cc:	b003      	add	sp, #12
    52ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    52d0:	ea56 0305 	orrs.w	r3, r6, r5
    52d4:	d10b      	bne.n	52ee <z_impl_k_sem_take+0xba>
    52d6:	480e      	ldr	r0, [pc, #56]	; (5310 <z_impl_k_sem_take+0xdc>)
    52d8:	f7ff fdc6 	bl	4e68 <z_spin_unlock_valid>
    52dc:	2800      	cmp	r0, #0
    52de:	d0e4      	beq.n	52aa <z_impl_k_sem_take+0x76>
    52e0:	f387 8811 	msr	BASEPRI, r7
    52e4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    52e8:	f06f 000f 	mvn.w	r0, #15
    52ec:	e7ee      	b.n	52cc <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    52ee:	e9cd 6500 	strd	r6, r5, [sp]
    52f2:	4622      	mov	r2, r4
    52f4:	4639      	mov	r1, r7
    52f6:	4806      	ldr	r0, [pc, #24]	; (5310 <z_impl_k_sem_take+0xdc>)
    52f8:	f000 fc20 	bl	5b3c <z_pend_curr>
	return ret;
    52fc:	e7e6      	b.n	52cc <z_impl_k_sem_take+0x98>
    52fe:	bf00      	nop
    5300:	00008c91 	.word	0x00008c91
    5304:	00008c71 	.word	0x00008c71
    5308:	00007ea3 	.word	0x00007ea3
    530c:	00008cdf 	.word	0x00008cdf
    5310:	20000b24 	.word	0x20000b24
    5314:	000080b8 	.word	0x000080b8
    5318:	00008111 	.word	0x00008111
    531c:	00008126 	.word	0x00008126
    5320:	000080e5 	.word	0x000080e5
    5324:	000080fc 	.word	0x000080fc

00005328 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5328:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    532a:	4d07      	ldr	r5, [pc, #28]	; (5348 <z_reset_time_slice+0x20>)
    532c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    532e:	b154      	cbz	r4, 5346 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5330:	f7fd ffac 	bl	328c <sys_clock_elapsed>
    5334:	4b05      	ldr	r3, [pc, #20]	; (534c <z_reset_time_slice+0x24>)
    5336:	4404      	add	r4, r0
    5338:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    533a:	6828      	ldr	r0, [r5, #0]
    533c:	2100      	movs	r1, #0
	}
}
    533e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5342:	f001 ba3b 	b.w	67bc <z_set_timeout_expiry>
}
    5346:	bd38      	pop	{r3, r4, r5, pc}
    5348:	20000b30 	.word	0x20000b30
    534c:	20000af8 	.word	0x20000af8

00005350 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5350:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5352:	4d14      	ldr	r5, [pc, #80]	; (53a4 <update_cache+0x54>)
    5354:	462b      	mov	r3, r5
    5356:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    535a:	429c      	cmp	r4, r3
    535c:	d000      	beq.n	5360 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    535e:	b904      	cbnz	r4, 5362 <update_cache+0x12>
    5360:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
    5362:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5364:	b9a8      	cbnz	r0, 5392 <update_cache+0x42>
	__ASSERT(_current != NULL, "");
    5366:	b963      	cbnz	r3, 5382 <update_cache+0x32>
    5368:	490f      	ldr	r1, [pc, #60]	; (53a8 <update_cache+0x58>)
    536a:	4a10      	ldr	r2, [pc, #64]	; (53ac <update_cache+0x5c>)
    536c:	4810      	ldr	r0, [pc, #64]	; (53b0 <update_cache+0x60>)
    536e:	2389      	movs	r3, #137	; 0x89
    5370:	f001 fe93 	bl	709a <assert_print>
    5374:	480f      	ldr	r0, [pc, #60]	; (53b4 <update_cache+0x64>)
    5376:	f001 fe90 	bl	709a <assert_print>
    537a:	480c      	ldr	r0, [pc, #48]	; (53ac <update_cache+0x5c>)
    537c:	2189      	movs	r1, #137	; 0x89
    537e:	f001 fe85 	bl	708c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    5382:	7b5a      	ldrb	r2, [r3, #13]
    5384:	06d2      	lsls	r2, r2, #27
    5386:	d104      	bne.n	5392 <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5388:	69a2      	ldr	r2, [r4, #24]
    538a:	b912      	cbnz	r2, 5392 <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
    538c:	89da      	ldrh	r2, [r3, #14]
    538e:	2a7f      	cmp	r2, #127	; 0x7f
    5390:	d805      	bhi.n	539e <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5392:	429c      	cmp	r4, r3
    5394:	d002      	beq.n	539c <update_cache+0x4c>
			z_reset_time_slice(thread);
    5396:	4620      	mov	r0, r4
    5398:	f7ff ffc6 	bl	5328 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    539c:	4623      	mov	r3, r4
    539e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    53a0:	bd38      	pop	{r3, r4, r5, pc}
    53a2:	bf00      	nop
    53a4:	20000af8 	.word	0x20000af8
    53a8:	00008d04 	.word	0x00008d04
    53ac:	00008ce2 	.word	0x00008ce2
    53b0:	00007ea3 	.word	0x00007ea3
    53b4:	00008cdf 	.word	0x00008cdf

000053b8 <ready_thread>:
	}
#endif
}

static void ready_thread(struct k_thread *thread)
{
    53b8:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    53ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    53be:	7b42      	ldrb	r2, [r0, #13]
    53c0:	2b00      	cmp	r3, #0
    53c2:	db38      	blt.n	5436 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    53c4:	06d3      	lsls	r3, r2, #27
    53c6:	d136      	bne.n	5436 <ready_thread+0x7e>
	return node->next != NULL;
    53c8:	6983      	ldr	r3, [r0, #24]
    53ca:	2b00      	cmp	r3, #0
    53cc:	d133      	bne.n	5436 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
    53ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
    53d2:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    53d4:	4a18      	ldr	r2, [pc, #96]	; (5438 <ready_thread+0x80>)
    53d6:	4290      	cmp	r0, r2
    53d8:	d109      	bne.n	53ee <ready_thread+0x36>
    53da:	4918      	ldr	r1, [pc, #96]	; (543c <ready_thread+0x84>)
    53dc:	4818      	ldr	r0, [pc, #96]	; (5440 <ready_thread+0x88>)
    53de:	4a19      	ldr	r2, [pc, #100]	; (5444 <ready_thread+0x8c>)
    53e0:	23ba      	movs	r3, #186	; 0xba
    53e2:	f001 fe5a 	bl	709a <assert_print>
    53e6:	4817      	ldr	r0, [pc, #92]	; (5444 <ready_thread+0x8c>)
    53e8:	21ba      	movs	r1, #186	; 0xba
    53ea:	f001 fe4f 	bl	708c <assert_post_action>
	return list->head == list;
    53ee:	4916      	ldr	r1, [pc, #88]	; (5448 <ready_thread+0x90>)
    53f0:	460a      	mov	r2, r1
    53f2:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    53f6:	4294      	cmp	r4, r2
    53f8:	bf18      	it	ne
    53fa:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    53fc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53fe:	b923      	cbnz	r3, 540a <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5400:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
    5404:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5406:	6248      	str	r0, [r1, #36]	; 0x24
}
    5408:	e00c      	b.n	5424 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
    540a:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    540e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5412:	42b5      	cmp	r5, r6
    5414:	d00b      	beq.n	542e <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5416:	42ae      	cmp	r6, r5
    5418:	dd09      	ble.n	542e <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    541a:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
    541c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5420:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5422:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
    5424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    5428:	2000      	movs	r0, #0
    542a:	f7ff bf91 	b.w	5350 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    542e:	42a3      	cmp	r3, r4
    5430:	d0e6      	beq.n	5400 <ready_thread+0x48>
    5432:	681b      	ldr	r3, [r3, #0]
    5434:	e7e3      	b.n	53fe <ready_thread+0x46>
}
    5436:	bd70      	pop	{r4, r5, r6, pc}
    5438:	20000310 	.word	0x20000310
    543c:	00008d2b 	.word	0x00008d2b
    5440:	00007ea3 	.word	0x00007ea3
    5444:	00008ce2 	.word	0x00008ce2
    5448:	20000af8 	.word	0x20000af8

0000544c <k_sched_time_slice_set>:
{
    544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    544e:	4604      	mov	r4, r0
    5450:	460d      	mov	r5, r1
	__asm__ volatile(
    5452:	f04f 0320 	mov.w	r3, #32
    5456:	f3ef 8711 	mrs	r7, BASEPRI
    545a:	f383 8812 	msr	BASEPRI_MAX, r3
    545e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5462:	4822      	ldr	r0, [pc, #136]	; (54ec <k_sched_time_slice_set+0xa0>)
    5464:	f7ff fcf2 	bl	4e4c <z_spin_lock_valid>
    5468:	b968      	cbnz	r0, 5486 <k_sched_time_slice_set+0x3a>
    546a:	4a21      	ldr	r2, [pc, #132]	; (54f0 <k_sched_time_slice_set+0xa4>)
    546c:	4921      	ldr	r1, [pc, #132]	; (54f4 <k_sched_time_slice_set+0xa8>)
    546e:	4822      	ldr	r0, [pc, #136]	; (54f8 <k_sched_time_slice_set+0xac>)
    5470:	2394      	movs	r3, #148	; 0x94
    5472:	f001 fe12 	bl	709a <assert_print>
    5476:	491d      	ldr	r1, [pc, #116]	; (54ec <k_sched_time_slice_set+0xa0>)
    5478:	4820      	ldr	r0, [pc, #128]	; (54fc <k_sched_time_slice_set+0xb0>)
    547a:	f001 fe0e 	bl	709a <assert_print>
    547e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5480:	481b      	ldr	r0, [pc, #108]	; (54f0 <k_sched_time_slice_set+0xa4>)
    5482:	f001 fe03 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    5486:	4819      	ldr	r0, [pc, #100]	; (54ec <k_sched_time_slice_set+0xa0>)
			return (uint32_t)((t * to_hz + off) / from_hz);
    5488:	2600      	movs	r6, #0
    548a:	f7ff fcfd 	bl	4e88 <z_spin_lock_set_owner>
    548e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5492:	f240 30e7 	movw	r0, #999	; 0x3e7
    5496:	4631      	mov	r1, r6
    5498:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    549c:	2300      	movs	r3, #0
    549e:	fbe4 010c 	umlal	r0, r1, r4, ip
    54a2:	f7fa fe2d 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    54a6:	42b4      	cmp	r4, r6
    54a8:	dd02      	ble.n	54b0 <k_sched_time_slice_set+0x64>
			slice_ticks = MAX(2, slice_ticks);
    54aa:	2802      	cmp	r0, #2
    54ac:	bfb8      	it	lt
    54ae:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    54b0:	4a13      	ldr	r2, [pc, #76]	; (5500 <k_sched_time_slice_set+0xb4>)
		_current_cpu->slice_ticks = 0;
    54b2:	4b14      	ldr	r3, [pc, #80]	; (5504 <k_sched_time_slice_set+0xb8>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    54b4:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    54b6:	4a14      	ldr	r2, [pc, #80]	; (5508 <k_sched_time_slice_set+0xbc>)
		z_reset_time_slice(_current);
    54b8:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    54ba:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    54bc:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    54be:	f7ff ff33 	bl	5328 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    54c2:	480a      	ldr	r0, [pc, #40]	; (54ec <k_sched_time_slice_set+0xa0>)
    54c4:	f7ff fcd0 	bl	4e68 <z_spin_unlock_valid>
    54c8:	b958      	cbnz	r0, 54e2 <k_sched_time_slice_set+0x96>
    54ca:	4a09      	ldr	r2, [pc, #36]	; (54f0 <k_sched_time_slice_set+0xa4>)
    54cc:	490f      	ldr	r1, [pc, #60]	; (550c <k_sched_time_slice_set+0xc0>)
    54ce:	480a      	ldr	r0, [pc, #40]	; (54f8 <k_sched_time_slice_set+0xac>)
    54d0:	23c2      	movs	r3, #194	; 0xc2
    54d2:	f001 fde2 	bl	709a <assert_print>
    54d6:	4905      	ldr	r1, [pc, #20]	; (54ec <k_sched_time_slice_set+0xa0>)
    54d8:	480d      	ldr	r0, [pc, #52]	; (5510 <k_sched_time_slice_set+0xc4>)
    54da:	f001 fdde 	bl	709a <assert_print>
    54de:	21c2      	movs	r1, #194	; 0xc2
    54e0:	e7ce      	b.n	5480 <k_sched_time_slice_set+0x34>
	__asm__ volatile(
    54e2:	f387 8811 	msr	BASEPRI, r7
    54e6:	f3bf 8f6f 	isb	sy
}
    54ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    54ec:	20000b34 	.word	0x20000b34
    54f0:	000080b8 	.word	0x000080b8
    54f4:	00008111 	.word	0x00008111
    54f8:	00007ea3 	.word	0x00007ea3
    54fc:	00008126 	.word	0x00008126
    5500:	20000b30 	.word	0x20000b30
    5504:	20000af8 	.word	0x20000af8
    5508:	20000b2c 	.word	0x20000b2c
    550c:	000080e5 	.word	0x000080e5
    5510:	000080fc 	.word	0x000080fc

00005514 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
    5514:	b538      	push	{r3, r4, r5, lr}
    5516:	4604      	mov	r4, r0
	__asm__ volatile(
    5518:	f04f 0320 	mov.w	r3, #32
    551c:	f3ef 8511 	mrs	r5, BASEPRI
    5520:	f383 8812 	msr	BASEPRI_MAX, r3
    5524:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5528:	4816      	ldr	r0, [pc, #88]	; (5584 <z_ready_thread+0x70>)
    552a:	f7ff fc8f 	bl	4e4c <z_spin_lock_valid>
    552e:	b968      	cbnz	r0, 554c <z_ready_thread+0x38>
    5530:	4a15      	ldr	r2, [pc, #84]	; (5588 <z_ready_thread+0x74>)
    5532:	4916      	ldr	r1, [pc, #88]	; (558c <z_ready_thread+0x78>)
    5534:	4816      	ldr	r0, [pc, #88]	; (5590 <z_ready_thread+0x7c>)
    5536:	2394      	movs	r3, #148	; 0x94
    5538:	f001 fdaf 	bl	709a <assert_print>
    553c:	4911      	ldr	r1, [pc, #68]	; (5584 <z_ready_thread+0x70>)
    553e:	4815      	ldr	r0, [pc, #84]	; (5594 <z_ready_thread+0x80>)
    5540:	f001 fdab 	bl	709a <assert_print>
    5544:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5546:	4810      	ldr	r0, [pc, #64]	; (5588 <z_ready_thread+0x74>)
    5548:	f001 fda0 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    554c:	480d      	ldr	r0, [pc, #52]	; (5584 <z_ready_thread+0x70>)
    554e:	f7ff fc9b 	bl	4e88 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
    5552:	4620      	mov	r0, r4
    5554:	f7ff ff30 	bl	53b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5558:	480a      	ldr	r0, [pc, #40]	; (5584 <z_ready_thread+0x70>)
    555a:	f7ff fc85 	bl	4e68 <z_spin_unlock_valid>
    555e:	b958      	cbnz	r0, 5578 <z_ready_thread+0x64>
    5560:	4a09      	ldr	r2, [pc, #36]	; (5588 <z_ready_thread+0x74>)
    5562:	490d      	ldr	r1, [pc, #52]	; (5598 <z_ready_thread+0x84>)
    5564:	480a      	ldr	r0, [pc, #40]	; (5590 <z_ready_thread+0x7c>)
    5566:	23c2      	movs	r3, #194	; 0xc2
    5568:	f001 fd97 	bl	709a <assert_print>
    556c:	4905      	ldr	r1, [pc, #20]	; (5584 <z_ready_thread+0x70>)
    556e:	480b      	ldr	r0, [pc, #44]	; (559c <z_ready_thread+0x88>)
    5570:	f001 fd93 	bl	709a <assert_print>
    5574:	21c2      	movs	r1, #194	; 0xc2
    5576:	e7e6      	b.n	5546 <z_ready_thread+0x32>
	__asm__ volatile(
    5578:	f385 8811 	msr	BASEPRI, r5
    557c:	f3bf 8f6f 	isb	sy
		}
	}
}
    5580:	bd38      	pop	{r3, r4, r5, pc}
    5582:	bf00      	nop
    5584:	20000b34 	.word	0x20000b34
    5588:	000080b8 	.word	0x000080b8
    558c:	00008111 	.word	0x00008111
    5590:	00007ea3 	.word	0x00007ea3
    5594:	00008126 	.word	0x00008126
    5598:	000080e5 	.word	0x000080e5
    559c:	000080fc 	.word	0x000080fc

000055a0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    55a0:	b570      	push	{r4, r5, r6, lr}
    55a2:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    55a4:	460d      	mov	r5, r1
    55a6:	b9e9      	cbnz	r1, 55e4 <z_reschedule+0x44>
    55a8:	f3ef 8605 	mrs	r6, IPSR
    55ac:	b9d6      	cbnz	r6, 55e4 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    55ae:	4b18      	ldr	r3, [pc, #96]	; (5610 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
    55b0:	69da      	ldr	r2, [r3, #28]
    55b2:	689b      	ldr	r3, [r3, #8]
    55b4:	429a      	cmp	r2, r3
    55b6:	d015      	beq.n	55e4 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55b8:	f7ff fc56 	bl	4e68 <z_spin_unlock_valid>
    55bc:	b968      	cbnz	r0, 55da <z_reschedule+0x3a>
    55be:	4a15      	ldr	r2, [pc, #84]	; (5614 <z_reschedule+0x74>)
    55c0:	4915      	ldr	r1, [pc, #84]	; (5618 <z_reschedule+0x78>)
    55c2:	4816      	ldr	r0, [pc, #88]	; (561c <z_reschedule+0x7c>)
    55c4:	23e1      	movs	r3, #225	; 0xe1
    55c6:	f001 fd68 	bl	709a <assert_print>
    55ca:	4621      	mov	r1, r4
    55cc:	4814      	ldr	r0, [pc, #80]	; (5620 <z_reschedule+0x80>)
    55ce:	f001 fd64 	bl	709a <assert_print>
    55d2:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    55d4:	480f      	ldr	r0, [pc, #60]	; (5614 <z_reschedule+0x74>)
    55d6:	f001 fd59 	bl	708c <assert_post_action>
	ret = arch_swap(key);
    55da:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    55dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    55e0:	f7fc b9f2 	b.w	19c8 <arch_swap>
    55e4:	4620      	mov	r0, r4
    55e6:	f7ff fc3f 	bl	4e68 <z_spin_unlock_valid>
    55ea:	b958      	cbnz	r0, 5604 <z_reschedule+0x64>
    55ec:	4a09      	ldr	r2, [pc, #36]	; (5614 <z_reschedule+0x74>)
    55ee:	490a      	ldr	r1, [pc, #40]	; (5618 <z_reschedule+0x78>)
    55f0:	480a      	ldr	r0, [pc, #40]	; (561c <z_reschedule+0x7c>)
    55f2:	23c2      	movs	r3, #194	; 0xc2
    55f4:	f001 fd51 	bl	709a <assert_print>
    55f8:	4621      	mov	r1, r4
    55fa:	4809      	ldr	r0, [pc, #36]	; (5620 <z_reschedule+0x80>)
    55fc:	f001 fd4d 	bl	709a <assert_print>
    5600:	21c2      	movs	r1, #194	; 0xc2
    5602:	e7e7      	b.n	55d4 <z_reschedule+0x34>
    5604:	f385 8811 	msr	BASEPRI, r5
    5608:	f3bf 8f6f 	isb	sy
    560c:	bd70      	pop	{r4, r5, r6, pc}
    560e:	bf00      	nop
    5610:	20000af8 	.word	0x20000af8
    5614:	000080b8 	.word	0x000080b8
    5618:	000080e5 	.word	0x000080e5
    561c:	00007ea3 	.word	0x00007ea3
    5620:	000080fc 	.word	0x000080fc

00005624 <z_sched_start>:
{
    5624:	b538      	push	{r3, r4, r5, lr}
    5626:	4604      	mov	r4, r0
	__asm__ volatile(
    5628:	f04f 0320 	mov.w	r3, #32
    562c:	f3ef 8511 	mrs	r5, BASEPRI
    5630:	f383 8812 	msr	BASEPRI_MAX, r3
    5634:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5638:	481c      	ldr	r0, [pc, #112]	; (56ac <z_sched_start+0x88>)
    563a:	f7ff fc07 	bl	4e4c <z_spin_lock_valid>
    563e:	b968      	cbnz	r0, 565c <z_sched_start+0x38>
    5640:	4a1b      	ldr	r2, [pc, #108]	; (56b0 <z_sched_start+0x8c>)
    5642:	491c      	ldr	r1, [pc, #112]	; (56b4 <z_sched_start+0x90>)
    5644:	481c      	ldr	r0, [pc, #112]	; (56b8 <z_sched_start+0x94>)
    5646:	2394      	movs	r3, #148	; 0x94
    5648:	f001 fd27 	bl	709a <assert_print>
    564c:	4917      	ldr	r1, [pc, #92]	; (56ac <z_sched_start+0x88>)
    564e:	481b      	ldr	r0, [pc, #108]	; (56bc <z_sched_start+0x98>)
    5650:	f001 fd23 	bl	709a <assert_print>
    5654:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5656:	4816      	ldr	r0, [pc, #88]	; (56b0 <z_sched_start+0x8c>)
    5658:	f001 fd18 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    565c:	4813      	ldr	r0, [pc, #76]	; (56ac <z_sched_start+0x88>)
    565e:	f7ff fc13 	bl	4e88 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5662:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    5664:	075a      	lsls	r2, r3, #29
    5666:	d414      	bmi.n	5692 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5668:	4810      	ldr	r0, [pc, #64]	; (56ac <z_sched_start+0x88>)
    566a:	f7ff fbfd 	bl	4e68 <z_spin_unlock_valid>
    566e:	b958      	cbnz	r0, 5688 <z_sched_start+0x64>
    5670:	4a0f      	ldr	r2, [pc, #60]	; (56b0 <z_sched_start+0x8c>)
    5672:	4913      	ldr	r1, [pc, #76]	; (56c0 <z_sched_start+0x9c>)
    5674:	4810      	ldr	r0, [pc, #64]	; (56b8 <z_sched_start+0x94>)
    5676:	23c2      	movs	r3, #194	; 0xc2
    5678:	f001 fd0f 	bl	709a <assert_print>
    567c:	490b      	ldr	r1, [pc, #44]	; (56ac <z_sched_start+0x88>)
    567e:	4811      	ldr	r0, [pc, #68]	; (56c4 <z_sched_start+0xa0>)
    5680:	f001 fd0b 	bl	709a <assert_print>
    5684:	21c2      	movs	r1, #194	; 0xc2
    5686:	e7e6      	b.n	5656 <z_sched_start+0x32>
	__asm__ volatile(
    5688:	f385 8811 	msr	BASEPRI, r5
    568c:	f3bf 8f6f 	isb	sy
}
    5690:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5692:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    5696:	4620      	mov	r0, r4
    5698:	7363      	strb	r3, [r4, #13]
    569a:	f7ff fe8d 	bl	53b8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    569e:	4629      	mov	r1, r5
    56a0:	4802      	ldr	r0, [pc, #8]	; (56ac <z_sched_start+0x88>)
}
    56a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    56a6:	f7ff bf7b 	b.w	55a0 <z_reschedule>
    56aa:	bf00      	nop
    56ac:	20000b34 	.word	0x20000b34
    56b0:	000080b8 	.word	0x000080b8
    56b4:	00008111 	.word	0x00008111
    56b8:	00007ea3 	.word	0x00007ea3
    56bc:	00008126 	.word	0x00008126
    56c0:	000080e5 	.word	0x000080e5
    56c4:	000080fc 	.word	0x000080fc

000056c8 <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
    56c8:	b510      	push	{r4, lr}
	__asm__ volatile(
    56ca:	f04f 0320 	mov.w	r3, #32
    56ce:	f3ef 8411 	mrs	r4, BASEPRI
    56d2:	f383 8812 	msr	BASEPRI_MAX, r3
    56d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    56da:	4825      	ldr	r0, [pc, #148]	; (5770 <k_sched_lock+0xa8>)
    56dc:	f7ff fbb6 	bl	4e4c <z_spin_lock_valid>
    56e0:	b960      	cbnz	r0, 56fc <k_sched_lock+0x34>
    56e2:	4a24      	ldr	r2, [pc, #144]	; (5774 <k_sched_lock+0xac>)
    56e4:	4924      	ldr	r1, [pc, #144]	; (5778 <k_sched_lock+0xb0>)
    56e6:	4825      	ldr	r0, [pc, #148]	; (577c <k_sched_lock+0xb4>)
    56e8:	2394      	movs	r3, #148	; 0x94
    56ea:	f001 fcd6 	bl	709a <assert_print>
    56ee:	4920      	ldr	r1, [pc, #128]	; (5770 <k_sched_lock+0xa8>)
    56f0:	4823      	ldr	r0, [pc, #140]	; (5780 <k_sched_lock+0xb8>)
    56f2:	f001 fcd2 	bl	709a <assert_print>
    56f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    56f8:	481e      	ldr	r0, [pc, #120]	; (5774 <k_sched_lock+0xac>)
    56fa:	e010      	b.n	571e <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
    56fc:	481c      	ldr	r0, [pc, #112]	; (5770 <k_sched_lock+0xa8>)
    56fe:	f7ff fbc3 	bl	4e88 <z_spin_lock_set_owner>
    5702:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    5706:	b163      	cbz	r3, 5722 <k_sched_lock+0x5a>
    5708:	491e      	ldr	r1, [pc, #120]	; (5784 <k_sched_lock+0xbc>)
    570a:	4a1f      	ldr	r2, [pc, #124]	; (5788 <k_sched_lock+0xc0>)
    570c:	481b      	ldr	r0, [pc, #108]	; (577c <k_sched_lock+0xb4>)
    570e:	23fd      	movs	r3, #253	; 0xfd
    5710:	f001 fcc3 	bl	709a <assert_print>
    5714:	481d      	ldr	r0, [pc, #116]	; (578c <k_sched_lock+0xc4>)
    5716:	f001 fcc0 	bl	709a <assert_print>
    571a:	21fd      	movs	r1, #253	; 0xfd
    571c:	481a      	ldr	r0, [pc, #104]	; (5788 <k_sched_lock+0xc0>)
    571e:	f001 fcb5 	bl	708c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    5722:	4b1b      	ldr	r3, [pc, #108]	; (5790 <k_sched_lock+0xc8>)
    5724:	689a      	ldr	r2, [r3, #8]
    5726:	7bd3      	ldrb	r3, [r2, #15]
    5728:	2b01      	cmp	r3, #1
    572a:	d10a      	bne.n	5742 <k_sched_lock+0x7a>
    572c:	4919      	ldr	r1, [pc, #100]	; (5794 <k_sched_lock+0xcc>)
    572e:	4a16      	ldr	r2, [pc, #88]	; (5788 <k_sched_lock+0xc0>)
    5730:	4812      	ldr	r0, [pc, #72]	; (577c <k_sched_lock+0xb4>)
    5732:	23fe      	movs	r3, #254	; 0xfe
    5734:	f001 fcb1 	bl	709a <assert_print>
    5738:	4814      	ldr	r0, [pc, #80]	; (578c <k_sched_lock+0xc4>)
    573a:	f001 fcae 	bl	709a <assert_print>
    573e:	21fe      	movs	r1, #254	; 0xfe
    5740:	e7ec      	b.n	571c <k_sched_lock+0x54>

	--_current->base.sched_locked;
    5742:	3b01      	subs	r3, #1
    5744:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5746:	480a      	ldr	r0, [pc, #40]	; (5770 <k_sched_lock+0xa8>)
    5748:	f7ff fb8e 	bl	4e68 <z_spin_unlock_valid>
    574c:	b958      	cbnz	r0, 5766 <k_sched_lock+0x9e>
    574e:	4a09      	ldr	r2, [pc, #36]	; (5774 <k_sched_lock+0xac>)
    5750:	4911      	ldr	r1, [pc, #68]	; (5798 <k_sched_lock+0xd0>)
    5752:	480a      	ldr	r0, [pc, #40]	; (577c <k_sched_lock+0xb4>)
    5754:	23c2      	movs	r3, #194	; 0xc2
    5756:	f001 fca0 	bl	709a <assert_print>
    575a:	4905      	ldr	r1, [pc, #20]	; (5770 <k_sched_lock+0xa8>)
    575c:	480f      	ldr	r0, [pc, #60]	; (579c <k_sched_lock+0xd4>)
    575e:	f001 fc9c 	bl	709a <assert_print>
    5762:	21c2      	movs	r1, #194	; 0xc2
    5764:	e7c8      	b.n	56f8 <k_sched_lock+0x30>
	__asm__ volatile(
    5766:	f384 8811 	msr	BASEPRI, r4
    576a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    576e:	bd10      	pop	{r4, pc}
    5770:	20000b34 	.word	0x20000b34
    5774:	000080b8 	.word	0x000080b8
    5778:	00008111 	.word	0x00008111
    577c:	00007ea3 	.word	0x00007ea3
    5780:	00008126 	.word	0x00008126
    5784:	00008b66 	.word	0x00008b66
    5788:	00008d4c 	.word	0x00008d4c
    578c:	00008cdf 	.word	0x00008cdf
    5790:	20000af8 	.word	0x20000af8
    5794:	00008d77 	.word	0x00008d77
    5798:	000080e5 	.word	0x000080e5
    579c:	000080fc 	.word	0x000080fc

000057a0 <k_sched_unlock>:

void k_sched_unlock(void)
{
    57a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    57a2:	f04f 0320 	mov.w	r3, #32
    57a6:	f3ef 8411 	mrs	r4, BASEPRI
    57aa:	f383 8812 	msr	BASEPRI_MAX, r3
    57ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    57b2:	4829      	ldr	r0, [pc, #164]	; (5858 <k_sched_unlock+0xb8>)
    57b4:	f7ff fb4a 	bl	4e4c <z_spin_lock_valid>
    57b8:	b960      	cbnz	r0, 57d4 <k_sched_unlock+0x34>
    57ba:	4a28      	ldr	r2, [pc, #160]	; (585c <k_sched_unlock+0xbc>)
    57bc:	4928      	ldr	r1, [pc, #160]	; (5860 <k_sched_unlock+0xc0>)
    57be:	4829      	ldr	r0, [pc, #164]	; (5864 <k_sched_unlock+0xc4>)
    57c0:	2394      	movs	r3, #148	; 0x94
    57c2:	f001 fc6a 	bl	709a <assert_print>
    57c6:	4924      	ldr	r1, [pc, #144]	; (5858 <k_sched_unlock+0xb8>)
    57c8:	4827      	ldr	r0, [pc, #156]	; (5868 <k_sched_unlock+0xc8>)
    57ca:	f001 fc66 	bl	709a <assert_print>
    57ce:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    57d0:	4822      	ldr	r0, [pc, #136]	; (585c <k_sched_unlock+0xbc>)
    57d2:	e013      	b.n	57fc <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
    57d4:	4820      	ldr	r0, [pc, #128]	; (5858 <k_sched_unlock+0xb8>)
    57d6:	f7ff fb57 	bl	4e88 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
    57da:	4b24      	ldr	r3, [pc, #144]	; (586c <k_sched_unlock+0xcc>)
    57dc:	689a      	ldr	r2, [r3, #8]
    57de:	7bd3      	ldrb	r3, [r2, #15]
    57e0:	b973      	cbnz	r3, 5800 <k_sched_unlock+0x60>
    57e2:	4923      	ldr	r1, [pc, #140]	; (5870 <k_sched_unlock+0xd0>)
    57e4:	4a23      	ldr	r2, [pc, #140]	; (5874 <k_sched_unlock+0xd4>)
    57e6:	481f      	ldr	r0, [pc, #124]	; (5864 <k_sched_unlock+0xc4>)
    57e8:	f240 33e7 	movw	r3, #999	; 0x3e7
    57ec:	f001 fc55 	bl	709a <assert_print>
    57f0:	4821      	ldr	r0, [pc, #132]	; (5878 <k_sched_unlock+0xd8>)
    57f2:	f001 fc52 	bl	709a <assert_print>
    57f6:	f240 31e7 	movw	r1, #999	; 0x3e7
    57fa:	481e      	ldr	r0, [pc, #120]	; (5874 <k_sched_unlock+0xd4>)
    57fc:	f001 fc46 	bl	708c <assert_post_action>
    5800:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    5804:	b160      	cbz	r0, 5820 <k_sched_unlock+0x80>
    5806:	491d      	ldr	r1, [pc, #116]	; (587c <k_sched_unlock+0xdc>)
    5808:	4a1a      	ldr	r2, [pc, #104]	; (5874 <k_sched_unlock+0xd4>)
    580a:	4816      	ldr	r0, [pc, #88]	; (5864 <k_sched_unlock+0xc4>)
    580c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5810:	f001 fc43 	bl	709a <assert_print>
    5814:	4818      	ldr	r0, [pc, #96]	; (5878 <k_sched_unlock+0xd8>)
    5816:	f001 fc40 	bl	709a <assert_print>
    581a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    581e:	e7ec      	b.n	57fa <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
    5820:	3301      	adds	r3, #1
    5822:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5824:	f7ff fd94 	bl	5350 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5828:	480b      	ldr	r0, [pc, #44]	; (5858 <k_sched_unlock+0xb8>)
    582a:	f7ff fb1d 	bl	4e68 <z_spin_unlock_valid>
    582e:	b958      	cbnz	r0, 5848 <k_sched_unlock+0xa8>
    5830:	4a0a      	ldr	r2, [pc, #40]	; (585c <k_sched_unlock+0xbc>)
    5832:	4913      	ldr	r1, [pc, #76]	; (5880 <k_sched_unlock+0xe0>)
    5834:	480b      	ldr	r0, [pc, #44]	; (5864 <k_sched_unlock+0xc4>)
    5836:	23c2      	movs	r3, #194	; 0xc2
    5838:	f001 fc2f 	bl	709a <assert_print>
    583c:	4906      	ldr	r1, [pc, #24]	; (5858 <k_sched_unlock+0xb8>)
    583e:	4811      	ldr	r0, [pc, #68]	; (5884 <k_sched_unlock+0xe4>)
    5840:	f001 fc2b 	bl	709a <assert_print>
    5844:	21c2      	movs	r1, #194	; 0xc2
    5846:	e7c3      	b.n	57d0 <k_sched_unlock+0x30>
	__asm__ volatile(
    5848:	f384 8811 	msr	BASEPRI, r4
    584c:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    5850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5854:	f002 b807 	b.w	7866 <z_reschedule_unlocked>
    5858:	20000b34 	.word	0x20000b34
    585c:	000080b8 	.word	0x000080b8
    5860:	00008111 	.word	0x00008111
    5864:	00007ea3 	.word	0x00007ea3
    5868:	00008126 	.word	0x00008126
    586c:	20000af8 	.word	0x20000af8
    5870:	00008da8 	.word	0x00008da8
    5874:	00008ce2 	.word	0x00008ce2
    5878:	00008cdf 	.word	0x00008cdf
    587c:	00008b66 	.word	0x00008b66
    5880:	000080e5 	.word	0x000080e5
    5884:	000080fc 	.word	0x000080fc

00005888 <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
    5888:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    588a:	4b0b      	ldr	r3, [pc, #44]	; (58b8 <z_priq_dumb_remove+0x30>)
    588c:	4299      	cmp	r1, r3
    588e:	d10b      	bne.n	58a8 <z_priq_dumb_remove+0x20>
    5890:	490a      	ldr	r1, [pc, #40]	; (58bc <z_priq_dumb_remove+0x34>)
    5892:	480b      	ldr	r0, [pc, #44]	; (58c0 <z_priq_dumb_remove+0x38>)
    5894:	4a0b      	ldr	r2, [pc, #44]	; (58c4 <z_priq_dumb_remove+0x3c>)
    5896:	f240 4373 	movw	r3, #1139	; 0x473
    589a:	f001 fbfe 	bl	709a <assert_print>
    589e:	4809      	ldr	r0, [pc, #36]	; (58c4 <z_priq_dumb_remove+0x3c>)
    58a0:	f240 4173 	movw	r1, #1139	; 0x473
    58a4:	f001 fbf2 	bl	708c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    58a8:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
    58ac:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    58ae:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    58b0:	2300      	movs	r3, #0
	node->prev = NULL;
    58b2:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    58b6:	bd08      	pop	{r3, pc}
    58b8:	20000310 	.word	0x20000310
    58bc:	00008d2b 	.word	0x00008d2b
    58c0:	00007ea3 	.word	0x00007ea3
    58c4:	00008ce2 	.word	0x00008ce2

000058c8 <move_thread_to_end_of_prio_q>:
{
    58c8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    58ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    58ce:	7b43      	ldrb	r3, [r0, #13]
    58d0:	2a00      	cmp	r2, #0
{
    58d2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    58d4:	da06      	bge.n	58e4 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    58da:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    58dc:	4601      	mov	r1, r0
    58de:	481d      	ldr	r0, [pc, #116]	; (5954 <move_thread_to_end_of_prio_q+0x8c>)
    58e0:	f7ff ffd2 	bl	5888 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    58e4:	7b63      	ldrb	r3, [r4, #13]
    58e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    58ea:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    58ec:	4b1a      	ldr	r3, [pc, #104]	; (5958 <move_thread_to_end_of_prio_q+0x90>)
    58ee:	429c      	cmp	r4, r3
    58f0:	d109      	bne.n	5906 <move_thread_to_end_of_prio_q+0x3e>
    58f2:	491a      	ldr	r1, [pc, #104]	; (595c <move_thread_to_end_of_prio_q+0x94>)
    58f4:	481a      	ldr	r0, [pc, #104]	; (5960 <move_thread_to_end_of_prio_q+0x98>)
    58f6:	4a1b      	ldr	r2, [pc, #108]	; (5964 <move_thread_to_end_of_prio_q+0x9c>)
    58f8:	23ba      	movs	r3, #186	; 0xba
    58fa:	f001 fbce 	bl	709a <assert_print>
    58fe:	4819      	ldr	r0, [pc, #100]	; (5964 <move_thread_to_end_of_prio_q+0x9c>)
    5900:	21ba      	movs	r1, #186	; 0xba
    5902:	f001 fbc3 	bl	708c <assert_post_action>
	return list->head == list;
    5906:	4a18      	ldr	r2, [pc, #96]	; (5968 <move_thread_to_end_of_prio_q+0xa0>)
    5908:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
    590a:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
    590c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5910:	428b      	cmp	r3, r1
    5912:	bf08      	it	eq
    5914:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5916:	b923      	cbnz	r3, 5922 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
    5918:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
    591c:	6004      	str	r4, [r0, #0]
	list->tail = node;
    591e:	6254      	str	r4, [r2, #36]	; 0x24
}
    5920:	e00c      	b.n	593c <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
    5922:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5926:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    592a:	42b5      	cmp	r5, r6
    592c:	d00e      	beq.n	594c <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
    592e:	42ae      	cmp	r6, r5
    5930:	dd0c      	ble.n	594c <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
    5932:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    5934:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    5938:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    593a:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    593c:	6890      	ldr	r0, [r2, #8]
    593e:	1b03      	subs	r3, r0, r4
    5940:	4258      	negs	r0, r3
}
    5942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5946:	4158      	adcs	r0, r3
    5948:	f7ff bd02 	b.w	5350 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    594c:	4298      	cmp	r0, r3
    594e:	d0e3      	beq.n	5918 <move_thread_to_end_of_prio_q+0x50>
    5950:	681b      	ldr	r3, [r3, #0]
    5952:	e7e0      	b.n	5916 <move_thread_to_end_of_prio_q+0x4e>
    5954:	20000b18 	.word	0x20000b18
    5958:	20000310 	.word	0x20000310
    595c:	00008d2b 	.word	0x00008d2b
    5960:	00007ea3 	.word	0x00007ea3
    5964:	00008ce2 	.word	0x00008ce2
    5968:	20000af8 	.word	0x20000af8

0000596c <z_time_slice>:
{
    596c:	b570      	push	{r4, r5, r6, lr}
    596e:	4605      	mov	r5, r0
	__asm__ volatile(
    5970:	f04f 0320 	mov.w	r3, #32
    5974:	f3ef 8611 	mrs	r6, BASEPRI
    5978:	f383 8812 	msr	BASEPRI_MAX, r3
    597c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5980:	4829      	ldr	r0, [pc, #164]	; (5a28 <z_time_slice+0xbc>)
    5982:	f7ff fa63 	bl	4e4c <z_spin_lock_valid>
    5986:	b968      	cbnz	r0, 59a4 <z_time_slice+0x38>
    5988:	4a28      	ldr	r2, [pc, #160]	; (5a2c <z_time_slice+0xc0>)
    598a:	4929      	ldr	r1, [pc, #164]	; (5a30 <z_time_slice+0xc4>)
    598c:	4829      	ldr	r0, [pc, #164]	; (5a34 <z_time_slice+0xc8>)
    598e:	2394      	movs	r3, #148	; 0x94
    5990:	f001 fb83 	bl	709a <assert_print>
    5994:	4924      	ldr	r1, [pc, #144]	; (5a28 <z_time_slice+0xbc>)
    5996:	4828      	ldr	r0, [pc, #160]	; (5a38 <z_time_slice+0xcc>)
    5998:	f001 fb7f 	bl	709a <assert_print>
    599c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    599e:	4823      	ldr	r0, [pc, #140]	; (5a2c <z_time_slice+0xc0>)
    59a0:	f001 fb74 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    59a4:	4820      	ldr	r0, [pc, #128]	; (5a28 <z_time_slice+0xbc>)
    59a6:	f7ff fa6f 	bl	4e88 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    59aa:	4b24      	ldr	r3, [pc, #144]	; (5a3c <z_time_slice+0xd0>)
    59ac:	4a24      	ldr	r2, [pc, #144]	; (5a40 <z_time_slice+0xd4>)
    59ae:	689c      	ldr	r4, [r3, #8]
    59b0:	6811      	ldr	r1, [r2, #0]
    59b2:	428c      	cmp	r4, r1
    59b4:	d112      	bne.n	59dc <z_time_slice+0x70>
		z_reset_time_slice(_current);
    59b6:	4620      	mov	r0, r4
    59b8:	f7ff fcb6 	bl	5328 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59bc:	481a      	ldr	r0, [pc, #104]	; (5a28 <z_time_slice+0xbc>)
    59be:	f7ff fa53 	bl	4e68 <z_spin_unlock_valid>
    59c2:	bb58      	cbnz	r0, 5a1c <z_time_slice+0xb0>
    59c4:	4a19      	ldr	r2, [pc, #100]	; (5a2c <z_time_slice+0xc0>)
    59c6:	491f      	ldr	r1, [pc, #124]	; (5a44 <z_time_slice+0xd8>)
    59c8:	481a      	ldr	r0, [pc, #104]	; (5a34 <z_time_slice+0xc8>)
    59ca:	23c2      	movs	r3, #194	; 0xc2
    59cc:	f001 fb65 	bl	709a <assert_print>
    59d0:	4915      	ldr	r1, [pc, #84]	; (5a28 <z_time_slice+0xbc>)
    59d2:	481d      	ldr	r0, [pc, #116]	; (5a48 <z_time_slice+0xdc>)
    59d4:	f001 fb61 	bl	709a <assert_print>
    59d8:	21c2      	movs	r1, #194	; 0xc2
    59da:	e7e0      	b.n	599e <z_time_slice+0x32>
	pending_current = NULL;
    59dc:	2100      	movs	r1, #0
    59de:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    59e0:	4a1a      	ldr	r2, [pc, #104]	; (5a4c <z_time_slice+0xe0>)
	if (slice_time(_current) && sliceable(_current)) {
    59e2:	6812      	ldr	r2, [r2, #0]
    59e4:	b1c2      	cbz	r2, 5a18 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
    59e6:	89e2      	ldrh	r2, [r4, #14]
    59e8:	2a7f      	cmp	r2, #127	; 0x7f
    59ea:	d815      	bhi.n	5a18 <z_time_slice+0xac>
		&& !z_is_thread_prevented_from_running(thread)
    59ec:	7b62      	ldrb	r2, [r4, #13]
    59ee:	06d2      	lsls	r2, r2, #27
    59f0:	d112      	bne.n	5a18 <z_time_slice+0xac>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    59f2:	4a17      	ldr	r2, [pc, #92]	; (5a50 <z_time_slice+0xe4>)
    59f4:	f994 100e 	ldrsb.w	r1, [r4, #14]
    59f8:	6812      	ldr	r2, [r2, #0]
    59fa:	4291      	cmp	r1, r2
    59fc:	db0c      	blt.n	5a18 <z_time_slice+0xac>
		&& !z_is_idle_thread_object(thread);
    59fe:	4a15      	ldr	r2, [pc, #84]	; (5a54 <z_time_slice+0xe8>)
    5a00:	4294      	cmp	r4, r2
    5a02:	d009      	beq.n	5a18 <z_time_slice+0xac>
		if (ticks >= _current_cpu->slice_ticks) {
    5a04:	691a      	ldr	r2, [r3, #16]
    5a06:	42aa      	cmp	r2, r5
    5a08:	dc03      	bgt.n	5a12 <z_time_slice+0xa6>
		move_thread_to_end_of_prio_q(curr);
    5a0a:	4620      	mov	r0, r4
    5a0c:	f7ff ff5c 	bl	58c8 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
    5a10:	e7d1      	b.n	59b6 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    5a12:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    5a14:	611a      	str	r2, [r3, #16]
    5a16:	e7d1      	b.n	59bc <z_time_slice+0x50>
    5a18:	2200      	movs	r2, #0
    5a1a:	e7fb      	b.n	5a14 <z_time_slice+0xa8>
	__asm__ volatile(
    5a1c:	f386 8811 	msr	BASEPRI, r6
    5a20:	f3bf 8f6f 	isb	sy
}
    5a24:	bd70      	pop	{r4, r5, r6, pc}
    5a26:	bf00      	nop
    5a28:	20000b34 	.word	0x20000b34
    5a2c:	000080b8 	.word	0x000080b8
    5a30:	00008111 	.word	0x00008111
    5a34:	00007ea3 	.word	0x00007ea3
    5a38:	00008126 	.word	0x00008126
    5a3c:	20000af8 	.word	0x20000af8
    5a40:	20000b28 	.word	0x20000b28
    5a44:	000080e5 	.word	0x000080e5
    5a48:	000080fc 	.word	0x000080fc
    5a4c:	20000b30 	.word	0x20000b30
    5a50:	20000b2c 	.word	0x20000b2c
    5a54:	20000310 	.word	0x20000310

00005a58 <unready_thread>:
{
    5a58:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    5a5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5a5e:	7b43      	ldrb	r3, [r0, #13]
    5a60:	2a00      	cmp	r2, #0
{
    5a62:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    5a64:	da06      	bge.n	5a74 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a6a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5a6c:	4601      	mov	r1, r0
    5a6e:	4806      	ldr	r0, [pc, #24]	; (5a88 <unready_thread+0x30>)
    5a70:	f7ff ff0a 	bl	5888 <z_priq_dumb_remove>
	update_cache(thread == _current);
    5a74:	4b05      	ldr	r3, [pc, #20]	; (5a8c <unready_thread+0x34>)
    5a76:	6898      	ldr	r0, [r3, #8]
    5a78:	1b03      	subs	r3, r0, r4
    5a7a:	4258      	negs	r0, r3
}
    5a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    5a80:	4158      	adcs	r0, r3
    5a82:	f7ff bc65 	b.w	5350 <update_cache>
    5a86:	bf00      	nop
    5a88:	20000b18 	.word	0x20000b18
    5a8c:	20000af8 	.word	0x20000af8

00005a90 <add_to_waitq_locked>:
{
    5a90:	b538      	push	{r3, r4, r5, lr}
    5a92:	4604      	mov	r4, r0
    5a94:	460d      	mov	r5, r1
	unready_thread(thread);
    5a96:	f7ff ffdf 	bl	5a58 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5a9a:	7b63      	ldrb	r3, [r4, #13]
    5a9c:	f043 0302 	orr.w	r3, r3, #2
    5aa0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5aa2:	b34d      	cbz	r5, 5af8 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5aa4:	4b15      	ldr	r3, [pc, #84]	; (5afc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
    5aa6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5aa8:	429c      	cmp	r4, r3
    5aaa:	d109      	bne.n	5ac0 <add_to_waitq_locked+0x30>
    5aac:	4914      	ldr	r1, [pc, #80]	; (5b00 <add_to_waitq_locked+0x70>)
    5aae:	4815      	ldr	r0, [pc, #84]	; (5b04 <add_to_waitq_locked+0x74>)
    5ab0:	4a15      	ldr	r2, [pc, #84]	; (5b08 <add_to_waitq_locked+0x78>)
    5ab2:	23ba      	movs	r3, #186	; 0xba
    5ab4:	f001 faf1 	bl	709a <assert_print>
    5ab8:	4813      	ldr	r0, [pc, #76]	; (5b08 <add_to_waitq_locked+0x78>)
    5aba:	21ba      	movs	r1, #186	; 0xba
    5abc:	f001 fae6 	bl	708c <assert_post_action>
	return list->head == list;
    5ac0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ac2:	429d      	cmp	r5, r3
    5ac4:	d109      	bne.n	5ada <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
    5ac6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    5ac8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    5acc:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5ace:	606c      	str	r4, [r5, #4]
}
    5ad0:	e012      	b.n	5af8 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
    5ad2:	686a      	ldr	r2, [r5, #4]
    5ad4:	4293      	cmp	r3, r2
    5ad6:	d0f6      	beq.n	5ac6 <add_to_waitq_locked+0x36>
    5ad8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5ada:	2b00      	cmp	r3, #0
    5adc:	d0f3      	beq.n	5ac6 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
    5ade:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    5ae2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5ae6:	428a      	cmp	r2, r1
    5ae8:	d0f3      	beq.n	5ad2 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5aea:	4291      	cmp	r1, r2
    5aec:	ddf1      	ble.n	5ad2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
    5aee:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5af0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5af4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5af6:	605c      	str	r4, [r3, #4]
}
    5af8:	bd38      	pop	{r3, r4, r5, pc}
    5afa:	bf00      	nop
    5afc:	20000310 	.word	0x20000310
    5b00:	00008d2b 	.word	0x00008d2b
    5b04:	00007ea3 	.word	0x00007ea3
    5b08:	00008ce2 	.word	0x00008ce2

00005b0c <pend_locked>:
{
    5b0c:	b570      	push	{r4, r5, r6, lr}
    5b0e:	4615      	mov	r5, r2
    5b10:	461c      	mov	r4, r3
    5b12:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5b14:	f7ff ffbc 	bl	5a90 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b18:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    5b1c:	bf08      	it	eq
    5b1e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    5b22:	d008      	beq.n	5b36 <pend_locked+0x2a>
    5b24:	462a      	mov	r2, r5
    5b26:	4623      	mov	r3, r4
    5b28:	f106 0018 	add.w	r0, r6, #24
    5b2c:	4902      	ldr	r1, [pc, #8]	; (5b38 <pend_locked+0x2c>)
}
    5b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5b32:	f000 bceb 	b.w	650c <z_add_timeout>
    5b36:	bd70      	pop	{r4, r5, r6, pc}
    5b38:	00005e5d 	.word	0x00005e5d

00005b3c <z_pend_curr>:
{
    5b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
    5b40:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5bfc <z_pend_curr+0xc0>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    5b44:	4c2e      	ldr	r4, [pc, #184]	; (5c00 <z_pend_curr+0xc4>)
	pending_current = _current;
    5b46:	4b2f      	ldr	r3, [pc, #188]	; (5c04 <z_pend_curr+0xc8>)
{
    5b48:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    5b4a:	42a0      	cmp	r0, r4
	pending_current = _current;
    5b4c:	f8da 2008 	ldr.w	r2, [sl, #8]
    5b50:	601a      	str	r2, [r3, #0]
{
    5b52:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
    5b56:	4605      	mov	r5, r0
    5b58:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
    5b5a:	d10b      	bne.n	5b74 <z_pend_curr+0x38>
    5b5c:	492a      	ldr	r1, [pc, #168]	; (5c08 <z_pend_curr+0xcc>)
    5b5e:	482b      	ldr	r0, [pc, #172]	; (5c0c <z_pend_curr+0xd0>)
    5b60:	4a2b      	ldr	r2, [pc, #172]	; (5c10 <z_pend_curr+0xd4>)
    5b62:	f240 334e 	movw	r3, #846	; 0x34e
    5b66:	f001 fa98 	bl	709a <assert_print>
    5b6a:	4829      	ldr	r0, [pc, #164]	; (5c10 <z_pend_curr+0xd4>)
    5b6c:	f240 314e 	movw	r1, #846	; 0x34e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5b70:	f001 fa8c 	bl	708c <assert_post_action>
	__asm__ volatile(
    5b74:	f04f 0220 	mov.w	r2, #32
    5b78:	f3ef 8311 	mrs	r3, BASEPRI
    5b7c:	f382 8812 	msr	BASEPRI_MAX, r2
    5b80:	f3bf 8f6f 	isb	sy
    5b84:	4620      	mov	r0, r4
    5b86:	f7ff f961 	bl	4e4c <z_spin_lock_valid>
    5b8a:	b960      	cbnz	r0, 5ba6 <z_pend_curr+0x6a>
    5b8c:	4a21      	ldr	r2, [pc, #132]	; (5c14 <z_pend_curr+0xd8>)
    5b8e:	4922      	ldr	r1, [pc, #136]	; (5c18 <z_pend_curr+0xdc>)
    5b90:	481e      	ldr	r0, [pc, #120]	; (5c0c <z_pend_curr+0xd0>)
    5b92:	2394      	movs	r3, #148	; 0x94
    5b94:	f001 fa81 	bl	709a <assert_print>
    5b98:	4621      	mov	r1, r4
    5b9a:	4820      	ldr	r0, [pc, #128]	; (5c1c <z_pend_curr+0xe0>)
    5b9c:	f001 fa7d 	bl	709a <assert_print>
    5ba0:	2194      	movs	r1, #148	; 0x94
    5ba2:	481c      	ldr	r0, [pc, #112]	; (5c14 <z_pend_curr+0xd8>)
    5ba4:	e7e4      	b.n	5b70 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
    5ba6:	4620      	mov	r0, r4
    5ba8:	f7ff f96e 	bl	4e88 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
    5bac:	f8da 0008 	ldr.w	r0, [sl, #8]
    5bb0:	4642      	mov	r2, r8
    5bb2:	464b      	mov	r3, r9
    5bb4:	4639      	mov	r1, r7
    5bb6:	f7ff ffa9 	bl	5b0c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5bba:	4628      	mov	r0, r5
    5bbc:	f7ff f954 	bl	4e68 <z_spin_unlock_valid>
    5bc0:	b958      	cbnz	r0, 5bda <z_pend_curr+0x9e>
    5bc2:	4917      	ldr	r1, [pc, #92]	; (5c20 <z_pend_curr+0xe4>)
    5bc4:	4a13      	ldr	r2, [pc, #76]	; (5c14 <z_pend_curr+0xd8>)
    5bc6:	4811      	ldr	r0, [pc, #68]	; (5c0c <z_pend_curr+0xd0>)
    5bc8:	23e1      	movs	r3, #225	; 0xe1
    5bca:	f001 fa66 	bl	709a <assert_print>
    5bce:	4629      	mov	r1, r5
    5bd0:	4814      	ldr	r0, [pc, #80]	; (5c24 <z_pend_curr+0xe8>)
    5bd2:	f001 fa62 	bl	709a <assert_print>
    5bd6:	21e1      	movs	r1, #225	; 0xe1
    5bd8:	e7e3      	b.n	5ba2 <z_pend_curr+0x66>
    5bda:	4620      	mov	r0, r4
    5bdc:	f7ff f944 	bl	4e68 <z_spin_unlock_valid>
    5be0:	b938      	cbnz	r0, 5bf2 <z_pend_curr+0xb6>
    5be2:	490f      	ldr	r1, [pc, #60]	; (5c20 <z_pend_curr+0xe4>)
    5be4:	4a0b      	ldr	r2, [pc, #44]	; (5c14 <z_pend_curr+0xd8>)
    5be6:	4809      	ldr	r0, [pc, #36]	; (5c0c <z_pend_curr+0xd0>)
    5be8:	23e1      	movs	r3, #225	; 0xe1
    5bea:	f001 fa56 	bl	709a <assert_print>
    5bee:	4621      	mov	r1, r4
    5bf0:	e7ee      	b.n	5bd0 <z_pend_curr+0x94>
    5bf2:	4630      	mov	r0, r6
}
    5bf4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bf8:	f7fb bee6 	b.w	19c8 <arch_swap>
    5bfc:	20000af8 	.word	0x20000af8
    5c00:	20000b34 	.word	0x20000b34
    5c04:	20000b28 	.word	0x20000b28
    5c08:	00008dd9 	.word	0x00008dd9
    5c0c:	00007ea3 	.word	0x00007ea3
    5c10:	00008ce2 	.word	0x00008ce2
    5c14:	000080b8 	.word	0x000080b8
    5c18:	00008111 	.word	0x00008111
    5c1c:	00008126 	.word	0x00008126
    5c20:	000080e5 	.word	0x000080e5
    5c24:	000080fc 	.word	0x000080fc

00005c28 <z_set_prio>:
{
    5c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c2c:	4604      	mov	r4, r0
    5c2e:	460e      	mov	r6, r1
    5c30:	f04f 0320 	mov.w	r3, #32
    5c34:	f3ef 8911 	mrs	r9, BASEPRI
    5c38:	f383 8812 	msr	BASEPRI_MAX, r3
    5c3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5c40:	4837      	ldr	r0, [pc, #220]	; (5d20 <z_set_prio+0xf8>)
    5c42:	f7ff f903 	bl	4e4c <z_spin_lock_valid>
    5c46:	4607      	mov	r7, r0
    5c48:	b960      	cbnz	r0, 5c64 <z_set_prio+0x3c>
    5c4a:	4a36      	ldr	r2, [pc, #216]	; (5d24 <z_set_prio+0xfc>)
    5c4c:	4936      	ldr	r1, [pc, #216]	; (5d28 <z_set_prio+0x100>)
    5c4e:	4837      	ldr	r0, [pc, #220]	; (5d2c <z_set_prio+0x104>)
    5c50:	2394      	movs	r3, #148	; 0x94
    5c52:	f001 fa22 	bl	709a <assert_print>
    5c56:	4932      	ldr	r1, [pc, #200]	; (5d20 <z_set_prio+0xf8>)
    5c58:	4835      	ldr	r0, [pc, #212]	; (5d30 <z_set_prio+0x108>)
    5c5a:	f001 fa1e 	bl	709a <assert_print>
    5c5e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5c60:	4830      	ldr	r0, [pc, #192]	; (5d24 <z_set_prio+0xfc>)
    5c62:	e021      	b.n	5ca8 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
    5c64:	482e      	ldr	r0, [pc, #184]	; (5d20 <z_set_prio+0xf8>)
    5c66:	f7ff f90f 	bl	4e88 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    5c6a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5c6c:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5c6e:	b276      	sxtb	r6, r6
    5c70:	d11c      	bne.n	5cac <z_set_prio+0x84>
	return node->next != NULL;
    5c72:	69a5      	ldr	r5, [r4, #24]
    5c74:	b9d5      	cbnz	r5, 5cac <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
    5c76:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5d34 <z_set_prio+0x10c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5c7e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5c80:	4621      	mov	r1, r4
    5c82:	4640      	mov	r0, r8
    5c84:	f7ff fe00 	bl	5888 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5c88:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    5c8a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5c8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c90:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5c92:	4b29      	ldr	r3, [pc, #164]	; (5d38 <z_set_prio+0x110>)
    5c94:	429c      	cmp	r4, r3
    5c96:	d11b      	bne.n	5cd0 <z_set_prio+0xa8>
    5c98:	4928      	ldr	r1, [pc, #160]	; (5d3c <z_set_prio+0x114>)
    5c9a:	4824      	ldr	r0, [pc, #144]	; (5d2c <z_set_prio+0x104>)
    5c9c:	4a28      	ldr	r2, [pc, #160]	; (5d40 <z_set_prio+0x118>)
    5c9e:	23ba      	movs	r3, #186	; 0xba
    5ca0:	f001 f9fb 	bl	709a <assert_print>
    5ca4:	4826      	ldr	r0, [pc, #152]	; (5d40 <z_set_prio+0x118>)
    5ca6:	21ba      	movs	r1, #186	; 0xba
    5ca8:	f001 f9f0 	bl	708c <assert_post_action>
			thread->base.prio = prio;
    5cac:	73a6      	strb	r6, [r4, #14]
    5cae:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5cb0:	481b      	ldr	r0, [pc, #108]	; (5d20 <z_set_prio+0xf8>)
    5cb2:	f7ff f8d9 	bl	4e68 <z_spin_unlock_valid>
    5cb6:	bb58      	cbnz	r0, 5d10 <z_set_prio+0xe8>
    5cb8:	4a1a      	ldr	r2, [pc, #104]	; (5d24 <z_set_prio+0xfc>)
    5cba:	4922      	ldr	r1, [pc, #136]	; (5d44 <z_set_prio+0x11c>)
    5cbc:	481b      	ldr	r0, [pc, #108]	; (5d2c <z_set_prio+0x104>)
    5cbe:	23c2      	movs	r3, #194	; 0xc2
    5cc0:	f001 f9eb 	bl	709a <assert_print>
    5cc4:	4916      	ldr	r1, [pc, #88]	; (5d20 <z_set_prio+0xf8>)
    5cc6:	4820      	ldr	r0, [pc, #128]	; (5d48 <z_set_prio+0x120>)
    5cc8:	f001 f9e7 	bl	709a <assert_print>
    5ccc:	21c2      	movs	r1, #194	; 0xc2
    5cce:	e7c7      	b.n	5c60 <z_set_prio+0x38>
	return list->head == list;
    5cd0:	4643      	mov	r3, r8
    5cd2:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cd6:	4542      	cmp	r2, r8
    5cd8:	bf18      	it	ne
    5cda:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
    5cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cde:	b925      	cbnz	r5, 5cea <z_set_prio+0xc2>
	node->prev = tail;
    5ce0:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
    5ce4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    5ce6:	625c      	str	r4, [r3, #36]	; 0x24
}
    5ce8:	e00a      	b.n	5d00 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
    5cea:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
    5cee:	428e      	cmp	r6, r1
    5cf0:	d00a      	beq.n	5d08 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5cf2:	42b1      	cmp	r1, r6
    5cf4:	dd08      	ble.n	5d08 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
    5cf6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    5cf8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    5cfc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    5cfe:	606c      	str	r4, [r5, #4]
			update_cache(1);
    5d00:	2001      	movs	r0, #1
    5d02:	f7ff fb25 	bl	5350 <update_cache>
    5d06:	e7d3      	b.n	5cb0 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
    5d08:	42aa      	cmp	r2, r5
    5d0a:	d0e9      	beq.n	5ce0 <z_set_prio+0xb8>
    5d0c:	682d      	ldr	r5, [r5, #0]
    5d0e:	e7e6      	b.n	5cde <z_set_prio+0xb6>
	__asm__ volatile(
    5d10:	f389 8811 	msr	BASEPRI, r9
    5d14:	f3bf 8f6f 	isb	sy
}
    5d18:	4638      	mov	r0, r7
    5d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d1e:	bf00      	nop
    5d20:	20000b34 	.word	0x20000b34
    5d24:	000080b8 	.word	0x000080b8
    5d28:	00008111 	.word	0x00008111
    5d2c:	00007ea3 	.word	0x00007ea3
    5d30:	00008126 	.word	0x00008126
    5d34:	20000b18 	.word	0x20000b18
    5d38:	20000310 	.word	0x20000310
    5d3c:	00008d2b 	.word	0x00008d2b
    5d40:	00008ce2 	.word	0x00008ce2
    5d44:	000080e5 	.word	0x000080e5
    5d48:	000080fc 	.word	0x000080fc

00005d4c <z_impl_k_thread_suspend>:
{
    5d4c:	b570      	push	{r4, r5, r6, lr}
    5d4e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5d50:	3018      	adds	r0, #24
    5d52:	f000 fca1 	bl	6698 <z_abort_timeout>
	__asm__ volatile(
    5d56:	f04f 0320 	mov.w	r3, #32
    5d5a:	f3ef 8611 	mrs	r6, BASEPRI
    5d5e:	f383 8812 	msr	BASEPRI_MAX, r3
    5d62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d66:	4824      	ldr	r0, [pc, #144]	; (5df8 <z_impl_k_thread_suspend+0xac>)
    5d68:	f7ff f870 	bl	4e4c <z_spin_lock_valid>
    5d6c:	b968      	cbnz	r0, 5d8a <z_impl_k_thread_suspend+0x3e>
    5d6e:	4a23      	ldr	r2, [pc, #140]	; (5dfc <z_impl_k_thread_suspend+0xb0>)
    5d70:	4923      	ldr	r1, [pc, #140]	; (5e00 <z_impl_k_thread_suspend+0xb4>)
    5d72:	4824      	ldr	r0, [pc, #144]	; (5e04 <z_impl_k_thread_suspend+0xb8>)
    5d74:	2394      	movs	r3, #148	; 0x94
    5d76:	f001 f990 	bl	709a <assert_print>
    5d7a:	491f      	ldr	r1, [pc, #124]	; (5df8 <z_impl_k_thread_suspend+0xac>)
    5d7c:	4822      	ldr	r0, [pc, #136]	; (5e08 <z_impl_k_thread_suspend+0xbc>)
    5d7e:	f001 f98c 	bl	709a <assert_print>
    5d82:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d84:	481d      	ldr	r0, [pc, #116]	; (5dfc <z_impl_k_thread_suspend+0xb0>)
    5d86:	f001 f981 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    5d8a:	481b      	ldr	r0, [pc, #108]	; (5df8 <z_impl_k_thread_suspend+0xac>)
    5d8c:	f7ff f87c 	bl	4e88 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    5d90:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5d94:	7b63      	ldrb	r3, [r4, #13]
    5d96:	2a00      	cmp	r2, #0
    5d98:	da06      	bge.n	5da8 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    5d9e:	481b      	ldr	r0, [pc, #108]	; (5e0c <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5da0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    5da2:	4621      	mov	r1, r4
    5da4:	f7ff fd70 	bl	5888 <z_priq_dumb_remove>
		update_cache(thread == _current);
    5da8:	4d19      	ldr	r5, [pc, #100]	; (5e10 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5daa:	7b63      	ldrb	r3, [r4, #13]
    5dac:	68a8      	ldr	r0, [r5, #8]
    5dae:	f043 0310 	orr.w	r3, r3, #16
    5db2:	7363      	strb	r3, [r4, #13]
    5db4:	1b03      	subs	r3, r0, r4
    5db6:	4258      	negs	r0, r3
    5db8:	4158      	adcs	r0, r3
    5dba:	f7ff fac9 	bl	5350 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5dbe:	480e      	ldr	r0, [pc, #56]	; (5df8 <z_impl_k_thread_suspend+0xac>)
    5dc0:	f7ff f852 	bl	4e68 <z_spin_unlock_valid>
    5dc4:	b958      	cbnz	r0, 5dde <z_impl_k_thread_suspend+0x92>
    5dc6:	4a0d      	ldr	r2, [pc, #52]	; (5dfc <z_impl_k_thread_suspend+0xb0>)
    5dc8:	4912      	ldr	r1, [pc, #72]	; (5e14 <z_impl_k_thread_suspend+0xc8>)
    5dca:	480e      	ldr	r0, [pc, #56]	; (5e04 <z_impl_k_thread_suspend+0xb8>)
    5dcc:	23c2      	movs	r3, #194	; 0xc2
    5dce:	f001 f964 	bl	709a <assert_print>
    5dd2:	4909      	ldr	r1, [pc, #36]	; (5df8 <z_impl_k_thread_suspend+0xac>)
    5dd4:	4810      	ldr	r0, [pc, #64]	; (5e18 <z_impl_k_thread_suspend+0xcc>)
    5dd6:	f001 f960 	bl	709a <assert_print>
    5dda:	21c2      	movs	r1, #194	; 0xc2
    5ddc:	e7d2      	b.n	5d84 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
    5dde:	f386 8811 	msr	BASEPRI, r6
    5de2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5de6:	68ab      	ldr	r3, [r5, #8]
    5de8:	42a3      	cmp	r3, r4
    5dea:	d103      	bne.n	5df4 <z_impl_k_thread_suspend+0xa8>
}
    5dec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5df0:	f001 bd39 	b.w	7866 <z_reschedule_unlocked>
}
    5df4:	bd70      	pop	{r4, r5, r6, pc}
    5df6:	bf00      	nop
    5df8:	20000b34 	.word	0x20000b34
    5dfc:	000080b8 	.word	0x000080b8
    5e00:	00008111 	.word	0x00008111
    5e04:	00007ea3 	.word	0x00007ea3
    5e08:	00008126 	.word	0x00008126
    5e0c:	20000b18 	.word	0x20000b18
    5e10:	20000af8 	.word	0x20000af8
    5e14:	000080e5 	.word	0x000080e5
    5e18:	000080fc 	.word	0x000080fc

00005e1c <unpend_thread_no_timeout>:
{
    5e1c:	b510      	push	{r4, lr}
    5e1e:	4604      	mov	r4, r0
    5e20:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
    5e22:	b958      	cbnz	r0, 5e3c <unpend_thread_no_timeout+0x20>
    5e24:	490a      	ldr	r1, [pc, #40]	; (5e50 <unpend_thread_no_timeout+0x34>)
    5e26:	480b      	ldr	r0, [pc, #44]	; (5e54 <unpend_thread_no_timeout+0x38>)
    5e28:	4a0b      	ldr	r2, [pc, #44]	; (5e58 <unpend_thread_no_timeout+0x3c>)
    5e2a:	f240 23d6 	movw	r3, #726	; 0x2d6
    5e2e:	f001 f934 	bl	709a <assert_print>
    5e32:	4809      	ldr	r0, [pc, #36]	; (5e58 <unpend_thread_no_timeout+0x3c>)
    5e34:	f240 21d6 	movw	r1, #726	; 0x2d6
    5e38:	f001 f928 	bl	708c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    5e3c:	4621      	mov	r1, r4
    5e3e:	f7ff fd23 	bl	5888 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5e42:	7b63      	ldrb	r3, [r4, #13]
    5e44:	f023 0302 	bic.w	r3, r3, #2
    5e48:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    5e4a:	2300      	movs	r3, #0
    5e4c:	60a3      	str	r3, [r4, #8]
}
    5e4e:	bd10      	pop	{r4, pc}
    5e50:	00008e10 	.word	0x00008e10
    5e54:	00007ea3 	.word	0x00007ea3
    5e58:	00008ce2 	.word	0x00008ce2

00005e5c <z_thread_timeout>:
{
    5e5c:	b570      	push	{r4, r5, r6, lr}
    5e5e:	4604      	mov	r4, r0
	__asm__ volatile(
    5e60:	f04f 0320 	mov.w	r3, #32
    5e64:	f3ef 8611 	mrs	r6, BASEPRI
    5e68:	f383 8812 	msr	BASEPRI_MAX, r3
    5e6c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e70:	481f      	ldr	r0, [pc, #124]	; (5ef0 <z_thread_timeout+0x94>)
    5e72:	f7fe ffeb 	bl	4e4c <z_spin_lock_valid>
    5e76:	b968      	cbnz	r0, 5e94 <z_thread_timeout+0x38>
    5e78:	4a1e      	ldr	r2, [pc, #120]	; (5ef4 <z_thread_timeout+0x98>)
    5e7a:	491f      	ldr	r1, [pc, #124]	; (5ef8 <z_thread_timeout+0x9c>)
    5e7c:	481f      	ldr	r0, [pc, #124]	; (5efc <z_thread_timeout+0xa0>)
    5e7e:	2394      	movs	r3, #148	; 0x94
    5e80:	f001 f90b 	bl	709a <assert_print>
    5e84:	491a      	ldr	r1, [pc, #104]	; (5ef0 <z_thread_timeout+0x94>)
    5e86:	481e      	ldr	r0, [pc, #120]	; (5f00 <z_thread_timeout+0xa4>)
    5e88:	f001 f907 	bl	709a <assert_print>
    5e8c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e8e:	4819      	ldr	r0, [pc, #100]	; (5ef4 <z_thread_timeout+0x98>)
    5e90:	f001 f8fc 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    5e94:	4816      	ldr	r0, [pc, #88]	; (5ef0 <z_thread_timeout+0x94>)
    5e96:	f7fe fff7 	bl	4e88 <z_spin_lock_set_owner>
		if (!killed) {
    5e9a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5e9e:	f013 0f28 	tst.w	r3, #40	; 0x28
    5ea2:	d110      	bne.n	5ec6 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    5ea4:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5ea8:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    5eac:	b113      	cbz	r3, 5eb4 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    5eae:	4628      	mov	r0, r5
    5eb0:	f7ff ffb4 	bl	5e1c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5eb4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5eb8:	f023 0314 	bic.w	r3, r3, #20
    5ebc:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    5ec0:	4628      	mov	r0, r5
    5ec2:	f7ff fa79 	bl	53b8 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ec6:	480a      	ldr	r0, [pc, #40]	; (5ef0 <z_thread_timeout+0x94>)
    5ec8:	f7fe ffce 	bl	4e68 <z_spin_unlock_valid>
    5ecc:	b958      	cbnz	r0, 5ee6 <z_thread_timeout+0x8a>
    5ece:	4a09      	ldr	r2, [pc, #36]	; (5ef4 <z_thread_timeout+0x98>)
    5ed0:	490c      	ldr	r1, [pc, #48]	; (5f04 <z_thread_timeout+0xa8>)
    5ed2:	480a      	ldr	r0, [pc, #40]	; (5efc <z_thread_timeout+0xa0>)
    5ed4:	23c2      	movs	r3, #194	; 0xc2
    5ed6:	f001 f8e0 	bl	709a <assert_print>
    5eda:	4905      	ldr	r1, [pc, #20]	; (5ef0 <z_thread_timeout+0x94>)
    5edc:	480a      	ldr	r0, [pc, #40]	; (5f08 <z_thread_timeout+0xac>)
    5ede:	f001 f8dc 	bl	709a <assert_print>
    5ee2:	21c2      	movs	r1, #194	; 0xc2
    5ee4:	e7d3      	b.n	5e8e <z_thread_timeout+0x32>
	__asm__ volatile(
    5ee6:	f386 8811 	msr	BASEPRI, r6
    5eea:	f3bf 8f6f 	isb	sy
}
    5eee:	bd70      	pop	{r4, r5, r6, pc}
    5ef0:	20000b34 	.word	0x20000b34
    5ef4:	000080b8 	.word	0x000080b8
    5ef8:	00008111 	.word	0x00008111
    5efc:	00007ea3 	.word	0x00007ea3
    5f00:	00008126 	.word	0x00008126
    5f04:	000080e5 	.word	0x000080e5
    5f08:	000080fc 	.word	0x000080fc

00005f0c <z_unpend_first_thread>:
{
    5f0c:	b570      	push	{r4, r5, r6, lr}
    5f0e:	4605      	mov	r5, r0
	__asm__ volatile(
    5f10:	f04f 0320 	mov.w	r3, #32
    5f14:	f3ef 8611 	mrs	r6, BASEPRI
    5f18:	f383 8812 	msr	BASEPRI_MAX, r3
    5f1c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f20:	481b      	ldr	r0, [pc, #108]	; (5f90 <z_unpend_first_thread+0x84>)
    5f22:	f7fe ff93 	bl	4e4c <z_spin_lock_valid>
    5f26:	b968      	cbnz	r0, 5f44 <z_unpend_first_thread+0x38>
    5f28:	4a1a      	ldr	r2, [pc, #104]	; (5f94 <z_unpend_first_thread+0x88>)
    5f2a:	491b      	ldr	r1, [pc, #108]	; (5f98 <z_unpend_first_thread+0x8c>)
    5f2c:	481b      	ldr	r0, [pc, #108]	; (5f9c <z_unpend_first_thread+0x90>)
    5f2e:	2394      	movs	r3, #148	; 0x94
    5f30:	f001 f8b3 	bl	709a <assert_print>
    5f34:	4916      	ldr	r1, [pc, #88]	; (5f90 <z_unpend_first_thread+0x84>)
    5f36:	481a      	ldr	r0, [pc, #104]	; (5fa0 <z_unpend_first_thread+0x94>)
    5f38:	f001 f8af 	bl	709a <assert_print>
    5f3c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f3e:	4815      	ldr	r0, [pc, #84]	; (5f94 <z_unpend_first_thread+0x88>)
    5f40:	f001 f8a4 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    5f44:	4812      	ldr	r0, [pc, #72]	; (5f90 <z_unpend_first_thread+0x84>)
    5f46:	f7fe ff9f 	bl	4e88 <z_spin_lock_set_owner>
	return list->head == list;
    5f4a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f4c:	42a5      	cmp	r5, r4
    5f4e:	d017      	beq.n	5f80 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
    5f50:	b134      	cbz	r4, 5f60 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    5f52:	4620      	mov	r0, r4
    5f54:	f7ff ff62 	bl	5e1c <unpend_thread_no_timeout>
    5f58:	f104 0018 	add.w	r0, r4, #24
    5f5c:	f000 fb9c 	bl	6698 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f60:	480b      	ldr	r0, [pc, #44]	; (5f90 <z_unpend_first_thread+0x84>)
    5f62:	f7fe ff81 	bl	4e68 <z_spin_unlock_valid>
    5f66:	b968      	cbnz	r0, 5f84 <z_unpend_first_thread+0x78>
    5f68:	4a0a      	ldr	r2, [pc, #40]	; (5f94 <z_unpend_first_thread+0x88>)
    5f6a:	490e      	ldr	r1, [pc, #56]	; (5fa4 <z_unpend_first_thread+0x98>)
    5f6c:	480b      	ldr	r0, [pc, #44]	; (5f9c <z_unpend_first_thread+0x90>)
    5f6e:	23c2      	movs	r3, #194	; 0xc2
    5f70:	f001 f893 	bl	709a <assert_print>
    5f74:	4906      	ldr	r1, [pc, #24]	; (5f90 <z_unpend_first_thread+0x84>)
    5f76:	480c      	ldr	r0, [pc, #48]	; (5fa8 <z_unpend_first_thread+0x9c>)
    5f78:	f001 f88f 	bl	709a <assert_print>
    5f7c:	21c2      	movs	r1, #194	; 0xc2
    5f7e:	e7de      	b.n	5f3e <z_unpend_first_thread+0x32>
    5f80:	2400      	movs	r4, #0
    5f82:	e7ed      	b.n	5f60 <z_unpend_first_thread+0x54>
	__asm__ volatile(
    5f84:	f386 8811 	msr	BASEPRI, r6
    5f88:	f3bf 8f6f 	isb	sy
}
    5f8c:	4620      	mov	r0, r4
    5f8e:	bd70      	pop	{r4, r5, r6, pc}
    5f90:	20000b34 	.word	0x20000b34
    5f94:	000080b8 	.word	0x000080b8
    5f98:	00008111 	.word	0x00008111
    5f9c:	00007ea3 	.word	0x00007ea3
    5fa0:	00008126 	.word	0x00008126
    5fa4:	000080e5 	.word	0x000080e5
    5fa8:	000080fc 	.word	0x000080fc

00005fac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5fac:	4b04      	ldr	r3, [pc, #16]	; (5fc0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5fae:	2100      	movs	r1, #0
    5fb0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5fb4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5fb8:	4608      	mov	r0, r1
    5fba:	f7ff ba47 	b.w	544c <k_sched_time_slice_set>
    5fbe:	bf00      	nop
    5fc0:	20000af8 	.word	0x20000af8

00005fc4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5fc6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    5fca:	b16b      	cbz	r3, 5fe8 <z_impl_k_yield+0x24>
    5fcc:	493c      	ldr	r1, [pc, #240]	; (60c0 <z_impl_k_yield+0xfc>)
    5fce:	4a3d      	ldr	r2, [pc, #244]	; (60c4 <z_impl_k_yield+0x100>)
    5fd0:	483d      	ldr	r0, [pc, #244]	; (60c8 <z_impl_k_yield+0x104>)
    5fd2:	f44f 63ae 	mov.w	r3, #1392	; 0x570
    5fd6:	f001 f860 	bl	709a <assert_print>
    5fda:	483c      	ldr	r0, [pc, #240]	; (60cc <z_impl_k_yield+0x108>)
    5fdc:	f001 f85d 	bl	709a <assert_print>
    5fe0:	f44f 61ae 	mov.w	r1, #1392	; 0x570
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    5fe4:	4837      	ldr	r0, [pc, #220]	; (60c4 <z_impl_k_yield+0x100>)
    5fe6:	e017      	b.n	6018 <z_impl_k_yield+0x54>
	__asm__ volatile(
    5fe8:	f04f 0320 	mov.w	r3, #32
    5fec:	f3ef 8611 	mrs	r6, BASEPRI
    5ff0:	f383 8812 	msr	BASEPRI_MAX, r3
    5ff4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ff8:	4835      	ldr	r0, [pc, #212]	; (60d0 <z_impl_k_yield+0x10c>)
    5ffa:	f7fe ff27 	bl	4e4c <z_spin_lock_valid>
    5ffe:	b968      	cbnz	r0, 601c <z_impl_k_yield+0x58>
    6000:	4a34      	ldr	r2, [pc, #208]	; (60d4 <z_impl_k_yield+0x110>)
    6002:	4935      	ldr	r1, [pc, #212]	; (60d8 <z_impl_k_yield+0x114>)
    6004:	4830      	ldr	r0, [pc, #192]	; (60c8 <z_impl_k_yield+0x104>)
    6006:	2394      	movs	r3, #148	; 0x94
    6008:	f001 f847 	bl	709a <assert_print>
    600c:	4930      	ldr	r1, [pc, #192]	; (60d0 <z_impl_k_yield+0x10c>)
    600e:	4833      	ldr	r0, [pc, #204]	; (60dc <z_impl_k_yield+0x118>)
    6010:	f001 f843 	bl	709a <assert_print>
    6014:	2194      	movs	r1, #148	; 0x94
    6016:	482f      	ldr	r0, [pc, #188]	; (60d4 <z_impl_k_yield+0x110>)
    6018:	f001 f838 	bl	708c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    601c:	4c30      	ldr	r4, [pc, #192]	; (60e0 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
    601e:	482c      	ldr	r0, [pc, #176]	; (60d0 <z_impl_k_yield+0x10c>)
    6020:	f7fe ff32 	bl	4e88 <z_spin_lock_set_owner>
    6024:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6026:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6028:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
    602c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6030:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6032:	4628      	mov	r0, r5
    6034:	f7ff fc28 	bl	5888 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    6038:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    603a:	7b5a      	ldrb	r2, [r3, #13]
    603c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6040:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6042:	4a28      	ldr	r2, [pc, #160]	; (60e4 <z_impl_k_yield+0x120>)
    6044:	4293      	cmp	r3, r2
    6046:	d107      	bne.n	6058 <z_impl_k_yield+0x94>
    6048:	4927      	ldr	r1, [pc, #156]	; (60e8 <z_impl_k_yield+0x124>)
    604a:	4a1e      	ldr	r2, [pc, #120]	; (60c4 <z_impl_k_yield+0x100>)
    604c:	481e      	ldr	r0, [pc, #120]	; (60c8 <z_impl_k_yield+0x104>)
    604e:	23ba      	movs	r3, #186	; 0xba
    6050:	f001 f823 	bl	709a <assert_print>
    6054:	21ba      	movs	r1, #186	; 0xba
    6056:	e7c5      	b.n	5fe4 <z_impl_k_yield+0x20>
	return list->head == list;
    6058:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
    605a:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    605c:	42aa      	cmp	r2, r5
    605e:	bf08      	it	eq
    6060:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6062:	b922      	cbnz	r2, 606e <z_impl_k_yield+0xaa>
	node->prev = tail;
    6064:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
    6068:	600b      	str	r3, [r1, #0]
	list->tail = node;
    606a:	6263      	str	r3, [r4, #36]	; 0x24
}
    606c:	e00c      	b.n	6088 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
    606e:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    6072:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    6076:	42b8      	cmp	r0, r7
    6078:	d019      	beq.n	60ae <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
    607a:	4287      	cmp	r7, r0
    607c:	dd17      	ble.n	60ae <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
    607e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6080:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    6084:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6086:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6088:	2001      	movs	r0, #1
    608a:	f7ff f961 	bl	5350 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    608e:	4810      	ldr	r0, [pc, #64]	; (60d0 <z_impl_k_yield+0x10c>)
    6090:	f7fe feea 	bl	4e68 <z_spin_unlock_valid>
    6094:	b978      	cbnz	r0, 60b6 <z_impl_k_yield+0xf2>
    6096:	4a0f      	ldr	r2, [pc, #60]	; (60d4 <z_impl_k_yield+0x110>)
    6098:	4914      	ldr	r1, [pc, #80]	; (60ec <z_impl_k_yield+0x128>)
    609a:	480b      	ldr	r0, [pc, #44]	; (60c8 <z_impl_k_yield+0x104>)
    609c:	23e1      	movs	r3, #225	; 0xe1
    609e:	f000 fffc 	bl	709a <assert_print>
    60a2:	490b      	ldr	r1, [pc, #44]	; (60d0 <z_impl_k_yield+0x10c>)
    60a4:	4812      	ldr	r0, [pc, #72]	; (60f0 <z_impl_k_yield+0x12c>)
    60a6:	f000 fff8 	bl	709a <assert_print>
    60aa:	21e1      	movs	r1, #225	; 0xe1
    60ac:	e7b3      	b.n	6016 <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
    60ae:	428a      	cmp	r2, r1
    60b0:	d0d8      	beq.n	6064 <z_impl_k_yield+0xa0>
    60b2:	6812      	ldr	r2, [r2, #0]
    60b4:	e7d5      	b.n	6062 <z_impl_k_yield+0x9e>
    60b6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    60b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    60bc:	f7fb bc84 	b.w	19c8 <arch_swap>
    60c0:	00008b66 	.word	0x00008b66
    60c4:	00008ce2 	.word	0x00008ce2
    60c8:	00007ea3 	.word	0x00007ea3
    60cc:	00008cdf 	.word	0x00008cdf
    60d0:	20000b34 	.word	0x20000b34
    60d4:	000080b8 	.word	0x000080b8
    60d8:	00008111 	.word	0x00008111
    60dc:	00008126 	.word	0x00008126
    60e0:	20000af8 	.word	0x20000af8
    60e4:	20000310 	.word	0x20000310
    60e8:	00008d2b 	.word	0x00008d2b
    60ec:	000080e5 	.word	0x000080e5
    60f0:	000080fc 	.word	0x000080fc

000060f4 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    60f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60f8:	4605      	mov	r5, r0
    60fa:	460e      	mov	r6, r1
    60fc:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    6100:	b16b      	cbz	r3, 611e <z_tick_sleep+0x2a>
    6102:	493f      	ldr	r1, [pc, #252]	; (6200 <z_tick_sleep+0x10c>)
    6104:	4a3f      	ldr	r2, [pc, #252]	; (6204 <z_tick_sleep+0x110>)
    6106:	4840      	ldr	r0, [pc, #256]	; (6208 <z_tick_sleep+0x114>)
    6108:	f240 538c 	movw	r3, #1420	; 0x58c
    610c:	f000 ffc5 	bl	709a <assert_print>
    6110:	483e      	ldr	r0, [pc, #248]	; (620c <z_tick_sleep+0x118>)
    6112:	f000 ffc2 	bl	709a <assert_print>
    6116:	f240 518c 	movw	r1, #1420	; 0x58c
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    611a:	483a      	ldr	r0, [pc, #232]	; (6204 <z_tick_sleep+0x110>)
    611c:	e025      	b.n	616a <z_tick_sleep+0x76>
	if (ticks == 0) {
    611e:	ea50 0301 	orrs.w	r3, r0, r1
    6122:	d103      	bne.n	612c <z_tick_sleep+0x38>
	z_impl_k_yield();
    6124:	f7ff ff4e 	bl	5fc4 <z_impl_k_yield>
		return 0;
    6128:	2000      	movs	r0, #0
    612a:	e066      	b.n	61fa <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
    612c:	1c82      	adds	r2, r0, #2
    612e:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    6132:	db1c      	blt.n	616e <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6134:	f001 fba1 	bl	787a <sys_clock_tick_get_32>
    6138:	182c      	adds	r4, r5, r0
    613a:	f04f 0320 	mov.w	r3, #32
    613e:	f3ef 8811 	mrs	r8, BASEPRI
    6142:	f383 8812 	msr	BASEPRI_MAX, r3
    6146:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    614a:	4831      	ldr	r0, [pc, #196]	; (6210 <z_tick_sleep+0x11c>)
    614c:	f7fe fe7e 	bl	4e4c <z_spin_lock_valid>
    6150:	b988      	cbnz	r0, 6176 <z_tick_sleep+0x82>
    6152:	4a30      	ldr	r2, [pc, #192]	; (6214 <z_tick_sleep+0x120>)
    6154:	4930      	ldr	r1, [pc, #192]	; (6218 <z_tick_sleep+0x124>)
    6156:	482c      	ldr	r0, [pc, #176]	; (6208 <z_tick_sleep+0x114>)
    6158:	2394      	movs	r3, #148	; 0x94
    615a:	f000 ff9e 	bl	709a <assert_print>
    615e:	492c      	ldr	r1, [pc, #176]	; (6210 <z_tick_sleep+0x11c>)
    6160:	482e      	ldr	r0, [pc, #184]	; (621c <z_tick_sleep+0x128>)
    6162:	f000 ff9a 	bl	709a <assert_print>
    6166:	2194      	movs	r1, #148	; 0x94
    6168:	482a      	ldr	r0, [pc, #168]	; (6214 <z_tick_sleep+0x120>)
    616a:	f000 ff8f 	bl	708c <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    616e:	f06f 0401 	mvn.w	r4, #1
    6172:	1a24      	subs	r4, r4, r0
    6174:	e7e1      	b.n	613a <z_tick_sleep+0x46>
	pending_current = _current;
    6176:	4f2a      	ldr	r7, [pc, #168]	; (6220 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
    6178:	4825      	ldr	r0, [pc, #148]	; (6210 <z_tick_sleep+0x11c>)
    617a:	f7fe fe85 	bl	4e88 <z_spin_lock_set_owner>
    617e:	4b29      	ldr	r3, [pc, #164]	; (6224 <z_tick_sleep+0x130>)
    6180:	68b8      	ldr	r0, [r7, #8]
    6182:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6184:	f7ff fc68 	bl	5a58 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6188:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    618a:	4927      	ldr	r1, [pc, #156]	; (6228 <z_tick_sleep+0x134>)
    618c:	462a      	mov	r2, r5
    618e:	4633      	mov	r3, r6
    6190:	3018      	adds	r0, #24
    6192:	f000 f9bb 	bl	650c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6196:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6198:	481d      	ldr	r0, [pc, #116]	; (6210 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    619a:	7b53      	ldrb	r3, [r2, #13]
    619c:	f043 0310 	orr.w	r3, r3, #16
    61a0:	7353      	strb	r3, [r2, #13]
    61a2:	f7fe fe61 	bl	4e68 <z_spin_unlock_valid>
    61a6:	b958      	cbnz	r0, 61c0 <z_tick_sleep+0xcc>
    61a8:	4a1a      	ldr	r2, [pc, #104]	; (6214 <z_tick_sleep+0x120>)
    61aa:	4920      	ldr	r1, [pc, #128]	; (622c <z_tick_sleep+0x138>)
    61ac:	4816      	ldr	r0, [pc, #88]	; (6208 <z_tick_sleep+0x114>)
    61ae:	23e1      	movs	r3, #225	; 0xe1
    61b0:	f000 ff73 	bl	709a <assert_print>
    61b4:	4916      	ldr	r1, [pc, #88]	; (6210 <z_tick_sleep+0x11c>)
    61b6:	481e      	ldr	r0, [pc, #120]	; (6230 <z_tick_sleep+0x13c>)
    61b8:	f000 ff6f 	bl	709a <assert_print>
    61bc:	21e1      	movs	r1, #225	; 0xe1
    61be:	e7d3      	b.n	6168 <z_tick_sleep+0x74>
    61c0:	4640      	mov	r0, r8
    61c2:	f7fb fc01 	bl	19c8 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    61c6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    61c8:	7b5b      	ldrb	r3, [r3, #13]
    61ca:	06db      	lsls	r3, r3, #27
    61cc:	d50c      	bpl.n	61e8 <z_tick_sleep+0xf4>
    61ce:	4919      	ldr	r1, [pc, #100]	; (6234 <z_tick_sleep+0x140>)
    61d0:	4a0c      	ldr	r2, [pc, #48]	; (6204 <z_tick_sleep+0x110>)
    61d2:	480d      	ldr	r0, [pc, #52]	; (6208 <z_tick_sleep+0x114>)
    61d4:	f44f 63b5 	mov.w	r3, #1448	; 0x5a8
    61d8:	f000 ff5f 	bl	709a <assert_print>
    61dc:	480b      	ldr	r0, [pc, #44]	; (620c <z_tick_sleep+0x118>)
    61de:	f000 ff5c 	bl	709a <assert_print>
    61e2:	f44f 61b5 	mov.w	r1, #1448	; 0x5a8
    61e6:	e798      	b.n	611a <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    61e8:	f001 fb47 	bl	787a <sys_clock_tick_get_32>
    61ec:	1a20      	subs	r0, r4, r0
    61ee:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    61f2:	2801      	cmp	r0, #1
    61f4:	f173 0300 	sbcs.w	r3, r3, #0
    61f8:	db96      	blt.n	6128 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
    61fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    61fe:	bf00      	nop
    6200:	00008b66 	.word	0x00008b66
    6204:	00008ce2 	.word	0x00008ce2
    6208:	00007ea3 	.word	0x00007ea3
    620c:	00008cdf 	.word	0x00008cdf
    6210:	20000b34 	.word	0x20000b34
    6214:	000080b8 	.word	0x000080b8
    6218:	00008111 	.word	0x00008111
    621c:	00008126 	.word	0x00008126
    6220:	20000af8 	.word	0x20000af8
    6224:	20000b28 	.word	0x20000b28
    6228:	00005e5d 	.word	0x00005e5d
    622c:	000080e5 	.word	0x000080e5
    6230:	000080fc 	.word	0x000080fc
    6234:	00008e27 	.word	0x00008e27

00006238 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    6238:	b508      	push	{r3, lr}
    623a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    623e:	b173      	cbz	r3, 625e <z_impl_k_sleep+0x26>
    6240:	4912      	ldr	r1, [pc, #72]	; (628c <z_impl_k_sleep+0x54>)
    6242:	4a13      	ldr	r2, [pc, #76]	; (6290 <z_impl_k_sleep+0x58>)
    6244:	4813      	ldr	r0, [pc, #76]	; (6294 <z_impl_k_sleep+0x5c>)
    6246:	f240 53b7 	movw	r3, #1463	; 0x5b7
    624a:	f000 ff26 	bl	709a <assert_print>
    624e:	4812      	ldr	r0, [pc, #72]	; (6298 <z_impl_k_sleep+0x60>)
    6250:	f000 ff23 	bl	709a <assert_print>
    6254:	480e      	ldr	r0, [pc, #56]	; (6290 <z_impl_k_sleep+0x58>)
    6256:	f240 51b7 	movw	r1, #1463	; 0x5b7
    625a:	f000 ff17 	bl	708c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    625e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    6262:	bf08      	it	eq
    6264:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    6268:	d106      	bne.n	6278 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
    626a:	4b0c      	ldr	r3, [pc, #48]	; (629c <z_impl_k_sleep+0x64>)
    626c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    626e:	f7ff fd6d 	bl	5d4c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6272:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6276:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6278:	f7ff ff3c 	bl	60f4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    627c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6280:	fb80 0303 	smull	r0, r3, r0, r3
    6284:	0bc0      	lsrs	r0, r0, #15
    6286:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    628a:	e7f4      	b.n	6276 <z_impl_k_sleep+0x3e>
    628c:	00008b66 	.word	0x00008b66
    6290:	00008ce2 	.word	0x00008ce2
    6294:	00007ea3 	.word	0x00007ea3
    6298:	00008cdf 	.word	0x00008cdf
    629c:	20000af8 	.word	0x20000af8

000062a0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    62a0:	4b01      	ldr	r3, [pc, #4]	; (62a8 <z_impl_z_current_get+0x8>)
    62a2:	6898      	ldr	r0, [r3, #8]
    62a4:	4770      	bx	lr
    62a6:	bf00      	nop
    62a8:	20000af8 	.word	0x20000af8

000062ac <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    62ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62b0:	4604      	mov	r4, r0
    62b2:	f04f 0320 	mov.w	r3, #32
    62b6:	f3ef 8611 	mrs	r6, BASEPRI
    62ba:	f383 8812 	msr	BASEPRI_MAX, r3
    62be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    62c2:	4851      	ldr	r0, [pc, #324]	; (6408 <z_thread_abort+0x15c>)
    62c4:	f7fe fdc2 	bl	4e4c <z_spin_lock_valid>
    62c8:	b968      	cbnz	r0, 62e6 <z_thread_abort+0x3a>
    62ca:	4a50      	ldr	r2, [pc, #320]	; (640c <z_thread_abort+0x160>)
    62cc:	4950      	ldr	r1, [pc, #320]	; (6410 <z_thread_abort+0x164>)
    62ce:	4851      	ldr	r0, [pc, #324]	; (6414 <z_thread_abort+0x168>)
    62d0:	2394      	movs	r3, #148	; 0x94
    62d2:	f000 fee2 	bl	709a <assert_print>
    62d6:	494c      	ldr	r1, [pc, #304]	; (6408 <z_thread_abort+0x15c>)
    62d8:	484f      	ldr	r0, [pc, #316]	; (6418 <z_thread_abort+0x16c>)
    62da:	f000 fede 	bl	709a <assert_print>
    62de:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62e0:	484a      	ldr	r0, [pc, #296]	; (640c <z_thread_abort+0x160>)
    62e2:	f000 fed3 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    62e6:	4848      	ldr	r0, [pc, #288]	; (6408 <z_thread_abort+0x15c>)
    62e8:	f7fe fdce 	bl	4e88 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    62ec:	7b23      	ldrb	r3, [r4, #12]
    62ee:	07d9      	lsls	r1, r3, #31
    62f0:	d522      	bpl.n	6338 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62f2:	4845      	ldr	r0, [pc, #276]	; (6408 <z_thread_abort+0x15c>)
    62f4:	f7fe fdb8 	bl	4e68 <z_spin_unlock_valid>
    62f8:	b958      	cbnz	r0, 6312 <z_thread_abort+0x66>
    62fa:	4a44      	ldr	r2, [pc, #272]	; (640c <z_thread_abort+0x160>)
    62fc:	4947      	ldr	r1, [pc, #284]	; (641c <z_thread_abort+0x170>)
    62fe:	4845      	ldr	r0, [pc, #276]	; (6414 <z_thread_abort+0x168>)
    6300:	23c2      	movs	r3, #194	; 0xc2
    6302:	f000 feca 	bl	709a <assert_print>
    6306:	4940      	ldr	r1, [pc, #256]	; (6408 <z_thread_abort+0x15c>)
    6308:	4845      	ldr	r0, [pc, #276]	; (6420 <z_thread_abort+0x174>)
    630a:	f000 fec6 	bl	709a <assert_print>
    630e:	21c2      	movs	r1, #194	; 0xc2
    6310:	e7e6      	b.n	62e0 <z_thread_abort+0x34>
	__asm__ volatile(
    6312:	f386 8811 	msr	BASEPRI, r6
    6316:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
    631a:	4a42      	ldr	r2, [pc, #264]	; (6424 <z_thread_abort+0x178>)
    631c:	4942      	ldr	r1, [pc, #264]	; (6428 <z_thread_abort+0x17c>)
    631e:	483d      	ldr	r0, [pc, #244]	; (6414 <z_thread_abort+0x168>)
    6320:	f240 63c3 	movw	r3, #1731	; 0x6c3
    6324:	f000 feb9 	bl	709a <assert_print>
    6328:	4621      	mov	r1, r4
    632a:	4840      	ldr	r0, [pc, #256]	; (642c <z_thread_abort+0x180>)
    632c:	f000 feb5 	bl	709a <assert_print>
    6330:	f240 61c3 	movw	r1, #1731	; 0x6c3
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
    6334:	483b      	ldr	r0, [pc, #236]	; (6424 <z_thread_abort+0x178>)
    6336:	e7d4      	b.n	62e2 <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6338:	7b63      	ldrb	r3, [r4, #13]
    633a:	071a      	lsls	r2, r3, #28
    633c:	d50a      	bpl.n	6354 <z_thread_abort+0xa8>
    633e:	4832      	ldr	r0, [pc, #200]	; (6408 <z_thread_abort+0x15c>)
    6340:	f7fe fd92 	bl	4e68 <z_spin_unlock_valid>
    6344:	2800      	cmp	r0, #0
    6346:	d0d8      	beq.n	62fa <z_thread_abort+0x4e>
    6348:	f386 8811 	msr	BASEPRI, r6
    634c:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6354:	f023 0220 	bic.w	r2, r3, #32
    6358:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    635c:	09d2      	lsrs	r2, r2, #7
    635e:	d12c      	bne.n	63ba <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6360:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    6362:	68a3      	ldr	r3, [r4, #8]
    6364:	b113      	cbz	r3, 636c <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
    6366:	4620      	mov	r0, r4
    6368:	f7ff fd58 	bl	5e1c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    636c:	f104 0018 	add.w	r0, r4, #24
    6370:	f000 f992 	bl	6698 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6374:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6378:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    637c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    637e:	42bd      	cmp	r5, r7
    6380:	d000      	beq.n	6384 <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6382:	bb25      	cbnz	r5, 63ce <z_thread_abort+0x122>
		update_cache(1);
    6384:	2001      	movs	r0, #1
    6386:	f7fe ffe3 	bl	5350 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    638a:	4b29      	ldr	r3, [pc, #164]	; (6430 <z_thread_abort+0x184>)
    638c:	689b      	ldr	r3, [r3, #8]
    638e:	42a3      	cmp	r3, r4
    6390:	d1d5      	bne.n	633e <z_thread_abort+0x92>
    6392:	f3ef 8305 	mrs	r3, IPSR
    6396:	2b00      	cmp	r3, #0
    6398:	d1d1      	bne.n	633e <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    639a:	481b      	ldr	r0, [pc, #108]	; (6408 <z_thread_abort+0x15c>)
    639c:	f7fe fd64 	bl	4e68 <z_spin_unlock_valid>
    63a0:	bb10      	cbnz	r0, 63e8 <z_thread_abort+0x13c>
    63a2:	4a1a      	ldr	r2, [pc, #104]	; (640c <z_thread_abort+0x160>)
    63a4:	491d      	ldr	r1, [pc, #116]	; (641c <z_thread_abort+0x170>)
    63a6:	481b      	ldr	r0, [pc, #108]	; (6414 <z_thread_abort+0x168>)
    63a8:	23e1      	movs	r3, #225	; 0xe1
    63aa:	f000 fe76 	bl	709a <assert_print>
    63ae:	4916      	ldr	r1, [pc, #88]	; (6408 <z_thread_abort+0x15c>)
    63b0:	481b      	ldr	r0, [pc, #108]	; (6420 <z_thread_abort+0x174>)
    63b2:	f000 fe72 	bl	709a <assert_print>
    63b6:	21e1      	movs	r1, #225	; 0xe1
    63b8:	e792      	b.n	62e0 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    63ba:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    63be:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    63c2:	481c      	ldr	r0, [pc, #112]	; (6434 <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    63c4:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    63c6:	4621      	mov	r1, r4
    63c8:	f7ff fa5e 	bl	5888 <z_priq_dumb_remove>
}
    63cc:	e7c9      	b.n	6362 <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
    63ce:	4628      	mov	r0, r5
    63d0:	f7ff fd24 	bl	5e1c <unpend_thread_no_timeout>
    63d4:	f105 0018 	add.w	r0, r5, #24
    63d8:	f000 f95e 	bl	6698 <z_abort_timeout>
    63dc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    63e0:	4628      	mov	r0, r5
    63e2:	f7fe ffe9 	bl	53b8 <ready_thread>
    63e6:	e7c9      	b.n	637c <z_thread_abort+0xd0>
    63e8:	4630      	mov	r0, r6
    63ea:	f7fb faed 	bl	19c8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    63ee:	490e      	ldr	r1, [pc, #56]	; (6428 <z_thread_abort+0x17c>)
    63f0:	4a0c      	ldr	r2, [pc, #48]	; (6424 <z_thread_abort+0x178>)
    63f2:	4808      	ldr	r0, [pc, #32]	; (6414 <z_thread_abort+0x168>)
    63f4:	f240 63f2 	movw	r3, #1778	; 0x6f2
    63f8:	f000 fe4f 	bl	709a <assert_print>
    63fc:	480e      	ldr	r0, [pc, #56]	; (6438 <z_thread_abort+0x18c>)
    63fe:	f000 fe4c 	bl	709a <assert_print>
    6402:	f240 61f2 	movw	r1, #1778	; 0x6f2
    6406:	e795      	b.n	6334 <z_thread_abort+0x88>
    6408:	20000b34 	.word	0x20000b34
    640c:	000080b8 	.word	0x000080b8
    6410:	00008111 	.word	0x00008111
    6414:	00007ea3 	.word	0x00007ea3
    6418:	00008126 	.word	0x00008126
    641c:	000080e5 	.word	0x000080e5
    6420:	000080fc 	.word	0x000080fc
    6424:	00008ce2 	.word	0x00008ce2
    6428:	000080a0 	.word	0x000080a0
    642c:	00008e67 	.word	0x00008e67
    6430:	20000af8 	.word	0x20000af8
    6434:	20000b18 	.word	0x20000b18
    6438:	00008e86 	.word	0x00008e86

0000643c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    643c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    643e:	4806      	ldr	r0, [pc, #24]	; (6458 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6440:	4a06      	ldr	r2, [pc, #24]	; (645c <z_data_copy+0x20>)
    6442:	4907      	ldr	r1, [pc, #28]	; (6460 <z_data_copy+0x24>)
    6444:	1a12      	subs	r2, r2, r0
    6446:	f001 f9bf 	bl	77c8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    644a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    644e:	4a05      	ldr	r2, [pc, #20]	; (6464 <z_data_copy+0x28>)
    6450:	4905      	ldr	r1, [pc, #20]	; (6468 <z_data_copy+0x2c>)
    6452:	4806      	ldr	r0, [pc, #24]	; (646c <z_data_copy+0x30>)
    6454:	f001 b9b8 	b.w	77c8 <z_early_memcpy>
    6458:	20000000 	.word	0x20000000
    645c:	200001f0 	.word	0x200001f0
    6460:	00008f54 	.word	0x00008f54
    6464:	00000000 	.word	0x00000000
    6468:	00008f54 	.word	0x00008f54
    646c:	20000000 	.word	0x20000000

00006470 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6470:	4b03      	ldr	r3, [pc, #12]	; (6480 <elapsed+0x10>)
    6472:	681b      	ldr	r3, [r3, #0]
    6474:	b90b      	cbnz	r3, 647a <elapsed+0xa>
    6476:	f7fc bf09 	b.w	328c <sys_clock_elapsed>
}
    647a:	2000      	movs	r0, #0
    647c:	4770      	bx	lr
    647e:	bf00      	nop
    6480:	20000b38 	.word	0x20000b38

00006484 <next_timeout>:

static int32_t next_timeout(void)
{
    6484:	b510      	push	{r4, lr}
	return list->head == list;
    6486:	4b11      	ldr	r3, [pc, #68]	; (64cc <next_timeout+0x48>)
    6488:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    648a:	429c      	cmp	r4, r3
    648c:	d10a      	bne.n	64a4 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    648e:	f7ff ffef 	bl	6470 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    6492:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6496:	4b0e      	ldr	r3, [pc, #56]	; (64d0 <next_timeout+0x4c>)
    6498:	691b      	ldr	r3, [r3, #16]
    649a:	b113      	cbz	r3, 64a2 <next_timeout+0x1e>
    649c:	4298      	cmp	r0, r3
    649e:	bfa8      	it	ge
    64a0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    64a2:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    64a4:	f7ff ffe4 	bl	6470 <elapsed>
	if ((to == NULL) ||
    64a8:	2c00      	cmp	r4, #0
    64aa:	d0f2      	beq.n	6492 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    64ac:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    64b0:	1a1b      	subs	r3, r3, r0
    64b2:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    64b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    64ba:	f172 0100 	sbcs.w	r1, r2, #0
    64be:	dae8      	bge.n	6492 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    64c0:	2a00      	cmp	r2, #0
    64c2:	bfac      	ite	ge
    64c4:	4618      	movge	r0, r3
    64c6:	2000      	movlt	r0, #0
    64c8:	e7e5      	b.n	6496 <next_timeout+0x12>
    64ca:	bf00      	nop
    64cc:	20000114 	.word	0x20000114
    64d0:	20000af8 	.word	0x20000af8

000064d4 <remove_timeout>:
{
    64d4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    64d6:	b170      	cbz	r0, 64f6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    64d8:	4b0b      	ldr	r3, [pc, #44]	; (6508 <remove_timeout+0x34>)
    64da:	685b      	ldr	r3, [r3, #4]
    64dc:	4298      	cmp	r0, r3
    64de:	d00a      	beq.n	64f6 <remove_timeout+0x22>
    64e0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    64e2:	b143      	cbz	r3, 64f6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    64e4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    64e8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    64ec:	1912      	adds	r2, r2, r4
    64ee:	eb41 0105 	adc.w	r1, r1, r5
    64f2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
    64f6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    64fa:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    64fc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    64fe:	2300      	movs	r3, #0
	node->prev = NULL;
    6500:	e9c0 3300 	strd	r3, r3, [r0]
}
    6504:	bd30      	pop	{r4, r5, pc}
    6506:	bf00      	nop
    6508:	20000114 	.word	0x20000114

0000650c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    650c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6510:	bf08      	it	eq
    6512:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    6516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    651a:	4604      	mov	r4, r0
    651c:	4692      	mov	sl, r2
    651e:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6520:	f000 809e 	beq.w	6660 <z_add_timeout+0x154>
	return node->next != NULL;
    6524:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    6526:	b166      	cbz	r6, 6542 <z_add_timeout+0x36>
    6528:	494e      	ldr	r1, [pc, #312]	; (6664 <z_add_timeout+0x158>)
    652a:	4a4f      	ldr	r2, [pc, #316]	; (6668 <z_add_timeout+0x15c>)
    652c:	484f      	ldr	r0, [pc, #316]	; (666c <z_add_timeout+0x160>)
    652e:	2363      	movs	r3, #99	; 0x63
    6530:	f000 fdb3 	bl	709a <assert_print>
    6534:	484e      	ldr	r0, [pc, #312]	; (6670 <z_add_timeout+0x164>)
    6536:	f000 fdb0 	bl	709a <assert_print>
    653a:	484b      	ldr	r0, [pc, #300]	; (6668 <z_add_timeout+0x15c>)
    653c:	2163      	movs	r1, #99	; 0x63
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    653e:	f000 fda5 	bl	708c <assert_post_action>
	to->fn = fn;
    6542:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    6544:	f04f 0320 	mov.w	r3, #32
    6548:	f3ef 8711 	mrs	r7, BASEPRI
    654c:	f383 8812 	msr	BASEPRI_MAX, r3
    6550:	f3bf 8f6f 	isb	sy
    6554:	4847      	ldr	r0, [pc, #284]	; (6674 <z_add_timeout+0x168>)
    6556:	f7fe fc79 	bl	4e4c <z_spin_lock_valid>
    655a:	b960      	cbnz	r0, 6576 <z_add_timeout+0x6a>
    655c:	4a46      	ldr	r2, [pc, #280]	; (6678 <z_add_timeout+0x16c>)
    655e:	4947      	ldr	r1, [pc, #284]	; (667c <z_add_timeout+0x170>)
    6560:	4842      	ldr	r0, [pc, #264]	; (666c <z_add_timeout+0x160>)
    6562:	2394      	movs	r3, #148	; 0x94
    6564:	f000 fd99 	bl	709a <assert_print>
    6568:	4942      	ldr	r1, [pc, #264]	; (6674 <z_add_timeout+0x168>)
    656a:	4845      	ldr	r0, [pc, #276]	; (6680 <z_add_timeout+0x174>)
    656c:	f000 fd95 	bl	709a <assert_print>
    6570:	2194      	movs	r1, #148	; 0x94
    6572:	4841      	ldr	r0, [pc, #260]	; (6678 <z_add_timeout+0x16c>)
    6574:	e7e3      	b.n	653e <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
    6576:	483f      	ldr	r0, [pc, #252]	; (6674 <z_add_timeout+0x168>)
    6578:	f7fe fc86 	bl	4e88 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    657c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
    6580:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    6584:	da23      	bge.n	65ce <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6586:	493f      	ldr	r1, [pc, #252]	; (6684 <z_add_timeout+0x178>)
    6588:	e9d1 2000 	ldrd	r2, r0, [r1]
    658c:	f06f 0301 	mvn.w	r3, #1
    6590:	1a9b      	subs	r3, r3, r2
    6592:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6596:	eb62 0000 	sbc.w	r0, r2, r0
    659a:	ebb3 030a 	subs.w	r3, r3, sl
    659e:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    65a2:	2b01      	cmp	r3, #1
    65a4:	f170 0200 	sbcs.w	r2, r0, #0
    65a8:	da01      	bge.n	65ae <z_add_timeout+0xa2>
    65aa:	2301      	movs	r3, #1
    65ac:	4630      	mov	r0, r6
    65ae:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
    65b2:	4b35      	ldr	r3, [pc, #212]	; (6688 <z_add_timeout+0x17c>)
    65b4:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
    65b6:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65ba:	429a      	cmp	r2, r3
    65bc:	bf18      	it	ne
    65be:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    65c0:	b986      	cbnz	r6, 65e4 <z_add_timeout+0xd8>
	node->prev = tail;
    65c2:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
    65c6:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    65ca:	605c      	str	r4, [r3, #4]
}
    65cc:	e01c      	b.n	6608 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
    65ce:	f7ff ff4f 	bl	6470 <elapsed>
    65d2:	f11a 0801 	adds.w	r8, sl, #1
    65d6:	f145 0500 	adc.w	r5, r5, #0
    65da:	eb18 0300 	adds.w	r3, r8, r0
    65de:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    65e2:	e7e4      	b.n	65ae <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
    65e4:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
    65e8:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    65ec:	428a      	cmp	r2, r1
    65ee:	eb70 0e05 	sbcs.w	lr, r0, r5
    65f2:	da28      	bge.n	6646 <z_add_timeout+0x13a>
				t->dticks -= to->dticks;
    65f4:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
    65f6:	6872      	ldr	r2, [r6, #4]
    65f8:	eb65 0500 	sbc.w	r5, r5, r0
    65fc:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
    6600:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
    6604:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6606:	6074      	str	r4, [r6, #4]
	return list->head == list;
    6608:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    660a:	429a      	cmp	r2, r3
    660c:	d00b      	beq.n	6626 <z_add_timeout+0x11a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    660e:	4294      	cmp	r4, r2
    6610:	d109      	bne.n	6626 <z_add_timeout+0x11a>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6612:	f7ff ff37 	bl	6484 <next_timeout>

			if (next_time == 0 ||
    6616:	b118      	cbz	r0, 6620 <z_add_timeout+0x114>
			    _current_cpu->slice_ticks != next_time) {
    6618:	4b1c      	ldr	r3, [pc, #112]	; (668c <z_add_timeout+0x180>)
			if (next_time == 0 ||
    661a:	691b      	ldr	r3, [r3, #16]
    661c:	4283      	cmp	r3, r0
    661e:	d002      	beq.n	6626 <z_add_timeout+0x11a>
				sys_clock_set_timeout(next_time, false);
    6620:	2100      	movs	r1, #0
    6622:	f7fc fe07 	bl	3234 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6626:	4813      	ldr	r0, [pc, #76]	; (6674 <z_add_timeout+0x168>)
    6628:	f7fe fc1e 	bl	4e68 <z_spin_unlock_valid>
    662c:	b9a0      	cbnz	r0, 6658 <z_add_timeout+0x14c>
    662e:	4a12      	ldr	r2, [pc, #72]	; (6678 <z_add_timeout+0x16c>)
    6630:	4917      	ldr	r1, [pc, #92]	; (6690 <z_add_timeout+0x184>)
    6632:	480e      	ldr	r0, [pc, #56]	; (666c <z_add_timeout+0x160>)
    6634:	23c2      	movs	r3, #194	; 0xc2
    6636:	f000 fd30 	bl	709a <assert_print>
    663a:	490e      	ldr	r1, [pc, #56]	; (6674 <z_add_timeout+0x168>)
    663c:	4815      	ldr	r0, [pc, #84]	; (6694 <z_add_timeout+0x188>)
    663e:	f000 fd2c 	bl	709a <assert_print>
    6642:	21c2      	movs	r1, #194	; 0xc2
    6644:	e795      	b.n	6572 <z_add_timeout+0x66>
			to->dticks -= t->dticks;
    6646:	1a52      	subs	r2, r2, r1
    6648:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
    664c:	4566      	cmp	r6, ip
    664e:	e9c4 2004 	strd	r2, r0, [r4, #16]
    6652:	d0b6      	beq.n	65c2 <z_add_timeout+0xb6>
    6654:	6836      	ldr	r6, [r6, #0]
    6656:	e7b3      	b.n	65c0 <z_add_timeout+0xb4>
	__asm__ volatile(
    6658:	f387 8811 	msr	BASEPRI, r7
    665c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6664:	00008ecc 	.word	0x00008ecc
    6668:	00008ea8 	.word	0x00008ea8
    666c:	00007ea3 	.word	0x00007ea3
    6670:	00008cdf 	.word	0x00008cdf
    6674:	20000b3c 	.word	0x20000b3c
    6678:	000080b8 	.word	0x000080b8
    667c:	00008111 	.word	0x00008111
    6680:	00008126 	.word	0x00008126
    6684:	20000410 	.word	0x20000410
    6688:	20000114 	.word	0x20000114
    668c:	20000af8 	.word	0x20000af8
    6690:	000080e5 	.word	0x000080e5
    6694:	000080fc 	.word	0x000080fc

00006698 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    6698:	b538      	push	{r3, r4, r5, lr}
    669a:	4604      	mov	r4, r0
	__asm__ volatile(
    669c:	f04f 0320 	mov.w	r3, #32
    66a0:	f3ef 8511 	mrs	r5, BASEPRI
    66a4:	f383 8812 	msr	BASEPRI_MAX, r3
    66a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    66ac:	4819      	ldr	r0, [pc, #100]	; (6714 <z_abort_timeout+0x7c>)
    66ae:	f7fe fbcd 	bl	4e4c <z_spin_lock_valid>
    66b2:	b968      	cbnz	r0, 66d0 <z_abort_timeout+0x38>
    66b4:	4a18      	ldr	r2, [pc, #96]	; (6718 <z_abort_timeout+0x80>)
    66b6:	4919      	ldr	r1, [pc, #100]	; (671c <z_abort_timeout+0x84>)
    66b8:	4819      	ldr	r0, [pc, #100]	; (6720 <z_abort_timeout+0x88>)
    66ba:	2394      	movs	r3, #148	; 0x94
    66bc:	f000 fced 	bl	709a <assert_print>
    66c0:	4914      	ldr	r1, [pc, #80]	; (6714 <z_abort_timeout+0x7c>)
    66c2:	4818      	ldr	r0, [pc, #96]	; (6724 <z_abort_timeout+0x8c>)
    66c4:	f000 fce9 	bl	709a <assert_print>
    66c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66ca:	4813      	ldr	r0, [pc, #76]	; (6718 <z_abort_timeout+0x80>)
    66cc:	f000 fcde 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    66d0:	4810      	ldr	r0, [pc, #64]	; (6714 <z_abort_timeout+0x7c>)
    66d2:	f7fe fbd9 	bl	4e88 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    66d6:	6823      	ldr	r3, [r4, #0]
    66d8:	b19b      	cbz	r3, 6702 <z_abort_timeout+0x6a>
			remove_timeout(to);
    66da:	4620      	mov	r0, r4
    66dc:	f7ff fefa 	bl	64d4 <remove_timeout>
			ret = 0;
    66e0:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66e2:	480c      	ldr	r0, [pc, #48]	; (6714 <z_abort_timeout+0x7c>)
    66e4:	f7fe fbc0 	bl	4e68 <z_spin_unlock_valid>
    66e8:	b970      	cbnz	r0, 6708 <z_abort_timeout+0x70>
    66ea:	4a0b      	ldr	r2, [pc, #44]	; (6718 <z_abort_timeout+0x80>)
    66ec:	490e      	ldr	r1, [pc, #56]	; (6728 <z_abort_timeout+0x90>)
    66ee:	480c      	ldr	r0, [pc, #48]	; (6720 <z_abort_timeout+0x88>)
    66f0:	23c2      	movs	r3, #194	; 0xc2
    66f2:	f000 fcd2 	bl	709a <assert_print>
    66f6:	4907      	ldr	r1, [pc, #28]	; (6714 <z_abort_timeout+0x7c>)
    66f8:	480c      	ldr	r0, [pc, #48]	; (672c <z_abort_timeout+0x94>)
    66fa:	f000 fcce 	bl	709a <assert_print>
    66fe:	21c2      	movs	r1, #194	; 0xc2
    6700:	e7e3      	b.n	66ca <z_abort_timeout+0x32>
	int ret = -EINVAL;
    6702:	f06f 0415 	mvn.w	r4, #21
    6706:	e7ec      	b.n	66e2 <z_abort_timeout+0x4a>
	__asm__ volatile(
    6708:	f385 8811 	msr	BASEPRI, r5
    670c:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    6710:	4620      	mov	r0, r4
    6712:	bd38      	pop	{r3, r4, r5, pc}
    6714:	20000b3c 	.word	0x20000b3c
    6718:	000080b8 	.word	0x000080b8
    671c:	00008111 	.word	0x00008111
    6720:	00007ea3 	.word	0x00007ea3
    6724:	00008126 	.word	0x00008126
    6728:	000080e5 	.word	0x000080e5
    672c:	000080fc 	.word	0x000080fc

00006730 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    6730:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6732:	f04f 0320 	mov.w	r3, #32
    6736:	f3ef 8511 	mrs	r5, BASEPRI
    673a:	f383 8812 	msr	BASEPRI_MAX, r3
    673e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6742:	4817      	ldr	r0, [pc, #92]	; (67a0 <z_get_next_timeout_expiry+0x70>)
    6744:	f7fe fb82 	bl	4e4c <z_spin_lock_valid>
    6748:	b968      	cbnz	r0, 6766 <z_get_next_timeout_expiry+0x36>
    674a:	4a16      	ldr	r2, [pc, #88]	; (67a4 <z_get_next_timeout_expiry+0x74>)
    674c:	4916      	ldr	r1, [pc, #88]	; (67a8 <z_get_next_timeout_expiry+0x78>)
    674e:	4817      	ldr	r0, [pc, #92]	; (67ac <z_get_next_timeout_expiry+0x7c>)
    6750:	2394      	movs	r3, #148	; 0x94
    6752:	f000 fca2 	bl	709a <assert_print>
    6756:	4912      	ldr	r1, [pc, #72]	; (67a0 <z_get_next_timeout_expiry+0x70>)
    6758:	4815      	ldr	r0, [pc, #84]	; (67b0 <z_get_next_timeout_expiry+0x80>)
    675a:	f000 fc9e 	bl	709a <assert_print>
    675e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6760:	4810      	ldr	r0, [pc, #64]	; (67a4 <z_get_next_timeout_expiry+0x74>)
    6762:	f000 fc93 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    6766:	480e      	ldr	r0, [pc, #56]	; (67a0 <z_get_next_timeout_expiry+0x70>)
    6768:	f7fe fb8e 	bl	4e88 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    676c:	f7ff fe8a 	bl	6484 <next_timeout>
    6770:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6772:	480b      	ldr	r0, [pc, #44]	; (67a0 <z_get_next_timeout_expiry+0x70>)
    6774:	f7fe fb78 	bl	4e68 <z_spin_unlock_valid>
    6778:	b958      	cbnz	r0, 6792 <z_get_next_timeout_expiry+0x62>
    677a:	4a0a      	ldr	r2, [pc, #40]	; (67a4 <z_get_next_timeout_expiry+0x74>)
    677c:	490d      	ldr	r1, [pc, #52]	; (67b4 <z_get_next_timeout_expiry+0x84>)
    677e:	480b      	ldr	r0, [pc, #44]	; (67ac <z_get_next_timeout_expiry+0x7c>)
    6780:	23c2      	movs	r3, #194	; 0xc2
    6782:	f000 fc8a 	bl	709a <assert_print>
    6786:	4906      	ldr	r1, [pc, #24]	; (67a0 <z_get_next_timeout_expiry+0x70>)
    6788:	480b      	ldr	r0, [pc, #44]	; (67b8 <z_get_next_timeout_expiry+0x88>)
    678a:	f000 fc86 	bl	709a <assert_print>
    678e:	21c2      	movs	r1, #194	; 0xc2
    6790:	e7e6      	b.n	6760 <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
    6792:	f385 8811 	msr	BASEPRI, r5
    6796:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    679a:	4620      	mov	r0, r4
    679c:	bd38      	pop	{r3, r4, r5, pc}
    679e:	bf00      	nop
    67a0:	20000b3c 	.word	0x20000b3c
    67a4:	000080b8 	.word	0x000080b8
    67a8:	00008111 	.word	0x00008111
    67ac:	00007ea3 	.word	0x00007ea3
    67b0:	00008126 	.word	0x00008126
    67b4:	000080e5 	.word	0x000080e5
    67b8:	000080fc 	.word	0x000080fc

000067bc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    67bc:	b570      	push	{r4, r5, r6, lr}
    67be:	4604      	mov	r4, r0
    67c0:	460d      	mov	r5, r1
	__asm__ volatile(
    67c2:	f04f 0320 	mov.w	r3, #32
    67c6:	f3ef 8611 	mrs	r6, BASEPRI
    67ca:	f383 8812 	msr	BASEPRI_MAX, r3
    67ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    67d2:	481b      	ldr	r0, [pc, #108]	; (6840 <z_set_timeout_expiry+0x84>)
    67d4:	f7fe fb3a 	bl	4e4c <z_spin_lock_valid>
    67d8:	b968      	cbnz	r0, 67f6 <z_set_timeout_expiry+0x3a>
    67da:	4a1a      	ldr	r2, [pc, #104]	; (6844 <z_set_timeout_expiry+0x88>)
    67dc:	491a      	ldr	r1, [pc, #104]	; (6848 <z_set_timeout_expiry+0x8c>)
    67de:	481b      	ldr	r0, [pc, #108]	; (684c <z_set_timeout_expiry+0x90>)
    67e0:	2394      	movs	r3, #148	; 0x94
    67e2:	f000 fc5a 	bl	709a <assert_print>
    67e6:	4916      	ldr	r1, [pc, #88]	; (6840 <z_set_timeout_expiry+0x84>)
    67e8:	4819      	ldr	r0, [pc, #100]	; (6850 <z_set_timeout_expiry+0x94>)
    67ea:	f000 fc56 	bl	709a <assert_print>
    67ee:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    67f0:	4814      	ldr	r0, [pc, #80]	; (6844 <z_set_timeout_expiry+0x88>)
    67f2:	f000 fc4b 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    67f6:	4812      	ldr	r0, [pc, #72]	; (6840 <z_set_timeout_expiry+0x84>)
    67f8:	f7fe fb46 	bl	4e88 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    67fc:	f7ff fe42 	bl	6484 <next_timeout>
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    6800:	2801      	cmp	r0, #1
    6802:	dd07      	ble.n	6814 <z_set_timeout_expiry+0x58>
    6804:	42a0      	cmp	r0, r4
    6806:	db05      	blt.n	6814 <z_set_timeout_expiry+0x58>
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6808:	42a0      	cmp	r0, r4
    680a:	4629      	mov	r1, r5
    680c:	bfa8      	it	ge
    680e:	4620      	movge	r0, r4
    6810:	f7fc fd10 	bl	3234 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6814:	480a      	ldr	r0, [pc, #40]	; (6840 <z_set_timeout_expiry+0x84>)
    6816:	f7fe fb27 	bl	4e68 <z_spin_unlock_valid>
    681a:	b958      	cbnz	r0, 6834 <z_set_timeout_expiry+0x78>
    681c:	4a09      	ldr	r2, [pc, #36]	; (6844 <z_set_timeout_expiry+0x88>)
    681e:	490d      	ldr	r1, [pc, #52]	; (6854 <z_set_timeout_expiry+0x98>)
    6820:	480a      	ldr	r0, [pc, #40]	; (684c <z_set_timeout_expiry+0x90>)
    6822:	23c2      	movs	r3, #194	; 0xc2
    6824:	f000 fc39 	bl	709a <assert_print>
    6828:	4905      	ldr	r1, [pc, #20]	; (6840 <z_set_timeout_expiry+0x84>)
    682a:	480b      	ldr	r0, [pc, #44]	; (6858 <z_set_timeout_expiry+0x9c>)
    682c:	f000 fc35 	bl	709a <assert_print>
    6830:	21c2      	movs	r1, #194	; 0xc2
    6832:	e7dd      	b.n	67f0 <z_set_timeout_expiry+0x34>
	__asm__ volatile(
    6834:	f386 8811 	msr	BASEPRI, r6
    6838:	f3bf 8f6f 	isb	sy
		}
	}
}
    683c:	bd70      	pop	{r4, r5, r6, pc}
    683e:	bf00      	nop
    6840:	20000b3c 	.word	0x20000b3c
    6844:	000080b8 	.word	0x000080b8
    6848:	00008111 	.word	0x00008111
    684c:	00007ea3 	.word	0x00007ea3
    6850:	00008126 	.word	0x00008126
    6854:	000080e5 	.word	0x000080e5
    6858:	000080fc 	.word	0x000080fc

0000685c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    685c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6860:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6862:	f7ff f883 	bl	596c <z_time_slice>
	__asm__ volatile(
    6866:	f04f 0320 	mov.w	r3, #32
    686a:	f3ef 8711 	mrs	r7, BASEPRI
    686e:	f383 8812 	msr	BASEPRI_MAX, r3
    6872:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6876:	483f      	ldr	r0, [pc, #252]	; (6974 <sys_clock_announce+0x118>)
    6878:	f7fe fae8 	bl	4e4c <z_spin_lock_valid>
    687c:	b968      	cbnz	r0, 689a <sys_clock_announce+0x3e>
    687e:	4a3e      	ldr	r2, [pc, #248]	; (6978 <sys_clock_announce+0x11c>)
    6880:	493e      	ldr	r1, [pc, #248]	; (697c <sys_clock_announce+0x120>)
    6882:	483f      	ldr	r0, [pc, #252]	; (6980 <sys_clock_announce+0x124>)
    6884:	2394      	movs	r3, #148	; 0x94
    6886:	f000 fc08 	bl	709a <assert_print>
    688a:	493a      	ldr	r1, [pc, #232]	; (6974 <sys_clock_announce+0x118>)
    688c:	483d      	ldr	r0, [pc, #244]	; (6984 <sys_clock_announce+0x128>)
    688e:	f000 fc04 	bl	709a <assert_print>
    6892:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6894:	4838      	ldr	r0, [pc, #224]	; (6978 <sys_clock_announce+0x11c>)
    6896:	f000 fbf9 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    689a:	4836      	ldr	r0, [pc, #216]	; (6974 <sys_clock_announce+0x118>)
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    689c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 6988 <sys_clock_announce+0x12c>
	return list->head == list;
    68a0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 698c <sys_clock_announce+0x130>
    68a4:	f7fe faf0 	bl	4e88 <z_spin_lock_set_owner>
    68a8:	f8d9 5000 	ldr.w	r5, [r9]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    68ac:	4a38      	ldr	r2, [pc, #224]	; (6990 <sys_clock_announce+0x134>)
	announce_remaining = ticks;
    68ae:	f8c8 4000 	str.w	r4, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68b2:	454d      	cmp	r5, r9
		curr_tick += dt;
    68b4:	e9d2 3c00 	ldrd	r3, ip, [r2]
    68b8:	ea4f 71e4 	mov.w	r1, r4, asr #31
    68bc:	d00b      	beq.n	68d6 <sys_clock_announce+0x7a>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    68be:	b155      	cbz	r5, 68d6 <sys_clock_announce+0x7a>
    68c0:	e9d5 6004 	ldrd	r6, r0, [r5, #16]
    68c4:	42b4      	cmp	r4, r6
    68c6:	eb71 0e00 	sbcs.w	lr, r1, r0
    68ca:	da1b      	bge.n	6904 <sys_clock_announce+0xa8>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    68cc:	1b36      	subs	r6, r6, r4
    68ce:	eb60 0001 	sbc.w	r0, r0, r1
    68d2:	e9c5 6004 	strd	r6, r0, [r5, #16]
	}

	curr_tick += announce_remaining;
    68d6:	18e3      	adds	r3, r4, r3
    68d8:	eb4c 0101 	adc.w	r1, ip, r1
	announce_remaining = 0;
    68dc:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    68de:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    68e2:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
    68e6:	f7ff fdcd 	bl	6484 <next_timeout>
    68ea:	4621      	mov	r1, r4
    68ec:	f7fc fca2 	bl	3234 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    68f0:	4820      	ldr	r0, [pc, #128]	; (6974 <sys_clock_announce+0x118>)
    68f2:	f7fe fab9 	bl	4e68 <z_spin_unlock_valid>
    68f6:	b1a8      	cbz	r0, 6924 <sys_clock_announce+0xc8>
	__asm__ volatile(
    68f8:	f387 8811 	msr	BASEPRI, r7
    68fc:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    6904:	18f3      	adds	r3, r6, r3
    6906:	eb4c 71e6 	adc.w	r1, ip, r6, asr #31
    690a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    690e:	2200      	movs	r2, #0
    6910:	2300      	movs	r3, #0
		remove_timeout(t);
    6912:	4628      	mov	r0, r5
		t->dticks = 0;
    6914:	e9c5 2304 	strd	r2, r3, [r5, #16]
		remove_timeout(t);
    6918:	f7ff fddc 	bl	64d4 <remove_timeout>
    691c:	4815      	ldr	r0, [pc, #84]	; (6974 <sys_clock_announce+0x118>)
    691e:	f7fe faa3 	bl	4e68 <z_spin_unlock_valid>
    6922:	b958      	cbnz	r0, 693c <sys_clock_announce+0xe0>
    6924:	4a14      	ldr	r2, [pc, #80]	; (6978 <sys_clock_announce+0x11c>)
    6926:	491b      	ldr	r1, [pc, #108]	; (6994 <sys_clock_announce+0x138>)
    6928:	4815      	ldr	r0, [pc, #84]	; (6980 <sys_clock_announce+0x124>)
    692a:	23c2      	movs	r3, #194	; 0xc2
    692c:	f000 fbb5 	bl	709a <assert_print>
    6930:	4910      	ldr	r1, [pc, #64]	; (6974 <sys_clock_announce+0x118>)
    6932:	4819      	ldr	r0, [pc, #100]	; (6998 <sys_clock_announce+0x13c>)
    6934:	f000 fbb1 	bl	709a <assert_print>
    6938:	21c2      	movs	r1, #194	; 0xc2
    693a:	e7ab      	b.n	6894 <sys_clock_announce+0x38>
    693c:	f387 8811 	msr	BASEPRI, r7
    6940:	f3bf 8f6f 	isb	sy
		t->fn(t);
    6944:	68ab      	ldr	r3, [r5, #8]
    6946:	4628      	mov	r0, r5
    6948:	4798      	blx	r3
	__asm__ volatile(
    694a:	f04f 0320 	mov.w	r3, #32
    694e:	f3ef 8711 	mrs	r7, BASEPRI
    6952:	f383 8812 	msr	BASEPRI_MAX, r3
    6956:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    695a:	4806      	ldr	r0, [pc, #24]	; (6974 <sys_clock_announce+0x118>)
    695c:	f7fe fa76 	bl	4e4c <z_spin_lock_valid>
    6960:	2800      	cmp	r0, #0
    6962:	d08c      	beq.n	687e <sys_clock_announce+0x22>
	z_spin_lock_set_owner(l);
    6964:	4803      	ldr	r0, [pc, #12]	; (6974 <sys_clock_announce+0x118>)
    6966:	f7fe fa8f 	bl	4e88 <z_spin_lock_set_owner>
		announce_remaining -= dt;
    696a:	f8d8 4000 	ldr.w	r4, [r8]
    696e:	1ba4      	subs	r4, r4, r6
    6970:	e79a      	b.n	68a8 <sys_clock_announce+0x4c>
    6972:	bf00      	nop
    6974:	20000b3c 	.word	0x20000b3c
    6978:	000080b8 	.word	0x000080b8
    697c:	00008111 	.word	0x00008111
    6980:	00007ea3 	.word	0x00007ea3
    6984:	00008126 	.word	0x00008126
    6988:	20000b38 	.word	0x20000b38
    698c:	20000114 	.word	0x20000114
    6990:	20000410 	.word	0x20000410
    6994:	000080e5 	.word	0x000080e5
    6998:	000080fc 	.word	0x000080fc

0000699c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    699c:	b570      	push	{r4, r5, r6, lr}
    699e:	f04f 0320 	mov.w	r3, #32
    69a2:	f3ef 8611 	mrs	r6, BASEPRI
    69a6:	f383 8812 	msr	BASEPRI_MAX, r3
    69aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69ae:	481a      	ldr	r0, [pc, #104]	; (6a18 <sys_clock_tick_get+0x7c>)
    69b0:	f7fe fa4c 	bl	4e4c <z_spin_lock_valid>
    69b4:	b968      	cbnz	r0, 69d2 <sys_clock_tick_get+0x36>
    69b6:	4a19      	ldr	r2, [pc, #100]	; (6a1c <sys_clock_tick_get+0x80>)
    69b8:	4919      	ldr	r1, [pc, #100]	; (6a20 <sys_clock_tick_get+0x84>)
    69ba:	481a      	ldr	r0, [pc, #104]	; (6a24 <sys_clock_tick_get+0x88>)
    69bc:	2394      	movs	r3, #148	; 0x94
    69be:	f000 fb6c 	bl	709a <assert_print>
    69c2:	4915      	ldr	r1, [pc, #84]	; (6a18 <sys_clock_tick_get+0x7c>)
    69c4:	4818      	ldr	r0, [pc, #96]	; (6a28 <sys_clock_tick_get+0x8c>)
    69c6:	f000 fb68 	bl	709a <assert_print>
    69ca:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69cc:	4813      	ldr	r0, [pc, #76]	; (6a1c <sys_clock_tick_get+0x80>)
    69ce:	f000 fb5d 	bl	708c <assert_post_action>
	z_spin_lock_set_owner(l);
    69d2:	4811      	ldr	r0, [pc, #68]	; (6a18 <sys_clock_tick_get+0x7c>)
    69d4:	f7fe fa58 	bl	4e88 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    69d8:	f7ff fd4a 	bl	6470 <elapsed>
    69dc:	4a13      	ldr	r2, [pc, #76]	; (6a2c <sys_clock_tick_get+0x90>)
    69de:	e9d2 4500 	ldrd	r4, r5, [r2]
    69e2:	1904      	adds	r4, r0, r4
    69e4:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69e8:	480b      	ldr	r0, [pc, #44]	; (6a18 <sys_clock_tick_get+0x7c>)
    69ea:	f7fe fa3d 	bl	4e68 <z_spin_unlock_valid>
    69ee:	b958      	cbnz	r0, 6a08 <sys_clock_tick_get+0x6c>
    69f0:	4a0a      	ldr	r2, [pc, #40]	; (6a1c <sys_clock_tick_get+0x80>)
    69f2:	490f      	ldr	r1, [pc, #60]	; (6a30 <sys_clock_tick_get+0x94>)
    69f4:	480b      	ldr	r0, [pc, #44]	; (6a24 <sys_clock_tick_get+0x88>)
    69f6:	23c2      	movs	r3, #194	; 0xc2
    69f8:	f000 fb4f 	bl	709a <assert_print>
    69fc:	4906      	ldr	r1, [pc, #24]	; (6a18 <sys_clock_tick_get+0x7c>)
    69fe:	480d      	ldr	r0, [pc, #52]	; (6a34 <sys_clock_tick_get+0x98>)
    6a00:	f000 fb4b 	bl	709a <assert_print>
    6a04:	21c2      	movs	r1, #194	; 0xc2
    6a06:	e7e1      	b.n	69cc <sys_clock_tick_get+0x30>
	__asm__ volatile(
    6a08:	f386 8811 	msr	BASEPRI, r6
    6a0c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    6a10:	4620      	mov	r0, r4
    6a12:	4629      	mov	r1, r5
    6a14:	bd70      	pop	{r4, r5, r6, pc}
    6a16:	bf00      	nop
    6a18:	20000b3c 	.word	0x20000b3c
    6a1c:	000080b8 	.word	0x000080b8
    6a20:	00008111 	.word	0x00008111
    6a24:	00007ea3 	.word	0x00007ea3
    6a28:	00008126 	.word	0x00008126
    6a2c:	20000410 	.word	0x20000410
    6a30:	000080e5 	.word	0x000080e5
    6a34:	000080fc 	.word	0x000080fc

00006a38 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    6a38:	4b01      	ldr	r3, [pc, #4]	; (6a40 <k_thread_system_pool_assign+0x8>)
    6a3a:	6703      	str	r3, [r0, #112]	; 0x70
}
    6a3c:	4770      	bx	lr
    6a3e:	bf00      	nop
    6a40:	20000188 	.word	0x20000188

00006a44 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    6a44:	4801      	ldr	r0, [pc, #4]	; (6a4c <boot_banner+0x8>)
    6a46:	f000 ba1b 	b.w	6e80 <printk>
    6a4a:	bf00      	nop
    6a4c:	00008eec 	.word	0x00008eec

00006a50 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    6a50:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6a52:	4c0d      	ldr	r4, [pc, #52]	; (6a88 <statics_init+0x38>)
    6a54:	4d0d      	ldr	r5, [pc, #52]	; (6a8c <statics_init+0x3c>)
    6a56:	42ac      	cmp	r4, r5
    6a58:	d913      	bls.n	6a82 <statics_init+0x32>
    6a5a:	490d      	ldr	r1, [pc, #52]	; (6a90 <statics_init+0x40>)
    6a5c:	4a0d      	ldr	r2, [pc, #52]	; (6a94 <statics_init+0x44>)
    6a5e:	480e      	ldr	r0, [pc, #56]	; (6a98 <statics_init+0x48>)
    6a60:	2318      	movs	r3, #24
    6a62:	f000 fb1a 	bl	709a <assert_print>
    6a66:	480d      	ldr	r0, [pc, #52]	; (6a9c <statics_init+0x4c>)
    6a68:	f000 fb17 	bl	709a <assert_print>
    6a6c:	4809      	ldr	r0, [pc, #36]	; (6a94 <statics_init+0x44>)
    6a6e:	2118      	movs	r1, #24
    6a70:	f000 fb0c 	bl	708c <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    6a74:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    6a78:	4620      	mov	r0, r4
    6a7a:	f000 ff08 	bl	788e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6a7e:	3418      	adds	r4, #24
    6a80:	e7e9      	b.n	6a56 <statics_init+0x6>
    6a82:	d3f7      	bcc.n	6a74 <statics_init+0x24>
		}
	}
	return 0;
}
    6a84:	2000      	movs	r0, #0
    6a86:	bd38      	pop	{r3, r4, r5, pc}
    6a88:	20000188 	.word	0x20000188
    6a8c:	200001a0 	.word	0x200001a0
    6a90:	00008f3c 	.word	0x00008f3c
    6a94:	00008f1a 	.word	0x00008f1a
    6a98:	00007ea3 	.word	0x00007ea3
    6a9c:	00008a73 	.word	0x00008a73

00006aa0 <nrf_cc3xx_platform_init_no_rng>:
    6aa0:	b510      	push	{r4, lr}
    6aa2:	4c0a      	ldr	r4, [pc, #40]	; (6acc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    6aa4:	6823      	ldr	r3, [r4, #0]
    6aa6:	b11b      	cbz	r3, 6ab0 <nrf_cc3xx_platform_init_no_rng+0x10>
    6aa8:	2301      	movs	r3, #1
    6aaa:	6023      	str	r3, [r4, #0]
    6aac:	2000      	movs	r0, #0
    6aae:	bd10      	pop	{r4, pc}
    6ab0:	f000 f8e6 	bl	6c80 <CC_LibInitNoRng>
    6ab4:	2800      	cmp	r0, #0
    6ab6:	d0f7      	beq.n	6aa8 <nrf_cc3xx_platform_init_no_rng+0x8>
    6ab8:	3801      	subs	r0, #1
    6aba:	2806      	cmp	r0, #6
    6abc:	d803      	bhi.n	6ac6 <nrf_cc3xx_platform_init_no_rng+0x26>
    6abe:	4b04      	ldr	r3, [pc, #16]	; (6ad0 <nrf_cc3xx_platform_init_no_rng+0x30>)
    6ac0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6ac4:	bd10      	pop	{r4, pc}
    6ac6:	4803      	ldr	r0, [pc, #12]	; (6ad4 <nrf_cc3xx_platform_init_no_rng+0x34>)
    6ac8:	bd10      	pop	{r4, pc}
    6aca:	bf00      	nop
    6acc:	20000b40 	.word	0x20000b40
    6ad0:	00007d7c 	.word	0x00007d7c
    6ad4:	ffff8ffe 	.word	0xffff8ffe

00006ad8 <nrf_cc3xx_platform_abort>:
    6ad8:	f3bf 8f4f 	dsb	sy
    6adc:	4905      	ldr	r1, [pc, #20]	; (6af4 <nrf_cc3xx_platform_abort+0x1c>)
    6ade:	4b06      	ldr	r3, [pc, #24]	; (6af8 <nrf_cc3xx_platform_abort+0x20>)
    6ae0:	68ca      	ldr	r2, [r1, #12]
    6ae2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6ae6:	4313      	orrs	r3, r2
    6ae8:	60cb      	str	r3, [r1, #12]
    6aea:	f3bf 8f4f 	dsb	sy
    6aee:	bf00      	nop
    6af0:	e7fd      	b.n	6aee <nrf_cc3xx_platform_abort+0x16>
    6af2:	bf00      	nop
    6af4:	e000ed00 	.word	0xe000ed00
    6af8:	05fa0004 	.word	0x05fa0004

00006afc <CC_PalAbort>:
    6afc:	b410      	push	{r4}
    6afe:	4b09      	ldr	r3, [pc, #36]	; (6b24 <CC_PalAbort+0x28>)
    6b00:	4909      	ldr	r1, [pc, #36]	; (6b28 <CC_PalAbort+0x2c>)
    6b02:	4c0a      	ldr	r4, [pc, #40]	; (6b2c <CC_PalAbort+0x30>)
    6b04:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    6b08:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    6b0c:	6849      	ldr	r1, [r1, #4]
    6b0e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    6b12:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    6b16:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    6b1a:	2300      	movs	r3, #0
    6b1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    6b20:	bc10      	pop	{r4}
    6b22:	4708      	bx	r1
    6b24:	5002b000 	.word	0x5002b000
    6b28:	2000011c 	.word	0x2000011c
    6b2c:	5002a000 	.word	0x5002a000

00006b30 <nrf_cc3xx_platform_set_abort>:
    6b30:	e9d0 1200 	ldrd	r1, r2, [r0]
    6b34:	4b01      	ldr	r3, [pc, #4]	; (6b3c <nrf_cc3xx_platform_set_abort+0xc>)
    6b36:	e9c3 1200 	strd	r1, r2, [r3]
    6b3a:	4770      	bx	lr
    6b3c:	2000011c 	.word	0x2000011c

00006b40 <mutex_free>:
    6b40:	b510      	push	{r4, lr}
    6b42:	4604      	mov	r4, r0
    6b44:	b150      	cbz	r0, 6b5c <mutex_free+0x1c>
    6b46:	6863      	ldr	r3, [r4, #4]
    6b48:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6b4c:	d005      	beq.n	6b5a <mutex_free+0x1a>
    6b4e:	4a06      	ldr	r2, [pc, #24]	; (6b68 <mutex_free+0x28>)
    6b50:	4293      	cmp	r3, r2
    6b52:	d002      	beq.n	6b5a <mutex_free+0x1a>
    6b54:	2300      	movs	r3, #0
    6b56:	6023      	str	r3, [r4, #0]
    6b58:	6062      	str	r2, [r4, #4]
    6b5a:	bd10      	pop	{r4, pc}
    6b5c:	4b03      	ldr	r3, [pc, #12]	; (6b6c <mutex_free+0x2c>)
    6b5e:	4804      	ldr	r0, [pc, #16]	; (6b70 <mutex_free+0x30>)
    6b60:	685b      	ldr	r3, [r3, #4]
    6b62:	4798      	blx	r3
    6b64:	e7ef      	b.n	6b46 <mutex_free+0x6>
    6b66:	bf00      	nop
    6b68:	a95c5f2c 	.word	0xa95c5f2c
    6b6c:	2000011c 	.word	0x2000011c
    6b70:	00007d98 	.word	0x00007d98

00006b74 <mutex_lock>:
    6b74:	b1c8      	cbz	r0, 6baa <mutex_lock+0x36>
    6b76:	6843      	ldr	r3, [r0, #4]
    6b78:	4a0d      	ldr	r2, [pc, #52]	; (6bb0 <mutex_lock+0x3c>)
    6b7a:	4293      	cmp	r3, r2
    6b7c:	d013      	beq.n	6ba6 <mutex_lock+0x32>
    6b7e:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6b82:	d00e      	beq.n	6ba2 <mutex_lock+0x2e>
    6b84:	2301      	movs	r3, #1
    6b86:	e850 2f00 	ldrex	r2, [r0]
    6b8a:	4619      	mov	r1, r3
    6b8c:	e840 1c00 	strex	ip, r1, [r0]
    6b90:	f09c 0f00 	teq	ip, #0
    6b94:	d1f7      	bne.n	6b86 <mutex_lock+0x12>
    6b96:	2a01      	cmp	r2, #1
    6b98:	d0f5      	beq.n	6b86 <mutex_lock+0x12>
    6b9a:	f3bf 8f5f 	dmb	sy
    6b9e:	2000      	movs	r0, #0
    6ba0:	4770      	bx	lr
    6ba2:	4804      	ldr	r0, [pc, #16]	; (6bb4 <mutex_lock+0x40>)
    6ba4:	4770      	bx	lr
    6ba6:	4804      	ldr	r0, [pc, #16]	; (6bb8 <mutex_lock+0x44>)
    6ba8:	4770      	bx	lr
    6baa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6bae:	4770      	bx	lr
    6bb0:	a95c5f2c 	.word	0xa95c5f2c
    6bb4:	ffff8fe9 	.word	0xffff8fe9
    6bb8:	ffff8fea 	.word	0xffff8fea

00006bbc <mutex_unlock>:
    6bbc:	b180      	cbz	r0, 6be0 <mutex_unlock+0x24>
    6bbe:	6843      	ldr	r3, [r0, #4]
    6bc0:	4a09      	ldr	r2, [pc, #36]	; (6be8 <mutex_unlock+0x2c>)
    6bc2:	4293      	cmp	r3, r2
    6bc4:	d00a      	beq.n	6bdc <mutex_unlock+0x20>
    6bc6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6bca:	d005      	beq.n	6bd8 <mutex_unlock+0x1c>
    6bcc:	f3bf 8f5f 	dmb	sy
    6bd0:	2300      	movs	r3, #0
    6bd2:	6003      	str	r3, [r0, #0]
    6bd4:	4618      	mov	r0, r3
    6bd6:	4770      	bx	lr
    6bd8:	4804      	ldr	r0, [pc, #16]	; (6bec <mutex_unlock+0x30>)
    6bda:	4770      	bx	lr
    6bdc:	4804      	ldr	r0, [pc, #16]	; (6bf0 <mutex_unlock+0x34>)
    6bde:	4770      	bx	lr
    6be0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    6be4:	4770      	bx	lr
    6be6:	bf00      	nop
    6be8:	a95c5f2c 	.word	0xa95c5f2c
    6bec:	ffff8fe9 	.word	0xffff8fe9
    6bf0:	ffff8fea 	.word	0xffff8fea

00006bf4 <mutex_init>:
    6bf4:	b510      	push	{r4, lr}
    6bf6:	4604      	mov	r4, r0
    6bf8:	b120      	cbz	r0, 6c04 <mutex_init+0x10>
    6bfa:	4b04      	ldr	r3, [pc, #16]	; (6c0c <mutex_init+0x18>)
    6bfc:	6063      	str	r3, [r4, #4]
    6bfe:	2200      	movs	r2, #0
    6c00:	6022      	str	r2, [r4, #0]
    6c02:	bd10      	pop	{r4, pc}
    6c04:	4802      	ldr	r0, [pc, #8]	; (6c10 <mutex_init+0x1c>)
    6c06:	f7ff ff79 	bl	6afc <CC_PalAbort>
    6c0a:	e7f6      	b.n	6bfa <mutex_init+0x6>
    6c0c:	3a00003a 	.word	0x3a00003a
    6c10:	00007dc0 	.word	0x00007dc0

00006c14 <nrf_cc3xx_platform_set_mutexes>:
    6c14:	b570      	push	{r4, r5, r6, lr}
    6c16:	e9d0 2300 	ldrd	r2, r3, [r0]
    6c1a:	4c15      	ldr	r4, [pc, #84]	; (6c70 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    6c1c:	4d15      	ldr	r5, [pc, #84]	; (6c74 <nrf_cc3xx_platform_set_mutexes+0x60>)
    6c1e:	6063      	str	r3, [r4, #4]
    6c20:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    6c24:	e9c4 3002 	strd	r3, r0, [r4, #8]
    6c28:	6022      	str	r2, [r4, #0]
    6c2a:	4b13      	ldr	r3, [pc, #76]	; (6c78 <nrf_cc3xx_platform_set_mutexes+0x64>)
    6c2c:	6808      	ldr	r0, [r1, #0]
    6c2e:	6018      	str	r0, [r3, #0]
    6c30:	6848      	ldr	r0, [r1, #4]
    6c32:	6058      	str	r0, [r3, #4]
    6c34:	6888      	ldr	r0, [r1, #8]
    6c36:	6098      	str	r0, [r3, #8]
    6c38:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    6c3c:	60d8      	str	r0, [r3, #12]
    6c3e:	6119      	str	r1, [r3, #16]
    6c40:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    6c44:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    6c48:	d010      	beq.n	6c6c <nrf_cc3xx_platform_set_mutexes+0x58>
    6c4a:	490c      	ldr	r1, [pc, #48]	; (6c7c <nrf_cc3xx_platform_set_mutexes+0x68>)
    6c4c:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    6c50:	2300      	movs	r3, #0
    6c52:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    6c56:	f505 708a 	add.w	r0, r5, #276	; 0x114
    6c5a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    6c5e:	4790      	blx	r2
    6c60:	6823      	ldr	r3, [r4, #0]
    6c62:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    6c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6c6a:	4718      	bx	r3
    6c6c:	bd70      	pop	{r4, r5, r6, pc}
    6c6e:	bf00      	nop
    6c70:	2000012c 	.word	0x2000012c
    6c74:	20000b58 	.word	0x20000b58
    6c78:	2000013c 	.word	0x2000013c
    6c7c:	a95c5f2c 	.word	0xa95c5f2c

00006c80 <CC_LibInitNoRng>:
    6c80:	b538      	push	{r3, r4, r5, lr}
    6c82:	f000 f82f 	bl	6ce4 <CC_HalInit>
    6c86:	b120      	cbz	r0, 6c92 <CC_LibInitNoRng+0x12>
    6c88:	2403      	movs	r4, #3
    6c8a:	f000 f863 	bl	6d54 <CC_PalTerminate>
    6c8e:	4620      	mov	r0, r4
    6c90:	bd38      	pop	{r3, r4, r5, pc}
    6c92:	f000 f831 	bl	6cf8 <CC_PalInit>
    6c96:	b998      	cbnz	r0, 6cc0 <CC_LibInitNoRng+0x40>
    6c98:	f000 f8ac 	bl	6df4 <CC_PalPowerSaveModeSelect>
    6c9c:	b998      	cbnz	r0, 6cc6 <CC_LibInitNoRng+0x46>
    6c9e:	4d0f      	ldr	r5, [pc, #60]	; (6cdc <CC_LibInitNoRng+0x5c>)
    6ca0:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    6ca4:	0e1b      	lsrs	r3, r3, #24
    6ca6:	2bf0      	cmp	r3, #240	; 0xf0
    6ca8:	d108      	bne.n	6cbc <CC_LibInitNoRng+0x3c>
    6caa:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    6cae:	4b0c      	ldr	r3, [pc, #48]	; (6ce0 <CC_LibInitNoRng+0x60>)
    6cb0:	429a      	cmp	r2, r3
    6cb2:	d00a      	beq.n	6cca <CC_LibInitNoRng+0x4a>
    6cb4:	2407      	movs	r4, #7
    6cb6:	f000 f817 	bl	6ce8 <CC_HalTerminate>
    6cba:	e7e6      	b.n	6c8a <CC_LibInitNoRng+0xa>
    6cbc:	2406      	movs	r4, #6
    6cbe:	e7fa      	b.n	6cb6 <CC_LibInitNoRng+0x36>
    6cc0:	2404      	movs	r4, #4
    6cc2:	4620      	mov	r0, r4
    6cc4:	bd38      	pop	{r3, r4, r5, pc}
    6cc6:	2400      	movs	r4, #0
    6cc8:	e7f5      	b.n	6cb6 <CC_LibInitNoRng+0x36>
    6cca:	2001      	movs	r0, #1
    6ccc:	f000 f892 	bl	6df4 <CC_PalPowerSaveModeSelect>
    6cd0:	4604      	mov	r4, r0
    6cd2:	2800      	cmp	r0, #0
    6cd4:	d1f7      	bne.n	6cc6 <CC_LibInitNoRng+0x46>
    6cd6:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    6cda:	e7d8      	b.n	6c8e <CC_LibInitNoRng+0xe>
    6cdc:	5002b000 	.word	0x5002b000
    6ce0:	20e00000 	.word	0x20e00000

00006ce4 <CC_HalInit>:
    6ce4:	2000      	movs	r0, #0
    6ce6:	4770      	bx	lr

00006ce8 <CC_HalTerminate>:
    6ce8:	2000      	movs	r0, #0
    6cea:	4770      	bx	lr

00006cec <CC_HalMaskInterrupt>:
    6cec:	4b01      	ldr	r3, [pc, #4]	; (6cf4 <CC_HalMaskInterrupt+0x8>)
    6cee:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    6cf2:	4770      	bx	lr
    6cf4:	5002b000 	.word	0x5002b000

00006cf8 <CC_PalInit>:
    6cf8:	b510      	push	{r4, lr}
    6cfa:	4811      	ldr	r0, [pc, #68]	; (6d40 <CC_PalInit+0x48>)
    6cfc:	f000 f848 	bl	6d90 <CC_PalMutexCreate>
    6d00:	b100      	cbz	r0, 6d04 <CC_PalInit+0xc>
    6d02:	bd10      	pop	{r4, pc}
    6d04:	480f      	ldr	r0, [pc, #60]	; (6d44 <CC_PalInit+0x4c>)
    6d06:	f000 f843 	bl	6d90 <CC_PalMutexCreate>
    6d0a:	2800      	cmp	r0, #0
    6d0c:	d1f9      	bne.n	6d02 <CC_PalInit+0xa>
    6d0e:	4c0e      	ldr	r4, [pc, #56]	; (6d48 <CC_PalInit+0x50>)
    6d10:	4620      	mov	r0, r4
    6d12:	f000 f83d 	bl	6d90 <CC_PalMutexCreate>
    6d16:	2800      	cmp	r0, #0
    6d18:	d1f3      	bne.n	6d02 <CC_PalInit+0xa>
    6d1a:	4b0c      	ldr	r3, [pc, #48]	; (6d4c <CC_PalInit+0x54>)
    6d1c:	480c      	ldr	r0, [pc, #48]	; (6d50 <CC_PalInit+0x58>)
    6d1e:	601c      	str	r4, [r3, #0]
    6d20:	f000 f836 	bl	6d90 <CC_PalMutexCreate>
    6d24:	4601      	mov	r1, r0
    6d26:	2800      	cmp	r0, #0
    6d28:	d1eb      	bne.n	6d02 <CC_PalInit+0xa>
    6d2a:	f000 f82d 	bl	6d88 <CC_PalDmaInit>
    6d2e:	4604      	mov	r4, r0
    6d30:	b108      	cbz	r0, 6d36 <CC_PalInit+0x3e>
    6d32:	4620      	mov	r0, r4
    6d34:	bd10      	pop	{r4, pc}
    6d36:	f000 f83f 	bl	6db8 <CC_PalPowerSaveModeInit>
    6d3a:	4620      	mov	r0, r4
    6d3c:	e7fa      	b.n	6d34 <CC_PalInit+0x3c>
    6d3e:	bf00      	nop
    6d40:	20000174 	.word	0x20000174
    6d44:	20000168 	.word	0x20000168
    6d48:	20000170 	.word	0x20000170
    6d4c:	20000178 	.word	0x20000178
    6d50:	2000016c 	.word	0x2000016c

00006d54 <CC_PalTerminate>:
    6d54:	b508      	push	{r3, lr}
    6d56:	4808      	ldr	r0, [pc, #32]	; (6d78 <CC_PalTerminate+0x24>)
    6d58:	f000 f824 	bl	6da4 <CC_PalMutexDestroy>
    6d5c:	4807      	ldr	r0, [pc, #28]	; (6d7c <CC_PalTerminate+0x28>)
    6d5e:	f000 f821 	bl	6da4 <CC_PalMutexDestroy>
    6d62:	4807      	ldr	r0, [pc, #28]	; (6d80 <CC_PalTerminate+0x2c>)
    6d64:	f000 f81e 	bl	6da4 <CC_PalMutexDestroy>
    6d68:	4806      	ldr	r0, [pc, #24]	; (6d84 <CC_PalTerminate+0x30>)
    6d6a:	f000 f81b 	bl	6da4 <CC_PalMutexDestroy>
    6d6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6d72:	f000 b80b 	b.w	6d8c <CC_PalDmaTerminate>
    6d76:	bf00      	nop
    6d78:	20000174 	.word	0x20000174
    6d7c:	20000168 	.word	0x20000168
    6d80:	20000170 	.word	0x20000170
    6d84:	2000016c 	.word	0x2000016c

00006d88 <CC_PalDmaInit>:
    6d88:	2000      	movs	r0, #0
    6d8a:	4770      	bx	lr

00006d8c <CC_PalDmaTerminate>:
    6d8c:	4770      	bx	lr
    6d8e:	bf00      	nop

00006d90 <CC_PalMutexCreate>:
    6d90:	b508      	push	{r3, lr}
    6d92:	4b03      	ldr	r3, [pc, #12]	; (6da0 <CC_PalMutexCreate+0x10>)
    6d94:	6802      	ldr	r2, [r0, #0]
    6d96:	681b      	ldr	r3, [r3, #0]
    6d98:	6810      	ldr	r0, [r2, #0]
    6d9a:	4798      	blx	r3
    6d9c:	2000      	movs	r0, #0
    6d9e:	bd08      	pop	{r3, pc}
    6da0:	2000012c 	.word	0x2000012c

00006da4 <CC_PalMutexDestroy>:
    6da4:	b508      	push	{r3, lr}
    6da6:	4b03      	ldr	r3, [pc, #12]	; (6db4 <CC_PalMutexDestroy+0x10>)
    6da8:	6802      	ldr	r2, [r0, #0]
    6daa:	685b      	ldr	r3, [r3, #4]
    6dac:	6810      	ldr	r0, [r2, #0]
    6dae:	4798      	blx	r3
    6db0:	2000      	movs	r0, #0
    6db2:	bd08      	pop	{r3, pc}
    6db4:	2000012c 	.word	0x2000012c

00006db8 <CC_PalPowerSaveModeInit>:
    6db8:	b570      	push	{r4, r5, r6, lr}
    6dba:	4c09      	ldr	r4, [pc, #36]	; (6de0 <CC_PalPowerSaveModeInit+0x28>)
    6dbc:	4d09      	ldr	r5, [pc, #36]	; (6de4 <CC_PalPowerSaveModeInit+0x2c>)
    6dbe:	6920      	ldr	r0, [r4, #16]
    6dc0:	68ab      	ldr	r3, [r5, #8]
    6dc2:	4798      	blx	r3
    6dc4:	b118      	cbz	r0, 6dce <CC_PalPowerSaveModeInit+0x16>
    6dc6:	4b08      	ldr	r3, [pc, #32]	; (6de8 <CC_PalPowerSaveModeInit+0x30>)
    6dc8:	4808      	ldr	r0, [pc, #32]	; (6dec <CC_PalPowerSaveModeInit+0x34>)
    6dca:	685b      	ldr	r3, [r3, #4]
    6dcc:	4798      	blx	r3
    6dce:	4a08      	ldr	r2, [pc, #32]	; (6df0 <CC_PalPowerSaveModeInit+0x38>)
    6dd0:	68eb      	ldr	r3, [r5, #12]
    6dd2:	6920      	ldr	r0, [r4, #16]
    6dd4:	2100      	movs	r1, #0
    6dd6:	6011      	str	r1, [r2, #0]
    6dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ddc:	4718      	bx	r3
    6dde:	bf00      	nop
    6de0:	2000013c 	.word	0x2000013c
    6de4:	2000012c 	.word	0x2000012c
    6de8:	2000011c 	.word	0x2000011c
    6dec:	00007de4 	.word	0x00007de4
    6df0:	20000b54 	.word	0x20000b54

00006df4 <CC_PalPowerSaveModeSelect>:
    6df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6df6:	4d1a      	ldr	r5, [pc, #104]	; (6e60 <CC_PalPowerSaveModeSelect+0x6c>)
    6df8:	4e1a      	ldr	r6, [pc, #104]	; (6e64 <CC_PalPowerSaveModeSelect+0x70>)
    6dfa:	4604      	mov	r4, r0
    6dfc:	68b2      	ldr	r2, [r6, #8]
    6dfe:	6928      	ldr	r0, [r5, #16]
    6e00:	4790      	blx	r2
    6e02:	b9e8      	cbnz	r0, 6e40 <CC_PalPowerSaveModeSelect+0x4c>
    6e04:	4f18      	ldr	r7, [pc, #96]	; (6e68 <CC_PalPowerSaveModeSelect+0x74>)
    6e06:	683b      	ldr	r3, [r7, #0]
    6e08:	b14c      	cbz	r4, 6e1e <CC_PalPowerSaveModeSelect+0x2a>
    6e0a:	b1a3      	cbz	r3, 6e36 <CC_PalPowerSaveModeSelect+0x42>
    6e0c:	2b01      	cmp	r3, #1
    6e0e:	d019      	beq.n	6e44 <CC_PalPowerSaveModeSelect+0x50>
    6e10:	3b01      	subs	r3, #1
    6e12:	603b      	str	r3, [r7, #0]
    6e14:	6928      	ldr	r0, [r5, #16]
    6e16:	68f3      	ldr	r3, [r6, #12]
    6e18:	4798      	blx	r3
    6e1a:	2000      	movs	r0, #0
    6e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e1e:	b943      	cbnz	r3, 6e32 <CC_PalPowerSaveModeSelect+0x3e>
    6e20:	4a12      	ldr	r2, [pc, #72]	; (6e6c <CC_PalPowerSaveModeSelect+0x78>)
    6e22:	2101      	movs	r1, #1
    6e24:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    6e28:	4911      	ldr	r1, [pc, #68]	; (6e70 <CC_PalPowerSaveModeSelect+0x7c>)
    6e2a:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    6e2e:	2a00      	cmp	r2, #0
    6e30:	d1fb      	bne.n	6e2a <CC_PalPowerSaveModeSelect+0x36>
    6e32:	3301      	adds	r3, #1
    6e34:	603b      	str	r3, [r7, #0]
    6e36:	68f3      	ldr	r3, [r6, #12]
    6e38:	6928      	ldr	r0, [r5, #16]
    6e3a:	4798      	blx	r3
    6e3c:	2000      	movs	r0, #0
    6e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e40:	480c      	ldr	r0, [pc, #48]	; (6e74 <CC_PalPowerSaveModeSelect+0x80>)
    6e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e44:	4a0a      	ldr	r2, [pc, #40]	; (6e70 <CC_PalPowerSaveModeSelect+0x7c>)
    6e46:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6e4a:	2b00      	cmp	r3, #0
    6e4c:	d1fb      	bne.n	6e46 <CC_PalPowerSaveModeSelect+0x52>
    6e4e:	4a07      	ldr	r2, [pc, #28]	; (6e6c <CC_PalPowerSaveModeSelect+0x78>)
    6e50:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    6e54:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6e58:	f7ff ff48 	bl	6cec <CC_HalMaskInterrupt>
    6e5c:	683b      	ldr	r3, [r7, #0]
    6e5e:	e7d7      	b.n	6e10 <CC_PalPowerSaveModeSelect+0x1c>
    6e60:	2000013c 	.word	0x2000013c
    6e64:	2000012c 	.word	0x2000012c
    6e68:	20000b54 	.word	0x20000b54
    6e6c:	5002a000 	.word	0x5002a000
    6e70:	5002b000 	.word	0x5002b000
    6e74:	ffff8fe9 	.word	0xffff8fe9

00006e78 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6e78:	4770      	bx	lr

00006e7a <task_Buttons>:
}
    6e7a:	4770      	bx	lr

00006e7c <arch_printk_char_out>:
}
    6e7c:	2000      	movs	r0, #0
    6e7e:	4770      	bx	lr

00006e80 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    6e80:	b40f      	push	{r0, r1, r2, r3}
    6e82:	b507      	push	{r0, r1, r2, lr}
    6e84:	a904      	add	r1, sp, #16
    6e86:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    6e8a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    6e8c:	f7f9 fb64 	bl	558 <vprintk>

	va_end(ap);
}
    6e90:	b003      	add	sp, #12
    6e92:	f85d eb04 	ldr.w	lr, [sp], #4
    6e96:	b004      	add	sp, #16
    6e98:	4770      	bx	lr

00006e9a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6e9a:	4604      	mov	r4, r0
    6e9c:	b508      	push	{r3, lr}
    6e9e:	4608      	mov	r0, r1
    6ea0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6ea2:	461a      	mov	r2, r3
    6ea4:	47a0      	blx	r4
	return z_impl_z_current_get();
    6ea6:	f7ff f9fb 	bl	62a0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6eaa:	f7fb f825 	bl	1ef8 <z_impl_k_thread_abort>

00006eae <chunk_size>:
		return ((uint16_t *)cmem)[f];
    6eae:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    6eb2:	8840      	ldrh	r0, [r0, #2]
}
    6eb4:	0840      	lsrs	r0, r0, #1
    6eb6:	4770      	bx	lr

00006eb8 <free_list_add>:
{
    6eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eba:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    6ebc:	f7ff fff7 	bl	6eae <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    6ec0:	fab0 f080 	clz	r0, r0
    6ec4:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    6ec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    6ecc:	00ca      	lsls	r2, r1, #3
    6ece:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    6ed2:	1d17      	adds	r7, r2, #4
{
    6ed4:	460c      	mov	r4, r1
    6ed6:	3206      	adds	r2, #6
    6ed8:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    6eda:	b956      	cbnz	r6, 6ef2 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    6edc:	2101      	movs	r1, #1
    6ede:	fa01 f000 	lsl.w	r0, r1, r0
    6ee2:	68d9      	ldr	r1, [r3, #12]
    6ee4:	4301      	orrs	r1, r0
    6ee6:	60d9      	str	r1, [r3, #12]
		b->next = c;
    6ee8:	f8cc 4010 	str.w	r4, [ip, #16]
    6eec:	53dd      	strh	r5, [r3, r7]
    6eee:	529d      	strh	r5, [r3, r2]
}
    6ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    6ef2:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    6ef4:	3104      	adds	r1, #4
    6ef6:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    6ef8:	53d8      	strh	r0, [r3, r7]
    6efa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6efe:	529e      	strh	r6, [r3, r2]
    6f00:	80c5      	strh	r5, [r0, #6]
    6f02:	525d      	strh	r5, [r3, r1]
    6f04:	e7f4      	b.n	6ef0 <free_list_add+0x38>

00006f06 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    6f06:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    6f08:	f013 0307 	ands.w	r3, r3, #7
    6f0c:	d105      	bne.n	6f1a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    6f0e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    6f10:	2b00      	cmp	r3, #0
    6f12:	bf0c      	ite	eq
    6f14:	2000      	moveq	r0, #0
    6f16:	2003      	movne	r0, #3
    6f18:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6f1a:	2b02      	cmp	r3, #2
    6f1c:	d105      	bne.n	6f2a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    6f1e:	8bc0      	ldrh	r0, [r0, #30]
    6f20:	fab0 f080 	clz	r0, r0
    6f24:	0940      	lsrs	r0, r0, #5
    6f26:	0080      	lsls	r0, r0, #2
    6f28:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6f2a:	2b01      	cmp	r3, #1
    6f2c:	d105      	bne.n	6f3a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    6f2e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    6f30:	2b00      	cmp	r3, #0
    6f32:	bf0c      	ite	eq
    6f34:	2000      	moveq	r0, #0
    6f36:	2005      	movne	r0, #5
    6f38:	4770      	bx	lr
	int evt = EVT_NOP;
    6f3a:	2000      	movs	r0, #0
}
    6f3c:	4770      	bx	lr

00006f3e <validate_args>:
{
    6f3e:	b510      	push	{r4, lr}
    6f40:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6f42:	b100      	cbz	r0, 6f46 <validate_args+0x8>
    6f44:	b911      	cbnz	r1, 6f4c <validate_args+0xe>
		return -EINVAL;
    6f46:	f06f 0015 	mvn.w	r0, #21
}
    6f4a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6f4c:	1d08      	adds	r0, r1, #4
    6f4e:	f000 f82f 	bl	6fb0 <sys_notify_validate>
	if ((rv == 0)
    6f52:	2800      	cmp	r0, #0
    6f54:	d1f9      	bne.n	6f4a <validate_args+0xc>
	    && ((cli->notify.flags
    6f56:	68a3      	ldr	r3, [r4, #8]
    6f58:	2b03      	cmp	r3, #3
    6f5a:	d9f6      	bls.n	6f4a <validate_args+0xc>
    6f5c:	e7f3      	b.n	6f46 <validate_args+0x8>

00006f5e <notify_one>:
{
    6f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f62:	460d      	mov	r5, r1
    6f64:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6f66:	4619      	mov	r1, r3
    6f68:	1d28      	adds	r0, r5, #4
{
    6f6a:	4690      	mov	r8, r2
    6f6c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6f6e:	f7f9 fe2b 	bl	bc8 <sys_notify_finalize>
	if (cb) {
    6f72:	4604      	mov	r4, r0
    6f74:	b138      	cbz	r0, 6f86 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6f76:	4633      	mov	r3, r6
    6f78:	4642      	mov	r2, r8
    6f7a:	4629      	mov	r1, r5
    6f7c:	4638      	mov	r0, r7
    6f7e:	46a4      	mov	ip, r4
}
    6f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6f84:	4760      	bx	ip
}
    6f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006f8a <onoff_manager_init>:
{
    6f8a:	b538      	push	{r3, r4, r5, lr}
    6f8c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6f8e:	4605      	mov	r5, r0
    6f90:	b158      	cbz	r0, 6faa <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6f92:	b151      	cbz	r1, 6faa <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6f94:	680b      	ldr	r3, [r1, #0]
    6f96:	b143      	cbz	r3, 6faa <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6f98:	684b      	ldr	r3, [r1, #4]
    6f9a:	b133      	cbz	r3, 6faa <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6f9c:	2220      	movs	r2, #32
    6f9e:	2100      	movs	r1, #0
    6fa0:	f000 f8c3 	bl	712a <memset>
    6fa4:	612c      	str	r4, [r5, #16]
	return 0;
    6fa6:	2000      	movs	r0, #0
}
    6fa8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6faa:	f06f 0015 	mvn.w	r0, #21
    6fae:	e7fb      	b.n	6fa8 <onoff_manager_init+0x1e>

00006fb0 <sys_notify_validate>:
	if (notify == NULL) {
    6fb0:	4603      	mov	r3, r0
    6fb2:	b158      	cbz	r0, 6fcc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6fb4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6fb6:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    6fba:	2a01      	cmp	r2, #1
    6fbc:	d003      	beq.n	6fc6 <sys_notify_validate+0x16>
    6fbe:	2a03      	cmp	r2, #3
    6fc0:	d104      	bne.n	6fcc <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    6fc2:	6802      	ldr	r2, [r0, #0]
    6fc4:	b112      	cbz	r2, 6fcc <sys_notify_validate+0x1c>
		notify->result = 0;
    6fc6:	2000      	movs	r0, #0
    6fc8:	6098      	str	r0, [r3, #8]
    6fca:	4770      	bx	lr
    6fcc:	f06f 0015 	mvn.w	r0, #21
}
    6fd0:	4770      	bx	lr

00006fd2 <encode_uint>:
{
    6fd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fd6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6fd8:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6fda:	2b6f      	cmp	r3, #111	; 0x6f
{
    6fdc:	4680      	mov	r8, r0
    6fde:	460f      	mov	r7, r1
    6fe0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6fe2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6fe6:	d029      	beq.n	703c <encode_uint+0x6a>
    6fe8:	d824      	bhi.n	7034 <encode_uint+0x62>
		return 10;
    6fea:	2b58      	cmp	r3, #88	; 0x58
    6fec:	bf0c      	ite	eq
    6fee:	2610      	moveq	r6, #16
    6ff0:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6ff2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6ff6:	4632      	mov	r2, r6
    6ff8:	2300      	movs	r3, #0
    6ffa:	4640      	mov	r0, r8
    6ffc:	4639      	mov	r1, r7
    6ffe:	f7f9 f87f 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7002:	2a09      	cmp	r2, #9
    7004:	b2d4      	uxtb	r4, r2
    7006:	d81e      	bhi.n	7046 <encode_uint+0x74>
    7008:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    700a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    700c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    700e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7012:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7016:	d301      	bcc.n	701c <encode_uint+0x4a>
    7018:	45d1      	cmp	r9, sl
    701a:	d811      	bhi.n	7040 <encode_uint+0x6e>
	if (conv->flag_hash) {
    701c:	782b      	ldrb	r3, [r5, #0]
    701e:	069b      	lsls	r3, r3, #26
    7020:	d505      	bpl.n	702e <encode_uint+0x5c>
		if (radix == 8) {
    7022:	2e08      	cmp	r6, #8
    7024:	d115      	bne.n	7052 <encode_uint+0x80>
			conv->altform_0 = true;
    7026:	78ab      	ldrb	r3, [r5, #2]
    7028:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    702c:	70ab      	strb	r3, [r5, #2]
}
    702e:	4648      	mov	r0, r9
    7030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7034:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    7038:	2b70      	cmp	r3, #112	; 0x70
    703a:	e7d7      	b.n	6fec <encode_uint+0x1a>
	switch (specifier) {
    703c:	2608      	movs	r6, #8
    703e:	e7d8      	b.n	6ff2 <encode_uint+0x20>
		value /= radix;
    7040:	4680      	mov	r8, r0
    7042:	460f      	mov	r7, r1
    7044:	e7d7      	b.n	6ff6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7046:	f1bb 0f19 	cmp.w	fp, #25
    704a:	bf94      	ite	ls
    704c:	3437      	addls	r4, #55	; 0x37
    704e:	3457      	addhi	r4, #87	; 0x57
    7050:	e7db      	b.n	700a <encode_uint+0x38>
		} else if (radix == 16) {
    7052:	2e10      	cmp	r6, #16
    7054:	d1eb      	bne.n	702e <encode_uint+0x5c>
			conv->altform_0c = true;
    7056:	78ab      	ldrb	r3, [r5, #2]
    7058:	f043 0310 	orr.w	r3, r3, #16
    705c:	e7e6      	b.n	702c <encode_uint+0x5a>

0000705e <outs>:
{
    705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7062:	4607      	mov	r7, r0
    7064:	4688      	mov	r8, r1
    7066:	4615      	mov	r5, r2
    7068:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    706a:	4614      	mov	r4, r2
    706c:	42b4      	cmp	r4, r6
    706e:	d305      	bcc.n	707c <outs+0x1e>
    7070:	b10e      	cbz	r6, 7076 <outs+0x18>
	return (int)count;
    7072:	1b60      	subs	r0, r4, r5
    7074:	e008      	b.n	7088 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7076:	7823      	ldrb	r3, [r4, #0]
    7078:	2b00      	cmp	r3, #0
    707a:	d0fa      	beq.n	7072 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    707c:	f814 0b01 	ldrb.w	r0, [r4], #1
    7080:	4641      	mov	r1, r8
    7082:	47b8      	blx	r7
		if (rc < 0) {
    7084:	2800      	cmp	r0, #0
    7086:	daf1      	bge.n	706c <outs+0xe>
}
    7088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000708c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    708c:	4040      	eors	r0, r0
    708e:	f380 8811 	msr	BASEPRI, r0
    7092:	f04f 0004 	mov.w	r0, #4
    7096:	df02      	svc	2
}
    7098:	4770      	bx	lr

0000709a <assert_print>:

void assert_print(const char *fmt, ...)
{
    709a:	b40f      	push	{r0, r1, r2, r3}
    709c:	b507      	push	{r0, r1, r2, lr}
    709e:	a904      	add	r1, sp, #16
    70a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    70a4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    70a6:	f7f9 fa57 	bl	558 <vprintk>

	va_end(ap);
}
    70aa:	b003      	add	sp, #12
    70ac:	f85d eb04 	ldr.w	lr, [sp], #4
    70b0:	b004      	add	sp, #16
    70b2:	4770      	bx	lr

000070b4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    70b4:	4770      	bx	lr

000070b6 <abort_function>:
{
    70b6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    70b8:	2000      	movs	r0, #0
    70ba:	f7fa f957 	bl	136c <sys_reboot>

000070be <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    70be:	f7fd bb8d 	b.w	47dc <z_fatal_error>

000070c2 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    70c2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    70c4:	6800      	ldr	r0, [r0, #0]
    70c6:	f7fd bb89 	b.w	47dc <z_fatal_error>

000070ca <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    70ca:	2100      	movs	r1, #0
    70cc:	2001      	movs	r0, #1
    70ce:	f7ff bff6 	b.w	70be <z_arm_fatal_error>

000070d2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    70d2:	b508      	push	{r3, lr}
	handler();
    70d4:	f7fa fc58 	bl	1988 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    70d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    70dc:	f7fa bd30 	b.w	1b40 <z_arm_exc_exit>

000070e0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    70e0:	3901      	subs	r1, #1
    70e2:	4603      	mov	r3, r0
    70e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    70e8:	b90a      	cbnz	r2, 70ee <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    70ea:	701a      	strb	r2, [r3, #0]

	return dest;
}
    70ec:	4770      	bx	lr
		*d = *s;
    70ee:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    70f2:	e7f7      	b.n	70e4 <strcpy+0x4>

000070f4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    70f4:	4603      	mov	r3, r0
	size_t n = 0;
    70f6:	2000      	movs	r0, #0

	while (*s != '\0') {
    70f8:	5c1a      	ldrb	r2, [r3, r0]
    70fa:	b902      	cbnz	r2, 70fe <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    70fc:	4770      	bx	lr
		n++;
    70fe:	3001      	adds	r0, #1
    7100:	e7fa      	b.n	70f8 <strlen+0x4>

00007102 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7102:	4603      	mov	r3, r0
	size_t n = 0;
    7104:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7106:	5c1a      	ldrb	r2, [r3, r0]
    7108:	b10a      	cbz	r2, 710e <strnlen+0xc>
    710a:	4288      	cmp	r0, r1
    710c:	d100      	bne.n	7110 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    710e:	4770      	bx	lr
		n++;
    7110:	3001      	adds	r0, #1
    7112:	e7f8      	b.n	7106 <strnlen+0x4>

00007114 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7114:	b510      	push	{r4, lr}
    7116:	1e43      	subs	r3, r0, #1
    7118:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    711a:	4291      	cmp	r1, r2
    711c:	d100      	bne.n	7120 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    711e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7120:	f811 4b01 	ldrb.w	r4, [r1], #1
    7124:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7128:	e7f7      	b.n	711a <memcpy+0x6>

0000712a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    712a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    712c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    712e:	4603      	mov	r3, r0
	while (n > 0) {
    7130:	4293      	cmp	r3, r2
    7132:	d100      	bne.n	7136 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7134:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7136:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    713a:	e7f9      	b.n	7130 <memset+0x6>

0000713c <_stdout_hook_default>:
}
    713c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7140:	4770      	bx	lr

00007142 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    7142:	2806      	cmp	r0, #6
    7144:	d108      	bne.n	7158 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    714a:	2201      	movs	r2, #1
    714c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7150:	f3bf 8f4f 	dsb	sy
        __WFE();
    7154:	bf20      	wfe
    while (true)
    7156:	e7fd      	b.n	7154 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    7158:	4770      	bx	lr

0000715a <pm_state_exit_post_ops>:
    715a:	2300      	movs	r3, #0
    715c:	f383 8811 	msr	BASEPRI, r3
    7160:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7164:	4770      	bx	lr

00007166 <set_on_state>:
	__asm__ volatile(
    7166:	f04f 0320 	mov.w	r3, #32
    716a:	f3ef 8211 	mrs	r2, BASEPRI
    716e:	f383 8812 	msr	BASEPRI_MAX, r3
    7172:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7176:	6803      	ldr	r3, [r0, #0]
    7178:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    717c:	f043 0302 	orr.w	r3, r3, #2
    7180:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7182:	f382 8811 	msr	BASEPRI, r2
    7186:	f3bf 8f6f 	isb	sy
}
    718a:	4770      	bx	lr

0000718c <async_start>:
{
    718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    718e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7190:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    7192:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7194:	f04f 0520 	mov.w	r5, #32
    7198:	f3ef 8611 	mrs	r6, BASEPRI
    719c:	f385 8812 	msr	BASEPRI_MAX, r5
    71a0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    71a4:	250c      	movs	r5, #12
    71a6:	fb05 4401 	mla	r4, r5, r1, r4
    71aa:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    71ac:	f005 0c07 	and.w	ip, r5, #7
    71b0:	f1bc 0f01 	cmp.w	ip, #1
    71b4:	d10c      	bne.n	71d0 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    71b6:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
    71b8:	f386 8811 	msr	BASEPRI, r6
    71bc:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    71c0:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    71c4:	6843      	ldr	r3, [r0, #4]
    71c6:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    71ca:	4798      	blx	r3
	return 0;
    71cc:	2000      	movs	r0, #0
}
    71ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    71d0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    71d4:	42af      	cmp	r7, r5
    71d6:	f386 8811 	msr	BASEPRI, r6
    71da:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    71de:	bf0c      	ite	eq
    71e0:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    71e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    71e8:	e7f1      	b.n	71ce <async_start+0x42>

000071ea <api_start>:
{
    71ea:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    71ec:	2480      	movs	r4, #128	; 0x80
    71ee:	9400      	str	r4, [sp, #0]
    71f0:	f7ff ffcc 	bl	718c <async_start>
}
    71f4:	b002      	add	sp, #8
    71f6:	bd10      	pop	{r4, pc}

000071f8 <onoff_started_callback>:
	return &data->mgr[type];
    71f8:	6900      	ldr	r0, [r0, #16]
    71fa:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    71fc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    7200:	2100      	movs	r1, #0
    7202:	4710      	bx	r2

00007204 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7204:	2000      	movs	r0, #0
    7206:	f7fc ba7d 	b.w	3704 <nrfx_clock_start>

0000720a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    720a:	2000      	movs	r0, #0
    720c:	f7fc bad8 	b.w	37c0 <nrfx_clock_stop>

00007210 <blocking_start_callback>:
{
    7210:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    7212:	f7fd bfd1 	b.w	51b8 <z_impl_k_sem_give>

00007216 <api_stop>:
	return stop(dev, subsys, CTX_API);
    7216:	2280      	movs	r2, #128	; 0x80
    7218:	f7fb b83e 	b.w	2298 <stop>

0000721c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    721c:	6843      	ldr	r3, [r0, #4]
    721e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7220:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7224:	600b      	str	r3, [r1, #0]
}
    7226:	2000      	movs	r0, #0
    7228:	4770      	bx	lr

0000722a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    722a:	6843      	ldr	r3, [r0, #4]
    722c:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    722e:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    7232:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    7236:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    723a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    723e:	2000      	movs	r0, #0
    7240:	4770      	bx	lr

00007242 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7242:	6843      	ldr	r3, [r0, #4]
    7244:	685b      	ldr	r3, [r3, #4]
}
    7246:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7248:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    724c:	4770      	bx	lr

0000724e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    724e:	6843      	ldr	r3, [r0, #4]
    7250:	685b      	ldr	r3, [r3, #4]
}
    7252:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7254:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    7258:	4770      	bx	lr

0000725a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    725a:	6843      	ldr	r3, [r0, #4]
    725c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    725e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    7262:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    7266:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    7268:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    726c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    7270:	2000      	movs	r0, #0
    7272:	4770      	bx	lr

00007274 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
    7274:	07ca      	lsls	r2, r1, #31
	const struct i2c_nrfx_twi_config *config = dev->config;
    7276:	6843      	ldr	r3, [r0, #4]
	struct i2c_nrfx_twi_data *data = dev->data;
    7278:	6900      	ldr	r0, [r0, #16]
	if (I2C_ADDR_10_BITS & dev_config) {
    727a:	d405      	bmi.n	7288 <i2c_nrfx_twi_configure+0x14>
	switch (I2C_SPEED_GET(dev_config)) {
    727c:	f3c1 0242 	ubfx	r2, r1, #1, #3
    7280:	2a01      	cmp	r2, #1
    7282:	d004      	beq.n	728e <i2c_nrfx_twi_configure+0x1a>
    7284:	2a02      	cmp	r2, #2
    7286:	d00a      	beq.n	729e <i2c_nrfx_twi_configure+0x2a>
    7288:	f06f 0015 	mvn.w	r0, #21
}
    728c:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    728e:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
    7290:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    7294:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	data->dev_config = dev_config;
    7298:	6241      	str	r1, [r0, #36]	; 0x24
	return 0;
    729a:	2000      	movs	r0, #0
    729c:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    729e:	681b      	ldr	r3, [r3, #0]
    72a0:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    72a4:	e7f6      	b.n	7294 <i2c_nrfx_twi_configure+0x20>

000072a6 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
    72a6:	6902      	ldr	r2, [r0, #16]
{
    72a8:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    72aa:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    72ae:	e883 0003 	stmia.w	r3, {r0, r1}
}
    72b2:	2000      	movs	r0, #0
    72b4:	4770      	bx	lr

000072b6 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    72b6:	6843      	ldr	r3, [r0, #4]
    72b8:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    72ba:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    72be:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    72c2:	4770      	bx	lr

000072c4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    72c4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    72c6:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    72c8:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    72ca:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    72ce:	b150      	cbz	r0, 72e6 <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    72d0:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72d2:	2000      	movs	r0, #0
    72d4:	7812      	ldrb	r2, [r2, #0]
    72d6:	700a      	strb	r2, [r1, #0]
    72d8:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    72dc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    72e0:	2201      	movs	r2, #1
    72e2:	601a      	str	r2, [r3, #0]
	return 0;
    72e4:	4770      	bx	lr
		return -1;
    72e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    72ea:	4770      	bx	lr

000072ec <is_tx_ready.isra.0>:
	return config->uarte_regs;
    72ec:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    72ee:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    72f0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    72f4:	b940      	cbnz	r0, 7308 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    72f6:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    72f8:	079b      	lsls	r3, r3, #30
    72fa:	d406      	bmi.n	730a <is_tx_ready.isra.0+0x1e>
    72fc:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7300:	3800      	subs	r0, #0
    7302:	bf18      	it	ne
    7304:	2001      	movne	r0, #1
    7306:	4770      	bx	lr
    7308:	2001      	movs	r0, #1
}
    730a:	4770      	bx	lr

0000730c <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    730c:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    730e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7310:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7314:	05c9      	lsls	r1, r1, #23
    7316:	d518      	bpl.n	734a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7318:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    731c:	b1a9      	cbz	r1, 734a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    731e:	f04f 0020 	mov.w	r0, #32
    7322:	f3ef 8111 	mrs	r1, BASEPRI
    7326:	f380 8812 	msr	BASEPRI_MAX, r0
    732a:	f3bf 8f6f 	isb	sy
    732e:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7332:	b130      	cbz	r0, 7342 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7334:	2000      	movs	r0, #0
    7336:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    733a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    733e:	2001      	movs	r0, #1
    7340:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    7342:	f381 8811 	msr	BASEPRI, r1
    7346:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    734a:	6852      	ldr	r2, [r2, #4]
    734c:	06d2      	lsls	r2, r2, #27
    734e:	d515      	bpl.n	737c <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    7350:	f04f 0120 	mov.w	r1, #32
    7354:	f3ef 8211 	mrs	r2, BASEPRI
    7358:	f381 8812 	msr	BASEPRI_MAX, r1
    735c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7360:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7364:	b111      	cbz	r1, 736c <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7366:	2100      	movs	r1, #0
    7368:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    736c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7370:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7374:	f382 8811 	msr	BASEPRI, r2
    7378:	f3bf 8f6f 	isb	sy
}
    737c:	4770      	bx	lr

0000737e <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    737e:	b510      	push	{r4, lr}
    7380:	2200      	movs	r2, #0
    7382:	4604      	mov	r4, r0
    7384:	2101      	movs	r1, #1
    7386:	2028      	movs	r0, #40	; 0x28
    7388:	f7fa faca 	bl	1920 <z_arm_irq_priority_set>
    738c:	2028      	movs	r0, #40	; 0x28
    738e:	f7fa faab 	bl	18e8 <arch_irq_enable>
    7392:	4620      	mov	r0, r4
    7394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7398:	f7fb bce2 	b.w	2d60 <uarte_instance_init.constprop.0>

0000739c <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    739c:	b510      	push	{r4, lr}
    739e:	2200      	movs	r2, #0
    73a0:	4604      	mov	r4, r0
    73a2:	2101      	movs	r1, #1
    73a4:	2002      	movs	r0, #2
    73a6:	f7fa fabb 	bl	1920 <z_arm_irq_priority_set>
    73aa:	2002      	movs	r0, #2
    73ac:	f7fa fa9c 	bl	18e8 <arch_irq_enable>
    73b0:	4620      	mov	r0, r4
    73b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    73b6:	f7fb bcd3 	b.w	2d60 <uarte_instance_init.constprop.0>

000073ba <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    73ba:	4770      	bx	lr

000073bc <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    73bc:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    73be:	6843      	ldr	r3, [r0, #4]
    73c0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    73c2:	7a05      	ldrb	r5, [r0, #8]
    73c4:	6844      	ldr	r4, [r0, #4]
    73c6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    73ca:	42a3      	cmp	r3, r4
    73cc:	d302      	bcc.n	73d4 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    73ce:	f06f 0001 	mvn.w	r0, #1
}
    73d2:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    73d4:	795c      	ldrb	r4, [r3, #5]
    73d6:	428c      	cmp	r4, r1
    73d8:	d001      	beq.n	73de <pinctrl_lookup_state+0x22>
		(*state)++;
    73da:	3308      	adds	r3, #8
    73dc:	e7f0      	b.n	73c0 <pinctrl_lookup_state+0x4>
			return 0;
    73de:	2000      	movs	r0, #0
    73e0:	e7f7      	b.n	73d2 <pinctrl_lookup_state+0x16>

000073e2 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    73e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73e6:	4615      	mov	r5, r2
    73e8:	b085      	sub	sp, #20
    73ea:	4682      	mov	sl, r0
    73ec:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    73f0:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    73f4:	45d0      	cmp	r8, sl
    73f6:	d103      	bne.n	7400 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    73f8:	2000      	movs	r0, #0
}
    73fa:	b005      	add	sp, #20
    73fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7400:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    7404:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7408:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
    740c:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    740e:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
    7412:	bf08      	it	eq
    7414:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    7418:	2b22      	cmp	r3, #34	; 0x22
    741a:	f200 808e 	bhi.w	753a <pinctrl_configure_pins+0x158>
    741e:	e8df f003 	tbb	[pc, r3]
    7422:	1f12      	.short	0x1f12
    7424:	36273a24 	.word	0x36273a24
    7428:	8c8c8c3a 	.word	0x8c8c8c3a
    742c:	8c623d8c 	.word	0x8c623d8c
    7430:	8c8c8c8c 	.word	0x8c8c8c8c
    7434:	8c8c8c8c 	.word	0x8c8c8c8c
    7438:	74716e65 	.word	0x74716e65
    743c:	778c8c8c 	.word	0x778c8c8c
    7440:	8683807d 	.word	0x8683807d
    7444:	89          	.byte	0x89
    7445:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    7446:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    744a:	a803      	add	r0, sp, #12
    744c:	9403      	str	r4, [sp, #12]
    744e:	f7fb ff27 	bl	32a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7452:	9b03      	ldr	r3, [sp, #12]
    7454:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
    7458:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
    745c:	2601      	movs	r6, #1
    745e:	e002      	b.n	7466 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
    7460:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7464:	2600      	movs	r6, #0
    7466:	46b3      	mov	fp, r6
    7468:	e01f      	b.n	74aa <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
    746a:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
    746e:	e7ec      	b.n	744a <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    7470:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    7474:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7476:	a803      	add	r0, sp, #12
    7478:	9403      	str	r4, [sp, #12]
    747a:	f7fb ff11 	bl	32a0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    747e:	9b03      	ldr	r3, [sp, #12]
    7480:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
    7484:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    7488:	f04f 0b01 	mov.w	fp, #1
    748c:	e00d      	b.n	74aa <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    748e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    7492:	2601      	movs	r6, #1
    7494:	e7ef      	b.n	7476 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    7496:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
    749a:	e7e3      	b.n	7464 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    749c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    74a0:	2f00      	cmp	r7, #0
    74a2:	d1df      	bne.n	7464 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    74a4:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    74a6:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
    74a8:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    74aa:	f85a 3b04 	ldr.w	r3, [sl], #4
    74ae:	9301      	str	r3, [sp, #4]
    74b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    74b4:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    74b6:	a803      	add	r0, sp, #12
    74b8:	bf1c      	itt	ne
    74ba:	2601      	movne	r6, #1
    74bc:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    74c0:	9403      	str	r4, [sp, #12]
    74c2:	f7fb feed 	bl	32a0 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74c6:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    74c8:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74ca:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    74ce:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    74d2:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74d4:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
    74d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74dc:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    74e0:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    74e4:	e786      	b.n	73f4 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    74e6:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    74ea:	e7d9      	b.n	74a0 <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    74ec:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    74f0:	f8da 3000 	ldr.w	r3, [sl]
    74f4:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
    74f8:	2b00      	cmp	r3, #0
    74fa:	d0ca      	beq.n	7492 <pinctrl_configure_pins+0xb0>
    74fc:	e7a5      	b.n	744a <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    74fe:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    7502:	e7f5      	b.n	74f0 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    7504:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    7508:	e7f2      	b.n	74f0 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    750a:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
    750e:	e7ef      	b.n	74f0 <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    7510:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7514:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    7516:	f04f 0b00 	mov.w	fp, #0
    751a:	e7c6      	b.n	74aa <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    751c:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
    7520:	e793      	b.n	744a <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    7522:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
    7526:	e7f5      	b.n	7514 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    7528:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
    752c:	e7f2      	b.n	7514 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    752e:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
    7532:	e7ef      	b.n	7514 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    7534:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
    7538:	e7ec      	b.n	7514 <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
    753a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    753e:	e75c      	b.n	73fa <pinctrl_configure_pins+0x18>

00007540 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7540:	b508      	push	{r3, lr}

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    7542:	2000      	movs	r0, #0
    7544:	f7fa fe4e 	bl	21e4 <sys_arch_reboot>

00007548 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7548:	f7ff baaa 	b.w	6aa0 <nrf_cc3xx_platform_init_no_rng>

0000754c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    754c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    754e:	f7fa f8bf 	bl	16d0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    7552:	f7fa f993 	bl	187c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7556:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    755a:	f7ff baa1 	b.w	6aa0 <nrf_cc3xx_platform_init_no_rng>

0000755e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    755e:	4700      	bx	r0

00007560 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7560:	f000 b991 	b.w	7886 <z_impl_k_busy_wait>

00007564 <nrf_gpio_pin_present_check>:
    switch (port)
    7564:	0943      	lsrs	r3, r0, #5
    7566:	d00b      	beq.n	7580 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    7568:	2b01      	cmp	r3, #1
    756a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    756e:	bf18      	it	ne
    7570:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    7572:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    7576:	fa23 f000 	lsr.w	r0, r3, r0
}
    757a:	f000 0001 	and.w	r0, r0, #1
    757e:	4770      	bx	lr
    switch (port)
    7580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7584:	e7f5      	b.n	7572 <nrf_gpio_pin_present_check+0xe>

00007586 <pin_is_task_output>:
{
    7586:	b508      	push	{r3, lr}
    7588:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    758a:	f7fc f97f 	bl	388c <pin_is_output>
    758e:	b110      	cbz	r0, 7596 <pin_is_task_output+0x10>
    7590:	4610      	mov	r0, r2
    7592:	f7fc f965 	bl	3860 <pin_in_use_by_te>
}
    7596:	f000 0001 	and.w	r0, r0, #1
    759a:	bd08      	pop	{r3, pc}

0000759c <nrf_gpio_reconfigure>:
{
    759c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    75a0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    75a2:	a801      	add	r0, sp, #4
{
    75a4:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
    75a8:	460c      	mov	r4, r1
    75aa:	4617      	mov	r7, r2
    75ac:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    75ae:	f7fc f9ef 	bl	3990 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    75b2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    75b4:	1e39      	subs	r1, r7, #0
    75b6:	bf18      	it	ne
    75b8:	2101      	movne	r1, #1
    75ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    75be:	1e23      	subs	r3, r4, #0
    75c0:	bf18      	it	ne
    75c2:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    75c4:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    75c6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    75ca:	bf14      	ite	ne
    75cc:	210c      	movne	r1, #12
    75ce:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    75d0:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    75d2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    75d6:	bf14      	ite	ne
    75d8:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    75dc:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    75de:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    75e2:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    75e6:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    75ea:	bf14      	ite	ne
    75ec:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    75f0:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    75f2:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    75f4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    75f8:	b104      	cbz	r4, 75fc <nrf_gpio_reconfigure+0x60>
    75fa:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    75fc:	b10f      	cbz	r7, 7602 <nrf_gpio_reconfigure+0x66>
    75fe:	783f      	ldrb	r7, [r7, #0]
    7600:	007f      	lsls	r7, r7, #1
    7602:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7604:	b10e      	cbz	r6, 760a <nrf_gpio_reconfigure+0x6e>
    7606:	7836      	ldrb	r6, [r6, #0]
    7608:	00b6      	lsls	r6, r6, #2
    760a:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    760c:	b18d      	cbz	r5, 7632 <nrf_gpio_reconfigure+0x96>
    760e:	7829      	ldrb	r1, [r5, #0]
    7610:	0209      	lsls	r1, r1, #8
    7612:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    7614:	f1b8 0f00 	cmp.w	r8, #0
    7618:	d003      	beq.n	7622 <nrf_gpio_reconfigure+0x86>
    761a:	f898 8000 	ldrb.w	r8, [r8]
    761e:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7622:	4321      	orrs	r1, r4
    7624:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
    7628:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
    762c:	b002      	add	sp, #8
    762e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7632:	4629      	mov	r1, r5
    7634:	e7ed      	b.n	7612 <nrf_gpio_reconfigure+0x76>

00007636 <nrf_gpio_cfg_sense_set>:
{
    7636:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7638:	f10d 030f 	add.w	r3, sp, #15
    763c:	9301      	str	r3, [sp, #4]
    763e:	2300      	movs	r3, #0
{
    7640:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7644:	9300      	str	r3, [sp, #0]
    7646:	461a      	mov	r2, r3
    7648:	4619      	mov	r1, r3
    764a:	f7ff ffa7 	bl	759c <nrf_gpio_reconfigure>
}
    764e:	b005      	add	sp, #20
    7650:	f85d fb04 	ldr.w	pc, [sp], #4

00007654 <twi_transfer>:
{
    7654:	b530      	push	{r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7656:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
    765a:	b12b      	cbz	r3, 7668 <twi_transfer+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    765c:	2300      	movs	r3, #0
    765e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    7662:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
    7666:	2301      	movs	r3, #1
    if (p_cb->error)
    7668:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    766c:	b322      	cbz	r2, 76b8 <twi_transfer+0x64>
    766e:	2200      	movs	r2, #0
    7670:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    7674:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    7678:	f8c0 211c 	str.w	r2, [r0, #284]	; 0x11c
    767c:	f8d0 411c 	ldr.w	r4, [r0, #284]	; 0x11c
    7680:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    7684:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    if (stopped)
    7688:	2b00      	cmp	r3, #0
    768a:	d079      	beq.n	7780 <twi_transfer+0x12c>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
    768c:	2200      	movs	r2, #0
    768e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
        if (!p_cb->error)
    7692:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    7696:	2a00      	cmp	r2, #0
    7698:	d137      	bne.n	770a <twi_transfer+0xb6>
    if (p_cb->bytes_transferred != p_cb->curr_length)
    769a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    769c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    769e:	42a5      	cmp	r5, r4
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    76a0:	bf1f      	itttt	ne
    76a2:	2305      	movne	r3, #5
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    76a4:	f8c0 2500 	strne.w	r2, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    76a8:	f8c0 3500 	strne.w	r3, [r0, #1280]	; 0x500
        return false;
    76ac:	4613      	movne	r3, r2
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
    76ae:	f083 0301 	eor.w	r3, r3, #1
    76b2:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    76b6:	e028      	b.n	770a <twi_transfer+0xb6>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76b8:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    76bc:	b114      	cbz	r4, 76c4 <twi_transfer+0x70>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76be:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    76c2:	e00e      	b.n	76e2 <twi_transfer+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76c4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
    76c8:	b36a      	cbz	r2, 7726 <twi_transfer+0xd2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76ca:	f8c0 411c 	str.w	r4, [r0, #284]	; 0x11c
    76ce:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
    76d2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    76d4:	3201      	adds	r2, #1
    76d6:	634a      	str	r2, [r1, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    76d8:	f8d0 5124 	ldr.w	r5, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    76dc:	b145      	cbz	r5, 76f0 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76de:	f8c0 4124 	str.w	r4, [r0, #292]	; 0x124
    76e2:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76e6:	2201      	movs	r2, #1
    76e8:	6142      	str	r2, [r0, #20]
                p_cb->error = true;
    76ea:	f881 202f 	strb.w	r2, [r1, #47]	; 0x2f
    76ee:	e7cb      	b.n	7688 <twi_transfer+0x34>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    76f0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    76f2:	42a2      	cmp	r2, r4
    76f4:	d204      	bcs.n	7700 <twi_transfer+0xac>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
    76f6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    p_reg->TXD = data;
    76f8:	5ca2      	ldrb	r2, [r4, r2]
    76fa:	f8c0 251c 	str.w	r2, [r0, #1308]	; 0x51c
    76fe:	e7c3      	b.n	7688 <twi_transfer+0x34>
        if (p_cb->curr_tx_no_stop)
    7700:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
    7704:	b11a      	cbz	r2, 770e <twi_transfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7706:	2301      	movs	r3, #1
    7708:	61c3      	str	r3, [r0, #28]
                    return false;
    770a:	2000      	movs	r0, #0
}
    770c:	bd30      	pop	{r4, r5, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
    770e:	6a0a      	ldr	r2, [r1, #32]
    7710:	f012 0f40 	tst.w	r2, #64	; 0x40
    7714:	f04f 0201 	mov.w	r2, #1
    7718:	d003      	beq.n	7722 <twi_transfer+0xce>
    771a:	61c2      	str	r2, [r0, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
    771c:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
    7720:	e7f3      	b.n	770a <twi_transfer+0xb6>
    7722:	6142      	str	r2, [r0, #20]
    7724:	e7b0      	b.n	7688 <twi_transfer+0x34>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7726:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
    772a:	2c00      	cmp	r4, #0
    772c:	d0ac      	beq.n	7688 <twi_transfer+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    772e:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    7732:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7736:	f8d0 4124 	ldr.w	r4, [r0, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
    773a:	2c00      	cmp	r4, #0
    773c:	d1bf      	bne.n	76be <twi_transfer+0x6a>
    if (p_cb->bytes_transferred < p_cb->curr_length)
    773e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    7740:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    7742:	42a2      	cmp	r2, r4
    7744:	d2a0      	bcs.n	7688 <twi_transfer+0x34>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
    7746:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
    7748:	f8d0 5518 	ldr.w	r5, [r0, #1304]	; 0x518
    774c:	54a5      	strb	r5, [r4, r2]
        ++(p_cb->bytes_transferred);
    774e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7750:	6a8c      	ldr	r4, [r1, #40]	; 0x28
        ++(p_cb->bytes_transferred);
    7752:	3201      	adds	r2, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    7754:	1e65      	subs	r5, r4, #1
    7756:	42aa      	cmp	r2, r5
        ++(p_cb->bytes_transferred);
    7758:	634a      	str	r2, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    775a:	d108      	bne.n	776e <twi_transfer+0x11a>
    775c:	6a0a      	ldr	r2, [r1, #32]
    775e:	0654      	lsls	r4, r2, #25
    7760:	d402      	bmi.n	7768 <twi_transfer+0x114>
    p_reg->SHORTS = mask;
    7762:	2202      	movs	r2, #2
    7764:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7768:	2201      	movs	r2, #1
    776a:	6202      	str	r2, [r0, #32]
    776c:	e78c      	b.n	7688 <twi_transfer+0x34>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    776e:	42a2      	cmp	r2, r4
    7770:	d1fa      	bne.n	7768 <twi_transfer+0x114>
    7772:	6a0a      	ldr	r2, [r1, #32]
    7774:	0652      	lsls	r2, r2, #25
    7776:	d587      	bpl.n	7688 <twi_transfer+0x34>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
    7778:	2302      	movs	r3, #2
    777a:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
    777e:	e7c4      	b.n	770a <twi_transfer+0xb6>
    return true;
    7780:	2001      	movs	r0, #1
    7782:	e7c3      	b.n	770c <twi_transfer+0xb8>

00007784 <nrf_gpio_pin_set>:
{
    7784:	b507      	push	{r0, r1, r2, lr}
    7786:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7788:	a801      	add	r0, sp, #4
    778a:	f7fc ff5f 	bl	464c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    778e:	9a01      	ldr	r2, [sp, #4]
    7790:	2301      	movs	r3, #1
    7792:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7794:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7798:	b003      	add	sp, #12
    779a:	f85d fb04 	ldr.w	pc, [sp], #4

0000779e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    779e:	f7fc bfe7 	b.w	4770 <_DoInit>

000077a2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    77a2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    77a4:	f7ff fffb 	bl	779e <SEGGER_RTT_Init>

	return 0;
}
    77a8:	2000      	movs	r0, #0
    77aa:	bd08      	pop	{r3, pc}

000077ac <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    77ac:	4770      	bx	lr

000077ae <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    77ae:	b140      	cbz	r0, 77c2 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    77b0:	68c3      	ldr	r3, [r0, #12]
    77b2:	7858      	ldrb	r0, [r3, #1]
    77b4:	f010 0001 	ands.w	r0, r0, #1
    77b8:	bf1e      	ittt	ne
    77ba:	7818      	ldrbne	r0, [r3, #0]
    77bc:	fab0 f080 	clzne	r0, r0
    77c0:	0940      	lsrne	r0, r0, #5
}
    77c2:	4770      	bx	lr

000077c4 <z_early_memset>:
	(void) memset(dst, c, n);
    77c4:	f7ff bcb1 	b.w	712a <memset>

000077c8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    77c8:	f7ff bca4 	b.w	7114 <memcpy>

000077cc <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    77cc:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
    77d0:	4313      	orrs	r3, r2
    77d2:	f013 0303 	ands.w	r3, r3, #3
    77d6:	d10c      	bne.n	77f2 <create_free_list+0x26>
	slab->free_list = NULL;
    77d8:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    77da:	68c1      	ldr	r1, [r0, #12]
    77dc:	4299      	cmp	r1, r3
    77de:	d801      	bhi.n	77e4 <create_free_list+0x18>
	return 0;
    77e0:	2000      	movs	r0, #0
    77e2:	4770      	bx	lr
		*(char **)p = slab->free_list;
    77e4:	6981      	ldr	r1, [r0, #24]
    77e6:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    77e8:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
    77ea:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    77ec:	3301      	adds	r3, #1
		p += slab->block_size;
    77ee:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    77f0:	e7f3      	b.n	77da <create_free_list+0xe>
		return -EINVAL;
    77f2:	f06f 0015 	mvn.w	r0, #21
}
    77f6:	4770      	bx	lr

000077f8 <k_mem_slab_init>:
{
    77f8:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    77fa:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
    77fe:	2300      	movs	r3, #0
	slab->buffer = buffer;
    7800:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
    7802:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    7804:	6083      	str	r3, [r0, #8]
{
    7806:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    7808:	f7ff ffe0 	bl	77cc <create_free_list>
	if (rc < 0) {
    780c:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    780e:	bfa8      	it	ge
    7810:	e9c4 4400 	strdge	r4, r4, [r4]
}
    7814:	bd10      	pop	{r4, pc}

00007816 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7816:	f3ef 8005 	mrs	r0, IPSR
}
    781a:	3800      	subs	r0, #0
    781c:	bf18      	it	ne
    781e:	2001      	movne	r0, #1
    7820:	4770      	bx	lr

00007822 <z_pm_save_idle_exit>:
{
    7822:	b508      	push	{r3, lr}
	pm_system_resume();
    7824:	f7f9 fe18 	bl	1458 <pm_system_resume>
}
    7828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    782c:	f7ff bdc5 	b.w	73ba <sys_clock_idle_exit>

00007830 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    7830:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7834:	428b      	cmp	r3, r1
    7836:	d001      	beq.n	783c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    7838:	f7fe b9f6 	b.w	5c28 <z_set_prio>
}
    783c:	2000      	movs	r0, #0
    783e:	4770      	bx	lr

00007840 <z_impl_k_mutex_init>:
{
    7840:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7842:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    7844:	e9c3 0002 	strd	r0, r0, [r3, #8]
    7848:	e9c3 3300 	strd	r3, r3, [r3]
}
    784c:	4770      	bx	lr

0000784e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    784e:	4603      	mov	r3, r0
    7850:	b920      	cbnz	r0, 785c <z_reschedule_irqlock+0xe>
    7852:	f3ef 8205 	mrs	r2, IPSR
    7856:	b90a      	cbnz	r2, 785c <z_reschedule_irqlock+0xe>
    7858:	f7fa b8b6 	b.w	19c8 <arch_swap>
    785c:	f383 8811 	msr	BASEPRI, r3
    7860:	f3bf 8f6f 	isb	sy
}
    7864:	4770      	bx	lr

00007866 <z_reschedule_unlocked>:
	__asm__ volatile(
    7866:	f04f 0320 	mov.w	r3, #32
    786a:	f3ef 8011 	mrs	r0, BASEPRI
    786e:	f383 8812 	msr	BASEPRI_MAX, r3
    7872:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7876:	f7ff bfea 	b.w	784e <z_reschedule_irqlock>

0000787a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    787a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    787c:	f7ff f88e 	bl	699c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7880:	bd08      	pop	{r3, pc}

00007882 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    7882:	f7ff b88b 	b.w	699c <sys_clock_tick_get>

00007886 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7886:	b108      	cbz	r0, 788c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7888:	f7fa bcc2 	b.w	2210 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    788c:	4770      	bx	lr

0000788e <k_heap_init>:
{
    788e:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    7890:	f100 040c 	add.w	r4, r0, #12
    7894:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    7898:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    789a:	f7f8 be6b 	b.w	574 <sys_heap_init>
	...
